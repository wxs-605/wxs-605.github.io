[{"categories":["面经"],"content":"写在前头 这篇文章用来记录面试过程中的一些题目，以及自己在面试过程中请教HR指出的自己的不足之处，均在此记录，加以改正！ ","date":"2024-01-28","objectID":"/cpp-%E9%9D%A2%E7%BB%8F/:0:0","tags":["CPP"],"title":"CPP 面经","uri":"/cpp-%E9%9D%A2%E7%BB%8F/"},{"categories":["面经"],"content":"公司一 这家公司的技术面问了很多操作系统方面的知识，还有部分计网知识，没问我项目和C++方面的东西，最后有一道手撕代码，LeetCode上的简单题。 主管面的话结果没给我，但我估计已经凉了。也确实，这次主管面HR给了我5分钟自我介绍，但我说的很简略。还有项目介绍方面，我一上来就讲了我做了什么东西，把HR讲的云里雾里的，逻辑不清。这些是最后反问环节我主动询问HR，HR向我反馈的，要加以改正。 ","date":"2024-01-28","objectID":"/cpp-%E9%9D%A2%E7%BB%8F/:1:0","tags":["CPP"],"title":"CPP 面经","uri":"/cpp-%E9%9D%A2%E7%BB%8F/"},{"categories":["面经"],"content":"技术面 自我介绍 进程跟线程的区别？ 线程（Thread）和进程（Process）是操作系统中的两个基本概念，它们有以下区别： 资源占用：一个进程是一个独立的执行环境，拥有自己的地址空间、文件描述符、打开的文件等资源。而线程是进程内的一个执行单元，共享同一个地址空间和其他资源。 执行单位：进程是一个独立的执行单位，拥有独立的代码和数据。而线程是进程内的执行流，可以看作是轻量级的进程，共享进程的代码和数据。 切换开销：由于线程共享进程的资源，线程之间的切换开销相对较小。而进程之间的切换需要保存和恢复更多的状态信息，开销相对较大。 通信方式：进程之间的通信需要使用特定的机制，如管道、消息队列、共享内存等。而线程之间可以直接通过共享内存和全局变量等进行通信，因为它们共享同一地址空间。 并发性：由于线程共享进程的资源，多线程程序可以实现更高的并发性。而多进程程序需要使用进程间通信机制来实现并发操作。 容错性：一个线程的崩溃可能会导致整个进程的崩溃，因为它们共享同一地址空间。而多个进程之间相互独立，一个进程的崩溃不会影响其他进程的执行。 进程是操作系统中资源分配和调度的基本单位，而线程是进程内的执行单位，用于实现并发执行和提高程序的效率。线程在共享资源和通信方面具有优势，但需要更谨慎地处理并发访问的问题。进程之间的隔离性使其更容易实现容错和安全性。 进程之间的通信方式？ 管道（Pipe）：管道是一种半双工的通信方式，它可以在具有亲缘关系的进程之间传递数据。管道可以分为匿名管道和命名管道，匿名管道通常用于父子进程之间的通信。 共享内存（Shared Memory）：共享内存是一种高效的进程间通信方式，多个进程可以访问同一块物理内存区域，实现数据共享。需要注意的是，由于共享内存不提供同步机制，因此在使用时需要结合其他同步手段，如信号量。 信号量（Semaphore）：信号量用于协调多个进程对共享资源的访问，它可以用作互斥锁或者计数器。通过对信号量的操作（P操作和V操作），进程可以实现对资源的互斥访问和同步。 消息队列（Message Queue）：消息队列是一种有序的消息链表，进程可以通过消息队列向其他进程发送消息。每个消息都有一个类型标识，接收进程可以选择性地接收某种类型的消息。 你了解中断吗？ 中断是指硬件设备或软件系统向中央处理器发出信号，要求其暂停当前正在执行的任务，转而去处理新发生的事件。中断通常用于处理输入/输出请求、时钟中断、故障和异常等情况。中断分为内中断和外中断： 内中断又称软件中断，是由CPU执行指令执行期间产生的中断信号，例如程序执行过程中遇到了除零操作、越界访问、栈溢出等异常情况。这种中断需要通过软件来处理，通常由操作系统内核来处理。内中断的处理是在CPU内部完成的，没有外部硬件设备的参与。 外中断又称硬件中断，是由外部硬件设备向CPU发出的中断信号，例如键盘输入、鼠标移动、磁盘读写等操作。这种中断需要通过硬件来处理，通常由中断控制器来处理。外中断的处理是在CPU内部和外部硬件设备之间完成的，需要外部设备的参与。 中断的处理流程？ 中断的处理流程通常包括以下几个步骤： 中断触发：当发生中断事件时，可以是内部产生的异常或外部设备发送的中断请求。例如，键盘输入事件或除零错误等。 中断向量定位：CPU通过中断向量来确定中断类型和对应的中断处理程序的位置。中断向量是一个预定义的地址，记录了中断处理程序的入口点。 保存上下文：在开始执行中断处理程序之前，CPU会保存当前的执行现场（即上下文），包括程序计数器、寄存器状态和其他必要的信息。这是为了确保在中断处理完成后能够恢复到原来的执行状态。 转移控制权：CPU将控制权转移到中断处理程序的入口点，开始执行中断处理程序。这个过程通常涉及跳转指令或函数调用。 中断处理：中断处理程序根据中断类型进行相应的处理。这可能涉及到与设备通信、数据处理、状态更新等操作，具体的处理逻辑根据不同的中断类型而异。 恢复上下文：在中断处理完成后，CPU会恢复之前保存的上下文，包括程序计数器、寄存器状态等。这样可以继续执行被中断的程序，并确保程序的执行不受影响。 中断返回：CPU将控制权从中断处理程序返回到被中断的程序，继续执行原来的指令序列。 你了解死锁吗？死锁产生的原因是啥？ 死锁是指两个或多个进程或线程在执行过程中，因争夺资源而造成的一种僵局状态。死锁产生的原因通常包括以下几个方面： 互斥条件：进程对所分配到的资源进行排他性使用，即在一段时间内某资源只能被一个进程占有。当某进程申请新的资源而又因为其他进程占有而无法分配时，该进程会进入等待状态。 请求与保持条件：已获得资源的进程可以继续申请新的资源，而不释放已占有的资源。如果此时有其他进程需要已占有的资源，则会造成资源竞争，导致死锁。 不剥夺条件：进程已获得的资源在未使用完之前，不能被剥夺，只能在自己使用完时自行释放。这样做的目的是防止进程有可能永远等待下去。 循环等待条件：存在一个进程等待队列{P1, P2, …, Pn}，其中P1等待P2所占有的资源，P2等待P3所占有的资源，……，Pn等待P1所占有的资源，形成一个进程循环等待环路。 你有什么办法解决死锁吗？ 预防死锁：通过破坏死锁产生的四个条件之一，来预防死锁的发生。例如，只允许进程一口气获取它所需的全部资源，或者按照一定的顺序获取资源。 避免死锁：在资源分配过程中，用某种方法避免系统进入不安全状态，避免死锁的产生。采用银行家算法判断是否存在安全序列； 检测死锁：通过周期性地检测系统中是否存在死锁，来及时发现和解除死锁。检测死锁的方法有多种，例如使用资源分配图、使用等待-通知机制等。 解除死锁：当检测到死锁时，采取一些措施来解除死锁。例如，通过抢占资源、回收资源、剥夺进程等方式来解除死锁。 操作系统的内存管理？ 内存管理的主要任务包括以下几个方面： 内存分配：操作系统负责将可用的内存空间分配给进程。常见的内存分配方式有连续分配、非连续分配和虚拟内存技术等。 连续分配：将物理内存按照固定大小的块划分，并将这些块分配给进程。常见的连续分配算法有首次适应、最佳适应和最坏适应等。 非连续分配：将进程的地址空间划分为多个不连续的部分，并将这些部分映射到物理内存的不同区域。常见的非连续分配方式有页式和段式。 虚拟内存：通过将进程的逻辑地址空间映射到物理内存，实现了比物理内存更大的地址空间。虚拟内存将内存分为固定大小的页，并根据需求将页加载到物理内存中。 内存保护：操作系统通过内存保护机制来保护不同进程之间的内存空间，防止进程越界访问其他进程的内存。常见的内存保护机制有基址限制寄存器（Base and Limit Register）和分段机制等。 内存回收：当一个进程结束或释放内存时，操作系统需要将其占用的内存空间回收并重新分配给其他进程。内存回收可以通过回收页、合并碎片等方式进行。 虚拟内存管理：虚拟内存是一种扩展了物理内存的技术，它将物理内存和磁盘空间结合起来，提供了比物理内存更大的地址空间。操作系统负责将进程的虚拟地址映射到物理内存或者磁盘上，并负责进行页面置换、页面调度等管理操作。 虚拟内存如何映射到物理内存？ 虚拟内存是一种扩展了物理内存的技术，它将进程的逻辑地址空间映射到物理内存或磁盘上。虚拟内存的映射过程主要包括以下几个步骤： 地址转换：当进程访问虚拟地址时，操作系统需要将虚拟地址转换成物理地址，以便正确地定位数据在内存中的位置。这个转换过程是通过硬件辅助的地址转换机制来完成的。进程切换时，进程的起始物理地址被放进 页表基址寄存器(PTBR)中。 页表查找：操作系统维护了一个页表（Page Table），它记录了虚拟内存页面和物理内存页面之间的映射关系。当进行地址转换时，操作系统会根据虚拟地址的页表索引定位到相应的页表项。 映射状态检查：在页表项中，记录了该虚拟页是否已经被映射到物理内存中，以及物理页的地址。操作系统会检查页表项的映射状态，如果虚拟页已经映射到物理内存中，则可以直接得到物理页的地址。 缺页处理：如果虚拟页未映射到物理内存中，即发生了缺页（Page Fault），操作系统需要进行缺页处理。缺页处理的过程包括从磁盘上加载缺失的页面到物理内存中，并更新页表的映射关系。 页面置换：如果物理内存已满，操作系统需要选择一个页面进行置换，以腾出空间来加载新的页面。常见的页面置换算法有最佳置换算法、最近未使用（LRU）置换算法等。 页面调度：操作系统还可以根据页面的访问模式和访问频率进行页面调度，将经常被访问的页面保留在物理内存中，减少缺页的发生。 物理地址计算：一旦确定了虚拟地址对应的物理页，操作系统将通过页表项中的物理页地址和页内偏移量计算出真正的物理地址。 虚拟内存的映射过程是操作系统内存管理的核心部分，它通过将进程的逻辑地址空间映射到物理内存或磁盘上，提供了比实际物理内存更大的地址空间，提高了系统的灵活性和性能。 页面置换算法有哪些？ 最佳置换算法（Optimal Replacement Algorithm）：最佳置换算法总是选择将未来最长时间不被访问的页面进行置换，即选择与当前页面距离最远的页面。这种算法的优点是能够保证在所有置换算法中产生的缺页次数最少，但是需要预测未来的页面访问模式，实现较为困难。 先进先出置换算法（FIFO Replacement Algorithm）：先进先出置换算法总是选择最早进入内存的页面进行置换。这种算法的实现简单，但是存在一种称为“Belady异常”的现象，即当内存大小增加时，缺页次数反而会增加。 最近最久未使用置换算法（LRU Replacement Algorithm）","date":"2024-01-28","objectID":"/cpp-%E9%9D%A2%E7%BB%8F/:1:1","tags":["CPP"],"title":"CPP 面经","uri":"/cpp-%E9%9D%A2%E7%BB%8F/"},{"categories":["面经"],"content":"主管面 自我介绍 问项目 你接受加班吗？你加班的上限是什么？ 在项目合作开发中，你觉得怎么样才能更好的合作，或者说你学到了什么？ 你最熟悉哪个项目？写了多少行代码？ 总结，最后面试官说我准备不充分，自我介绍没有展示自己的优势，回答的太简略，项目介绍方面，不要一上来就说你做了什么，要先说项目的背景，存在的问题，业界怎么做的，你是怎么解决的，你做了什么。 ","date":"2024-01-28","objectID":"/cpp-%E9%9D%A2%E7%BB%8F/:1:2","tags":["CPP"],"title":"CPP 面经","uri":"/cpp-%E9%9D%A2%E7%BB%8F/"},{"categories":["LeetCode"],"content":"今天刷了动态规划的题，总结一下其中的收获。 思想 使用动态规划解题，得出的解是全局最优解，那么可以知道，在求解的过程中每一个解都是最优的。既 dp[i] 是 i 位置处的最优解，dp[i - 1] 是 i - 1 状态的最优解。故动态规划的核心是找到这两者之间的关系。当然，这并不是绝对的，也有些题是找 dp[i] 与 dp[0…i - 1]之间的关系。 dp[i] 与 dp[i - 1] 之间的关系； dp[i] 与 [ dp[0], dp[i - 1] ]之间的关系； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:0:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"打家劫舍 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。 ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:1:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"思路 不能连续偷两家，就是 dp[i - 1] 对 dp[i] 不起作用；那我们可想到 dp[i] 与 dp[i - 2] 、 dp[i - 3] 的关系，这样就保证了不会连续偷两家而触发报警； dp[i] = max(dp[i - 2], dp[i - 3]) + nums[i] ； 实现过程 class Solution { public: int rob(vector\u003cint\u003e\u0026 nums) { int len = nums.size(); if (len == 1) return nums[0]; if (len == 2) return std::max(nums[0], nums[1]); vector\u003cint\u003e dp(len); std::fill(dp.begin(), dp.end(), 0); dp[0] = nums[0]; dp[1] = nums[1]; for (int i = 2; i \u003c len; i++) { if (i == 2) dp[i] = dp[i - 2] + nums[i]; else dp[i] = std::max(dp[i - 2], dp[i - 3]) + nums[i]; } return std::max(dp[len - 1], dp[len - 2]); } }; 时间复杂度：遍历一次 nums ,故为O(N)； 空间复杂度：使用了 dp 数组存储中间信息，故为O(N)； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:1:1","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"完全平方数 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。 ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:2:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"思路 一步一步找，从 1 找到 n。使用 dp 存储中间信息，当计算 dp[i] 时，从 1 找到 i ;： dp[i] = dp[i - j * j] + 1； 其中 j2 ∈ [1, i)； 实现过程 class Solution { public: int numSquares(int n) { vector\u003cint\u003e dp(n + 2); std::fill(dp.begin(), dp.end(), 0); for (int i = 1; i \u003c= n; i++) { dp[i] = i; for (int j = 1; j * j \u003c= i; j++) dp[i] = std::min(dp[i], dp[i - j * j] + 1); } return dp[n]; } }; 时间复杂度：遍历了一次数组，计算 dp[i] 的时间复杂度为O(N0.5)，故总的时间复杂度为O(N1.5)； 空间复杂度：使用了状态方程 dp ，故为O(N)； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:2:1","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"零钱兑换 给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。 计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。 你可以认为每种硬币的数量是无限的。 ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:3:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"思路 思路与完全平方数差不多，不过这里的可用的序列已经给出。一步一步算，从 1 算到 amount 。这里有个小剪枝，将 coins 序列从小到大排序一下，若 coins[i] \u003e i ，说明下一个coins也会大于，此时可以直接退出遍历； 实现过程 class Solution { public: int coinChange(vector\u003cint\u003e\u0026 coins, int amount) { if (!amount) return 0; vector\u003cint\u003e dp(amount + 2); std::fill(dp.begin(), dp.end(), INT_MAX); sort(coins.begin(), coins.end()); dp[0] = 0; for (int i = 1; i \u003c= amount; i++) { for (int j = 0; j \u003c coins.size(); j++) { if (coins[j] \u003e i) break; if (dp[i - coins[j]] == INT_MAX) continue; dp[i] = std::min(dp[i - coins[j]] + 1, dp[i]); } } if (dp[amount] == INT_MAX) return -1; return dp[amount]; } }; 时间复杂度：O(N1.5； 空间复杂度：使用了一维的状态方程，故为O(N)； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:3:1","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"最长递增子序列 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。 ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:4:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"思路 这道题就是寻找 dp[i] 与 [ dp[0], dp[i - 1] ] 之间的关系。这里说明一下为什么不能只找 dp[i - 1]的关系，若 nums[i - 1] 同时大于 nums[i] 、nums[i - 2]，但是又存在 nums[i - 2] \u003c nums[i] \u003c nums[i + 1] 的情况，这时 dp[i] 得到的就不是最优解。 实现过程 class Solution { public: int lengthOfLIS(vector\u003cint\u003e\u0026 nums) { int len = nums.size(); if (len == 1) return 1; vector\u003cint\u003e dp(len + 2, 1); int ans = INT_MIN; for (int i = 1; i \u003c len; i++) { for (int j = 0; j \u003c i; j++) if (nums[i] \u003e nums[j]) dp[i] = std::max(dp[i], dp[j] + 1); ans = std::max(ans, dp[i]); } return ans; } }; 时间复杂度：每次计算 dp[i] 时都要从 dp[0] 遍历到 dp[i - 1] ，故为O(N); 空间复杂度：使用了状数组 dp ，故为O(N)； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:4:1","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"乘积最大子数组 给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。 测试用例的答案是一个 32-位 整数。 子数组 是数组的连续子序列。 ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:5:0","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["LeetCode"],"content":"思路 不考虑特殊情况下，dp[i] = max(dp[i] * nums[i]，nums[i]) ；若 nums[i] 是负数呢？会出现什么情况？这时表示最大值的 dp[i] 变成了最小值，继续计算下去，将会得到一个错误答案。因此，可以记录连续子数组的最大值和最小值，当 nums[i] 是负数时，最大值变成最小值，最小值变成最大值，此时只需要交换最大值和最小值，按照上面的规则继续计算即可。 实现过程 class Solution { public: int maxProduct(vector\u003cint\u003e\u0026 nums) { int len = nums.size(); if (len == 1) return nums[0]; int cur_max = nums[0]; int cur_min = nums[0]; int ans = nums[0]; for (int i = 1; i \u003c nums.size(); i++) { if (nums[i] \u003c 0) swap(cur_max, cur_min); cur_max = max(cur_max * nums[i], nums[i]); cur_min = min(cur_min * nums[i], nums[i]); ans = max(cur_max, ans); } return ans; } }; 时间复杂度：遍历一次 nums ，故为O(N)； 空间复杂度：使用了常熟个变量，故为O(1)； ","date":"2024-01-28","objectID":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/:5:1","tags":["动态规划"],"title":"LeetCode 动态规划","uri":"/leetcode-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"categories":["CPP"],"content":"参考文章：https://blog.csdn.net/Awesomewan/article/details/123948929 链接 参考公众号：阿Q技术站 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:0:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"变量初始化/虚函数/多态 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"全局静态变量和函数静态变量的初始化顺序？ 全局静态变量的初始化顺序： 在同一个编译单元中，全局静态变量的初始化顺序按照它们在代码中的出现顺序进行； 在不同的编译单元中，全局静态变量的初始化顺序是不确定的，取决于编译器和链接器的实现。 函数静态变量的初始化顺序： 函数内部的静态变量的初始化顺序与它们在函数内部的声明顺序相同； 函数内部的静态变量只会在第一次调用函数时初始化，之后的调用不会再重新初始化； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"谈一下你对多态的理解？ 多态是指允许不同的子类型的对象对同一消息做出不同的响应，也可简单的概括为“一个接口，多种方法”，C++多态主要是通过虚函数实现的，虚函数允许子类重写。多态有两种，分别是编译时多态和运行时多态，也叫静态多态和动态多态。 编译时多态(静态多态，编译阶段，地址早绑定)： 静态多态通过函数重载和运算符重载来实现。在编译时，编译器根据调用的函数或运算符的参数类型和个数来确定具体调用哪个函数或运算符，这就是编译时多态。比如我有两个同名的 add 函数，第一个 add 函数的参数类型是 int 型，第二个 add 函数的参数类型是 float 型，那么我传入两个 int 型的参数到 add 函数中，则其回调用第一个 add 函数，返回一个 int 型的结果。 运行时多态(动态多态，运行阶段，地址晚绑定)： 运行时多态通过继承和虚函数来实现。在运行时，程序根据对象的实际类型来确定调用哪个函数。在 C++ 中，通过在基类中声名虚函数，在派生类中重写这些虚函数，然后通过基类的指针或引用来调用这些函数，就可实现动态多态。 class Fruit{ public: virtual void fruitName(){cout \u003c\u003c \"I am ..\\n\" \u003c\u003c endl;} }; class Apple : public Fruit{ public: void fruitName(){cout \u003c\u003c \"I am Apple!\\n\" \u003c\u003c endl;} }; int main(){ Fruit* fruit1 = new Apple(); fruit1-\u003efruitName(); // print I am Apple! delete fruit1; return 0; } ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"虚函数表的位置？ 在C++中，虚函数表(virtual function table ， 简称vtable)适用于实现动态多态的一种机制，它存储了类的虚函数的地址，虚函数表通常是针对每个包含虚函数的类生成的，每个对象的内存中都有一个指向其所属类的虚函数表的指针，，用于在运行时确定调用哪个函数。 虚函数表的存储位置通常是在每个对象的内存布局中，具体位置取决于编译器和操作系统的是实现。一般来说，虚函数表位于对象的内存布局的起始位置或者末尾，但并不是标准规定。虚函数表本身是一个指针数组，其中存储了指向每个虚函数的指针。 +----------------+ | 虚函数表指针 | --\u003e 指向虚函数表的指针 +----------------+ | 其他成员变量 | --\u003e 类的其他成员变量 +----------------+ 虚函数表： +----------------+ | 虚函数指针 1 | --\u003e 指向第一个虚函数的指针 +----------------+ | 虚函数指针 2 | --\u003e 指向第二个虚函数的指针 +----------------+ | ... | +----------------+ 示意图中，一个对象的内存布局中包括了一个指向虚函数表的指针和其他成员变量。虚函数表本身是一个指针数组，每个元素指向对应虚函数的实际实现，当调用一个虚函数时，程序会根据对象的虚函数表指针找到对应的虚函数表，然后根据函数在虚函数表中的索引找到实际的函数进行调用。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:3","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"运行时刻能把虚函数表拿出来吗？ 在程序运行时，虚函数表是存储在内存中的，但是，C++并没有提供直接的语言级别的手段来访问或操作虚函数表。虚函数表的内部结构和存储位置是由编译器决定，不同的编译器和不同的平台可能有不同的实现方式。 虚函数表存储在对象的内存布局中，一般作为对象的第一个成员，位于对象的起始位置处。这样做的目的是为了在运行时能够快速地找到对象所属类的虚函数表，从而实现动态多态性。每个包含虚函数的类都有自己的虚函数表，当对象被创建时，编译器会在对象的内存中插入一个指向类的虚函数表的指针(虚指针)，用于在运行时动态绑定。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:4","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"拿到虚函数表的地址后，是否可以改写虚函数表的内容？ 一般情况下，虚函数表是存储在程序的只读数据段中的，这意味着虚函数表的内容是只读的，不能被修改。如果尝试修改只读数据段的内容，通常会导致操作系统抛出段错误，或访问权限错误，从而导致程序异常终止。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:1:5","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"基础知识 联系 \u003c=\u003e 区别 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"指针和引用的区别？ 指针是一个变量，存储的是一个地址，指向内存的一个单元；引用跟原来的变量是同一个东西，是原变量的别名； 引用可以为空，被创建时必须初始化，并且初始化后不能改变；指针可以是空值，可以在任何时候初始化，初始化后可以指向其他的内存单元； 指针可以加 const 修饰，但引用不能加 const ； 可以有指针的指针，既多级指针，但没有引用的引用，引用只有一级； sizeof(引用) 得到的是原变量的大小，sizeof(指针) 得到的是指针本身的大小； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"堆区和栈区的区别？ 申请方式不同：栈是系统自动分配的，堆是程序员主动申请的； 申请后的系统响应：栈里分配空间时，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出；申请堆空间时，在记录空闲地址空间的链表上寻找第一个大于申请空间的节点分配给程序，然后将该节点在空闲链表上删除，大多数系统中该块空间的首地址存放的是本次分配空间的大小，便于释放，将该块空间上的剩余剩余空间再次链接到空闲链表上； 栈在内存中是一块连续的空间(向低地址扩展)，最大容量已经设定好，通常是64MB，堆在内存中的空间时不连续的(向高地址扩展)； 申请效率：栈是系统自动分配，申请效率高，但程序员无法控制；堆是由程序员主动申请，效率低，使用起来方便的但是容易产生碎片； 栈中存放的是局部变量，函数参数；堆中存放的内容由程序员控制； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"new 和 delete 是如何实现的？new 和 malloc 的异同？ new 和 delete 搭配使用，malloc 和 free 搭配使用； malloc/free 是库函数，需要引入头文件 “#include\u003cstdlib.h\u003e”；new/delete 是关键字，需要编译器支持参数； malloc 申请空间时需要确定申请的空间大小，new 申请空间时，无需指定分配空间大大小，编译器会根据类型自动计算； maloc 申请空间时，返回的是 void* 类型，需要强制转换成对象类型的指针；new 申请空间时，返回的类型是对象的指针类型，无需强制类型转换； malloc分配失败时，返回空指针，new 分配失败时，抛出 bad_alloc 异常； 自定义类型：new 首先调用 operator new 函数申请空间(底层通过 malloc 实现)，然后调用对象的构造函数初始化，最后返回定义类型的指针；delete 先调用析构函数，然后嗲用operator delete 释放空间(底层通过 free )实现。malloc/free 不支持自定义类型的对象的析构和构造； 内存区域：new 操作是从自由存储去上为对象动态分配内存，而 malloc 函数从堆上动态分配内存； 自由存储区和堆区的区别 自由存储区（或堆区）是用于动态分配内存的一块较大的、连续的内存区域。与栈区不同，自由存储区的生命周期不受函数的调用和返回限制，可以在程序的任意位置进行内存的分配和释放。主要区别如下： 分配方式：自由存储区使用new操作符来分配内存。 内存管理：自由存储区的内存分配和释放需要手动控制，开发者需要负责在适当的时候使用delete操作符释放已分配的内存。而堆区的内存管理也是手动进行的，通常使用malloc()和free()函数来分配和释放内存。 分配粒度：自由存储区的内存分配粒度更大，可以分配任意大小的内存块，而堆区的内存分配粒度较小，一般以字节为单位。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:3","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"C和C++的区别？ C 是面向过程的编程，特点是函数；C++ 是面向对象的编程，特点是类。C++的三大特性是封装、继承、多态； C 主要用在嵌入式开发、驱动开发和硬件直接打交道的领域；C++ 可以用于应用层的开发、用户界面开发等和操作系统直接打交道的领域。（应用领域）； C++ 继承了C的底层操作特性，增加了面向对象的机制，增加了泛型编程、异常处理、运算符重载，还增加了命名空间，避免了命名冲突。（相较于 C 的升级）； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:4","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"深浅拷贝的区别？ 深拷贝：拷贝指针和指针指向的内容，深拷贝完成后，两个指针指向不同的地址； 浅拷贝：只是堆指针的拷贝，不拷贝指针指向的内容，浅拷贝完成后两个指针指向同一个地址； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:5","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"虚函数和纯虚函数的区别？ 虚函数和纯虚函数可以定义在同一个类中，含有纯虚函数的类被称为抽象类，而含有虚函数的类不能被称为抽象类； 虚函数可以直接被使用，也可以被子类重载后以多态的形式调用，而纯虚函数必须在子类中实现该函数才可以使用，纯虚函数在基类中只有声名而没有定义； 虚函数和纯虚函数都可以在子类中被重载，以多态的形式被调用，目的是提供一个统一的接口； 虚函数和纯虚函数的定义中不能有static标识符，因为 static 修饰的函数在编译时候要求前期绑定，而虚函数却是动态绑定，而且被两者修饰的函数声明周期也不一样； 虚函数必须实现，如果不实现，编译器将报错。虚函数是C++中用于实现多态的机制。核心理念就是通过基类访问派生类定义的接口。包含纯虚函数的类叫做抽象类（也称为接口类），抽象类不能实例化处对象。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:6","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"重载、重写、同名隐匿的区别？ 重载：两个或多个函数在同一作用域函数名相同、参数不同，重载不关心函数的返回类型； 重写：磊哥函数分别在基类和派生类中，函数名、参数、返回值类型都相同，基类中函数必须为虚函数； 同名隐匿：两个函数分别在基类和派生类的作用域中函数名相同，派生类的函数屏蔽了与其同名的基类函数，只要是同名函数，不管参数列表是否相同，基类函数都会被隐藏； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:7","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"继承和多态的区别与联系？ 区别：继承是子类使用父类的方法，多态是父类使用子类的方法； 继承就是子类继承父类的特征和行为，使得子类具有父类的各种属性和方法，继承是为了重用代码，有效实现代码重用，减少重复代码的出现； 多态就是相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同，多态是为了接口重用，增强接口的扩展性； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:8","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"struct 和 class 的区别？ struct 的成员默认是公有的，而类的成员默认是私有的； C 中的 struct 不能不含成员函数，而C++中的 struct 可以； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:9","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"extern 和 static 的区别？ extern(外部变量)：属于变量声明，extern int num 就是告编译器，有一个 int 型的变量 num 定义在其他地方，如果有调用请去其他文件中查找定义； static(静态变量)：只会在第一次访问时初始化一次，在函数调用结束后，该变量也不会被释放，保留保存的值，直到程序运行结束时系统自动释放； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:10","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"声明和定义的区别？ 声明指的是在程序中声明一个变量、函数或类，以便在程序中使用它。声明只是告诉编译器，这个名字存在，但并没有分配内存或定义实现。在C和C++中，可以使用关键字 extern 来显式声明变量或函数； 定义指的是实际分配内存并实现变量、函数或类。定义包含了声明，但声明并不包含定义。在定义一个变量或函数时，必须给出其类型、名称和初始值（对于变量）。对于类，定义包括成员变量和成员函数的实现； 声明是告诉编译器名字的存在，而定义是为名字分配内存并实现其功能； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:11","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"strcpy 和 memcpy 的区别？ strcpy 和 memcpy 都是在C语言和C++语言中用于复制内存块的函数，但它们在使用和效率上有所不同； strcpy 用于将一个以null结尾的字符串从源地址复制到目标地址。它会复制整个字符串，包括 null 终止符，直到遇到null为止。如果源字符串长度超过目标地址所分配的内存空间，则会导致内存越界和缓冲区溢出问题； memcpy 用于将一段内存块从源地址复制到目标地址，可以复制任意长度的内存块，而不仅限于字符串。memcpy 不会关心内存块中是否有 null 终止符，而只是按照给定的长度复制内存块。因此，使用 memcpy 时需要确保目标地址有足够的内存空间，否则也会导致缓冲区溢出问题； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:12","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"const 和 define 的区别？ const 生效于编译的阶段；define 生效于预处理阶段； const 定义的常量，在C语言中是存储在内存中、需要额外的内存空间的；define 定义的常量，运行时是直接的操作数，并不会存放在内存中； const 定义的常量是带类型的；define 定义的常量不带类型。define 定义的常量不利于类型检查； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:13","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"内联函数和宏函数的区别？ 宏定义不是函数，但是使用起来像函数。预处理器用复制宏代码的方式代替函数的调用，省去了函数压栈退栈过程，提高了效率；而内联函数本质上是一个函数，内联函数一般用于函数体的代码比较简单的函数，不能包含复杂的控制语句，while、switch，并且内联函数本身不能直接调用自身； 宏函数是在预编译的时候把所有的宏名用宏体来替换，简单的说就是字符串替换 ；而内联函数则是在编译的时候进行代码插入，编译器会在每处调用内联函数的地方直接把内联函数的内容展开，这样可以省去函数的调用的开销，提高效率； 宏定义是没有类型检查的，无论对还是错都是直接替换；而内联函数在编译的时候会进行类型的检查，内联函数满足函数的性质，比如有返回值、参数列表等； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:14","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"野指针和悬空指针的区别？ 野指针：访问一个已删除或访问受限的内存区域的指针，野指针不能判断是否为NULL来避免。指针没有初始化，释放后没有置空，越界； 悬空指针：一个指针的指向对象已被删除； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:15","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"值传递、指针传递、引用传递的区别？ 值传递：形参是实参的拷贝，改变形参的值并不会影响外部实参的值。从被调用函数的角度来说，值传递是单向的（实参-\u003e形参），参数的值只能传入，不能传出。当函数内部需要修改参数，并且不希望这个改变影响调用者时，采用值传递； 指针传递：形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作； 引用传递：形参相当于是实参的“别名”，对形参的操作其实就是对实参的操作，在引用传递过程中，被调函数的形式参数虽然也作为局部变量在栈中开辟了内存空间，但是这时存放的是由主调函数放进来的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中的实参变量。正因为如此，被调函数对形参做的任何操作都影响了主调函数中的实参变量。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:16","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"++i与i++的区别？ 复制顺序不同。++i和i++都是分两步完成的。++i 是先加后赋值；i++ 是先赋值后加。既： // i++ i = i; i += 1; // ++i i += 1; i = i; 效率不同：比如i=2，b=i++就是说b=2,完成之后让i变成3，b=++i就是先让i++变成3，然后b=3，其中++i比i++效率要高些。一般来说在循环域里面，这两者并没有什么很大的区别，但是要注意其生存周期，以及i值在程序流中的变化； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:17","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"struct 和 union 的区别？ union 是联合体，struct 是结构体： 联合体和结构体都是由若干个数据类型不同的数据成员组成。使用时，联合体只有一个有效的成员；而结构体所有的成员都有效； 对联合体的不同成员赋值，将会对覆盖其他成员的值，而对于结构体的对不同成员赋值时，相互不影响； 联合体的大小为其内部所有变量的最大值，按照最大类型的倍数进行分配大小；结构体分配内存的大小遵循内存对齐原则； 内存对齐 内存对齐是指将数据结构中的每个成员按照一定的规则进行排列，使得每个成员的起始地址相对于该结构的起始地址偏移量为该成员大小的整数倍。这样做的目的是为了让处理器在读取数据时更加高效，因为处理器可以一次性读取多个连续地址上的数据，如果数据不对齐，处理器就需要多次读取，降低了读取速度 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:2:18","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"基础知识 =\u003e 定义/概念 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"类有哪几种构造方式？ 默认构造函数(没有参数)，有参构造函数(有参数)，拷贝构造函数(形参是本类对象的引用)，转换构造函数(形参是其他类型的变量，且只有一个形参) ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"说一下你对虚函数、纯虚函数、抽象类的理解？ 虚函数：被 virtual 关键字修饰的成员函数； 纯虚函数：纯虚函数在类中声明时，加上 = 0； 包含纯虚函数的类叫做 抽象类（也称为接口类），抽象类不能实例化出对象。 抽象类中只有接口，没有具体的实现方法。 派生类继承抽象类之后只有重写全部纯虚函数，派生类才能实例化为对象。纯虚函数规范了派生类必须重写，接口继承。抽象类对象不能作为函数的参数，不能创建对象，不能作为函数返回类型。可以声明抽象类指针，可以声明抽象类的引用。 虚函数的实现机制 虚函数通过虚函数表来实现。虚函数的地址保存在虚函数表中，在类的对象所在的内存空间中，保存了指向虚函数表的指针（称为“虚表指针”），通过虚表指针可以找到类对应的虚函数表。虚函数表解决了基类和派生类的继承问题和类中成员函数的覆盖问题，当用基类的指针来操作一个派生类的时候，这张虚函数表就指明了实际应该调用的函数； 虚函数表存放的内容：类的虚函数的地址； 虚函数表建立的时间：编译阶段，即程序的编译过程中会将虚函数的地址放在虚函数表中； 虚表指针保存的位置：虚表指针存放在对象的内存空间中最前面的位置，这是为了保证正确取到虚函数的偏移量 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"你对空类了解多少？ 空类声明时编译器不会生成任何成员函数，只会生成1个字节的占位符； 空类定义时编译器会生成 6 个成员函数：缺省的构造函数、拷贝构造函数、析构函数、赋值运算符、两个取址运算符(其中一个是 const 版)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:3","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"引用会占用内存空间吗？ 在大多数编程语言中，引用不会占用内存空间，因为引用只是指向现有的内存空间的别名。在C++中，引用是指向变量的别名，与指针不同的是，引用不能为null或指向其他变量。当程序使用引用时，它们只是将变量名与内存地址关联起来，因此不会产生额外的内存分配。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:4","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"C++的内存分配？ 在C++中，内存分为5个区，分别是： 堆区：一般由程序员自动分配，如果程序员没有释放，程序结束时由OS回收； 栈区：由编译器自动分配和释放，存放为运行函数分配的局部变量，函数参数，返回数据，返回地址等； 全局区(静态 static .bss段 .data段)：存放全局变量、静态变量、常量。结束后由系统释放； 常量区(文字常量区 .data段)：存放常量字符串，程序结束后由系统释放； 代码区(.text段)：存放函数体(类成员函数和全局区)的二进制代码，不允许修改，但可以执行； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:5","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"C++ 编译过程？ 编译过程分为四个过程：编译（编译预处理、编译、优化），汇编，链接： 编译预处理：处理以 # 开头的指令； 编译、优化：将源码 .cpp 文件翻译成 .s 汇编代码； 汇编：将汇编代码 .s 翻译成机器指令 .o 文件； 链接：汇编程序生成的目标文件，即 .o 文件，并不会立即执行，因为可能会出现：.cpp 文件中的函数引用了另一个 .cpp 文件中定义的符号或者调用了某个库文件中的函数。那链接的目的就是将这些文件对应的目标文件连接成一个整体，从而生成可执行的程序 .exe 文件； 链接又有两种，分别是静态链接和动态链接： 静态链接 代码从其所在的静态链接库中拷贝到最终的可执行程序中，在该程序被执行时，这些代码会被装入到该进程的虚拟地址空间中； 静态链接是指将程序中所有需要的代码和库函数都打包成一个完整的可执行文件，这个可执行文件独立运行，不需要依赖其他的库文件。当程序执行时，操作系统会将整个可执行文件加载到内存中并执行，因此静态链接的程序在执行时比较快，但可执行文件会比较大； 动态链接 码被放到动态链接库或共享对象的某个目标文件中，链接程序只是在最终的可执行程序中记录了共享对象的名字等一些信息。在程序执行时，动态链接库的全部内容会被映射到运行时相应进行的虚拟地址的空间； 动态链接是指将程序中需要的库函数等文件打包成一个动态链接库文件（DLL、so等），程序在运行时通过动态链接库中的函数进行调用。因为多个程序可以共享同一个动态链接库，因此可以节省内存和磁盘空间。但由于需要在程序运行时进行动态链接，因此相比于静态链接，动态链接的程序在启动时会稍微慢一些； 动态链接还可以实现库文件的动态更新和升级，因为不需要重新编译整个程序，只需要替换动态链接库即可； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:6","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"explicit 的作用？ 用来声明类构造函数是显示调用的，而非隐式调用，可以阻止调用构造函数时进行隐式转换。只可用于修饰单参构造函数，因为无参构造函数和多参构造函数本身就是显示调用的，再加上 explicit 关键字也没有什么意义； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:3:7","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"智能指针 C++里面的四个智能指针: auto_ptr, unique_ptr,shared_ptr, weak_ptr 其中后三个是C++11支持，并且第一个已经被C++11弃用。使用时需要引入头文件 “”。 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"智能指针介绍 智能指针主要用于管理在堆上分配的内存，它将普通的指针封装为一个栈对象。当栈对象的生存周期结束后，会在析构函数中释放掉申请的内存，从而防止内存泄漏。智能指针实质是一个对象，行为表现的却像一个指针。 什么是内存泄漏？ 由于疏忽或错误导致的程序未能释放已经不再使用的内存。内存泄漏是指程序在运行过程中，由于疏忽或错误而失去了对该内存的控制，从而造成了内存的浪费。 内存泄漏产生的原因？ 堆内存泄漏，new 跟 delete 、malloc 和 free 未成对使用； 系统资源泄漏， Bitmap, handle,socket 等资源未释放； 没有将基类析构函数定义称为虚函数，（使用基类指针或者引用指向派生类对象时）派生类对象释放时将不能正确释放派生对象部分； 指针重新赋值，指针重新赋值后原来指向的内存空间丢失，发生了内存泄漏； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"auto_ptr （C++98的方案，C++11已经抛弃）采用所有权模式。 auto_ptr\u003cstring\u003e p (new string (\"I reigned lonely as a cloud.\")); auto_ptr\u003cstring\u003e q; q = p; //auto_ptr不会报错. 此时不会报错，q剥夺了p的所有权，但是当程序运行时访问p将会报错。所以auto_ptr的缺点是：存在潜在的内存崩溃问题！ ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"unique_ptr unique_ptr实现独占式拥有或严格拥有概念，保证同一时间内只有一个智能指针可以指向该对象。它对于避免资源泄露(例如“以new创建对象后因为发生异常而忘记调用delete”)特别有用。 unique_ptr\u003cstring\u003e p (new string (\"auto\")); unique_ptr\u003cstring\u003e q； q = p;//此时会报错！！ 编译器认为 q = p 非法，避免了 p 不再指向有效数据的问题。尝试复制 p 时会编译期出错，而auto_ptr能通过编译期从而在运行期埋下出错的隐患。因此，unique_ptr比auto_ptr更安全。 unique_ptr常用操作 unique_ptr\u003cT\u003e u1 // 空unique_ptr，可以指向类型为T的对象。u1会使用delete来释放它的指针 unique_ptr\u003cT, D\u003e u2 // u2会使用一个类型为D的可调用对象来释放它的指针 unique_ptr\u003cT, D\u003e u(d) // 空unique_ptr，指向类型为T的对象，用类型为D的对象d替代delete u = nullptr // 释放u指向的对象，将u置为空 u.release() // u放弃对指针的控制权，返回指针，并将u置为空 u.reset() // 释放u指向的对象 u.reset(q) // 如果提供了内置指针q，另u指向这个对象；否则将u置为空 u.reset(nullptr) 虽然我们不能拷贝或赋值unique_ptr，但可以通过调用 release 或 reset 将指针的所有权从一个（非const）unique_ptr转移给另一个unique_ptr； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:3","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"shared_ptr shared_ptr 实现共享式拥有概念。多个智能指针可以指向相同对象，该对象和其相关资源会在“最后一个引用被销毁”时候释放。从名字 share 就可以看出了资源可以被多个指针共享，它使用计数机制来表明资源被几个指针共享。可以通过成员函数 use_count() 来查看资源的所有者个数。除了可以通过new来构造，还可以通过传入 unique_ptr,weak_ptr 来构造。当我们调用 release() 时，当前指针会释放资源所有权，计数减一。当计数等于0时，资源会被释放。 shared_ptr 是为了解决 auto_ptr 在对象所有权上的局限性(auto_ptr 是独占的), 在使用引用计数的机制上提供了可以共享所有权的智能指针。 shared_ptr 的成员函数： shared_ptr\u003cT\u003e：类模板，用于定义一个shared_ptr对象，其中T表示所指向对象的类型。 shared_ptr\u003cT\u003e::shared_ptr()：默认构造函数，创建一个空的shared_ptr对象。 shared_ptr\u003cT\u003e::shared_ptr(T* ptr)：构造函数，创建一个shared_ptr对象并初始化为指向ptr所指向的对象。 shared_ptr\u003cT\u003e::shared_ptr(const shared_ptr\u003cT\u003e\u0026 other)：拷贝构造函数，创建一个新的shared_ptr对象，并与other共享同一对象。 shared_ptr\u003cT\u003e::operator= (const shared_ptr\u003cT\u003e\u0026 other)：赋值运算符重载，将当前的shared_ptr对象与other共享同一对象。 shared_ptr\u003cT\u003e::reset()：重置shared_ptr对象，将其置为空指针。 shared_ptr\u003cT\u003e::get()：获取shared_ptr所指向的原始指针。 shared_ptr\u003cT\u003e::use_count()：获取当前shared_ptr对象的引用计数，即共享该对象的shared_ptr对象的数量。 shared_ptr\u003cT\u003e::unique()：判断当前shared_ptr对象是否是唯一拥有所指对象的智能指针。 shared_ptr\u003cT\u003e::operator bool() const：将shared_ptr对象转换为布尔值，判断其是否为空指针。 shared_ptr\u003cT\u003e::operator* ()：重载解引用操作符，返回所指对象的引用。 shared_ptr\u003cT\u003e::operator-\u003e ()：重载箭头操作符，返回所指对象的指针。 shared_ptr\u003cT\u003e::swap(shared_ptr\u003cT\u003e\u0026 other)：交换两个shared_ptr对象的内容。 shared_ptr 的初始化 最安全的分配和使用动态内存的方法是调用一个名为 make_shared 的标准库函数。此函数在动态内存中分配一个对象并初始化它，返回指向此对象的 shared_ptr。与智能指针一样，make_shared 也定义在头文件 memory 中。 // p 指向一个值为42的 int 的 shared_ptr shared_ptr\u003cint\u003e p = make_shared\u003cint\u003e(42); // q 指向一个值为\"9999999999\"的 string shared_ptr\u003cstring\u003e q = make_shared\u003cstring\u003e(10,'9'); // p5指向一个只初始化的int shared_ptr\u003cint\u003e p5 = make_shared\u003cint\u003e(); 我们还可以用 new 返回的指针来初始化智能指针，不过接受指针参数的智能指针构造函数是 explicit 的。因此，我们不能将一个内置指针隐式转换为一个智能指针，必须使用直接初始化形式来初始化一个智能指针； shared_ptr\u003cint\u003e pi = new int (1024); // 错误：必须使用直接初始化形式 shared_ptr\u003cint\u003e p2(new int(1024)); // 正确：使用了直接初始化形式 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:4","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"weak_ptr share_ptr虽然已经很好用了，但是有一点share_ptr智能指针还是有内存泄露的情况，当两个对象相互使用一个shared_ptr成员变量指向对方，会造成循环引用，使引用计数失效，从而导致内存泄漏。 weak_ptr 是一种不控制对象生命周期的智能指针, 它指向一个 shared_ptr 管理的对象. 进行该对象的内存管理的是那个强引用的shared_ptr， weak_ptr只是提供了对管理对象的一个访问手段。weak_ptr 设计的目的是为配合 shared_ptr 而引入的一种智能指针来协助 shared_ptr 工作, 它只可以从一个 shared_ptr 或另一个 weak_ptr 对象构造, 它的构造和析构不会引起引用记数的增加或减少。weak_ptr是用来解决shared_ptr相互引用时的死锁问题,如果说两个shared_ptr相互引用,那么这两个指针的引用计数永远不可能下降为0,资源永远不会释放。它是对对象的一种弱引用，不会增加对象的引用计数，和shared_ptr之间可以相互转化，shared_ptr可以直接赋值给它，它可以通过调用lock函数来获得shared_ptr； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:4:5","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"STL库 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:5:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"各个常见容器 vector-向量容器 内部数据结构：一端开口的连续存储的数组形式 特点：增加或获取元素效率很高，插入和删除的效率很低 操作元素的方式：下标操作符[] 迭代器失效：插入和删除元素都会是迭代器失效 vector 底层原理？ 数据安排及操作方式与数组非常相似。两者的唯一差别在于空间运用的灵活性； 静态空间，一旦配置好了就不能改变了，如果程序需要一个更大的array，只能自己再申请一个更大的array，然后将以前的array中的内容全部拷贝到新的array中； 动态开辟的空间，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。vector的关键技术在于对大小的控制以及重新分配时的数据移动效率； 采用的数据结构是线性的连续空间（泛型的动态类型顺序表），他以两个迭代器start和finish分别指向配置得来的连续空间中目前已将被使用的空间。迭代器end_of_storage指向整个连续的尾部； 在增加元素时，如果超过自身最大的容量，vector则将自身的容量扩充为原来的两倍。扩充空间需要经过的步骤：重新配置空间，元素移动，释放旧的内存空间。一旦vector空间重新配置，则指向原来vector的所有迭代器都失效了，因为vector的地址改变了； vector 的扩容过程？ 完全弃用现有的内存空间中，重新申请更大的内存空间； 将旧的内存空间中的数据按原有顺序移动到新的内存空间中； 最后将旧的内存空间释放； vector 的扩容方式为什么是1.5倍或2倍？ 假如说我们是以 2 倍方式扩容（1，2，4，8，16），则第 i 次扩容期间所需要的空间总量就是 2i次方，如果第 4 次扩容时总共需要8个元素大小的空间，但是前3次已经释放的空间加起来的总量，刚好是7，而7小于8，不足以我们第4次扩容时所需要的空间，也就是说，如果恰巧以2倍方式扩容，那么每次扩容时前面释放的空间它都不足以支持本次的扩容！！！那么如果是以更高倍数的方式进行扩容，则这个空间它的浪费情况就会更高！！！因此会有以下两个问题： 空间浪费的可能比较大； 无法使用前面释放的内存空间； 一般情况下，在Windows的VS系列编译器下，是按照1.5倍的方式进行扩容，在Linux的g++中，是按照2倍的方式进行扩容的； size、resize、reserve、capacity 的区别？ size表示当前vector中有多少个元素（即finish – start）； resize可以改变有效空间的大小，也有改变默认值的功能。capacity的大小也会随着改变。可以有多个参数。创建指定数量的元素并指定vector的存储空间。既分配空间又创建对象； reserve是直接扩充到已经确定的大小，可以减少多次开辟、释放空间的问题（优化push_back），从而达到提高效率的目的，其次还可以减少多次要拷贝数据的问题。reserve它只是保证vector中的空间大小（capacity）最少达到参数所指定的大小n。并且它只有一个参数。指定vector的元素总数，不创建对象； capacity函数表示它已经分配的内存中可以容纳多少元素（即end_of_storage – start）。即容器在分配新的存储空间能存储的元素总数。返回vector中能存储元素的最大数； push_back 和 emplace_back 的区别？ emplace_back() 和 push_back() 的主要区别，就在于底层实现的机制不同。push_back() 向容器尾部添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，事后会自行销毁先前创建的这个元素）；而 emplace_back() 在实现时，则是直接在容器尾部创建这个元素，省去了拷贝或移动元素的过程； list-列表容器 内部数据结构：双向循环链表 特点：增加或获取元素效率很低，插入和删除效率很高 操作元素的方式：只能用迭代器 迭代器失效：插入，迭代器不会失效。删除，指向被删除节点的迭代器失效 常用函数 list.push_back(elem) 在尾部加入一个数据 list.pop_back() 删除尾部数据 list.push_front(elem) 在头部插入一个数据 list.pop_front() 删除头部数据 list.size() 返回容器中实际数据的个数 list.sort() 排序，默认由小到大 list.unique() 移除数值相同的连续元素 list.back() 取尾部迭代器 list.erase(iterator) 删除一个元素，参数是迭代器，返回的是删除迭代器的下一个位置 deque-双向队列容器 内部数据结构：两端开口的连续或分段存储的数组 特点：增加或获取元素效率较高，插入和删除效率较高 操作元素的方式：下标操作符或迭代器 迭代器失效：插入任何元素都会使迭代器失效。删除头和尾元素，指向被删除节点迭代器失效，而删除中间元素会使所有迭代器失效 deque内部实现的是一个双向队列。元素在内存连续存放。随机存取任何元素都在常数时间完成（仅次于vector）。所有适用于vector的操作都适用于deque。在两端增删元素具有较佳的性能（大部分情况下是常数时间）。 你了解 deque 的中控器吗？ deque为了维持整体连续的假象，设计一个中控器，其用来记录deque内部每一段连续空间的地址。大体上可以理解为deque中的每一段连续空间分布在内存的不连续空间上，然后用一个所谓的map作为主控，记录每一段内存空间的入口，从而做到整体连续的假象； deque 的迭代器是怎么回事？ deque提供的是一个随机访问迭代器，由于是分段连续空间，其必须记录当前元素所在段的信息，从而在该段连续空间的边缘进行前进或者后退的时候能知道跳跃到的上一个或下一个缓冲区。deque必须完完整整的掌握和控制这些信息，以达到正确的跳跃； static size_t buffer_size(){ return __deque_buf_size(BufSiz, sizeof(T)); } //如果n不为0,传回n,表示buffer size 由自己定义 如果n为0,表示buffer_size 采用默认值 如果sz(元素大小) \u003c 512，传回512/sz,如果不小于512 ，传回1 inline size_t __deque_buf_size(size_t n, size_t sz) { return n != 0 ? n : (sz \u003c 512 ? size_t(512 / sz) : size_t(1)); } 当迭代器处在当前缓冲区的边缘时，一旦前进或者后退，就要考虑超过当前缓冲区的情况，此时需要跳转到下一个缓冲区，这时候需要用到set_node函数： void set_node(map_pointer new_node) { node = new_node; // 跳转到相应缓冲区 first = *new_node; // 更新跳转后缓冲区first信息 last = first + difference_type(buffer_size()); // 更新跳转后缓冲区last的信息 } 说一说 deque 的数据结构? deque维护着一个map，用来记录每个缓冲区的位置。除了map外，deque的数据结构还维护着start和finish两个迭代器，分别指向deque的首尾。此外，他还必须知道map的大小，一旦map提供的节点不足，就需要配置一块更大的map; 常用函数 deque.push_back(elem)在尾部加入一个数据。 deque.pop_back()删除尾部数据。 deque.push_front(elem)在头部插入一个数据。 deque.pop_front()删除头部数据。 deque.size() 返回容器中实际数据的个数。 deque.at(idx)传回索引idx所指的数据，如果idx越界，抛出out_of_range。 map-映射 内部数据结构：红黑树 特点：键和值分开，前面是键后面是值,键唯一，元素默认按键的升序排列 操作元素的方式：迭代器 迭代器失效：插入，迭代器不会失效。删除，指向被删除节点的迭代器失效 map 和 unordered_map 的底层实现？ map map内部实现了一个红黑树（红黑树是非严格平衡的二叉搜索树，而AVL是严格平衡二叉搜索树），红黑树有自动排序的功能，因此map内部所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找、删除、添加等一系列的操作都相当于是对红黑树进行的操作。map中的元素是按照二叉树（又名二叉查找树、二叉排序树）存储的，特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值。使用中序遍历可将键值按照从小到大遍历出来； unordered_map unordered_map内部实现了一个哈希表（也叫散列表），通过把关键码值映射到Hash表中一个位置来访问记录，查找时间复杂度可达O（1），其中在海量数据处理中有着广泛应用。因此，元素的排列顺序是无序的； set-集合 内部数据结构：红黑树 特点：键和值相等，键唯一，元素默认按升序排列 操作元素的方式：迭代器 迭代器失效：插入，迭代器不会失效。删除，指向被删除节点的迭代器失效 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:5:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"常见面试问题 讲讲STL的六大组件？ 容器（Containers）：各种数据结构，如 Vector,List,Deque,Set,Map,用来存放数据，STL容器是一种 Class Template ； 算法（Algorithms）：各种常用算法如Sort,Search,Copy,Erase,从实现的角度来看，STL算法是一种Function Templates ； 迭代器（Iterators）：扮演容器与算法之间的胶合剂，是所谓的“泛型指针”，共有五种类型，以及其它衍生变化，从实现的角度来看，迭代器是一种将：Operators*,Operator-\u003e,Operator++,Operator–等相关操作予以重载的 Class Template。所有STL容器都附带有自己专属的迭代器； 仿函数（Functors）：行为类似函数，可作为算法的某种策略（Policy）,从实现的角度来看，仿函数是一种重载了Operator()的Class 或 Class Template ； 适配器（配接器）（Adapters）：一种用来修饰容器（Containers）或仿函数（Functors）或迭代器（Iterators）接口的东西，例如：STL提供的 Queue 和 Stack ，虽然看似容器，其实只能算是一种容器配接器，因为 它们的底部完全借助 Deque，所有操作有底层的 Deque 供应。改变 Functor 接口者，称为 Function Adapter ;改变 Container 接口者，称为 Container Adapter;改变 Iterator 接口者，称为Iterator Adapter； 配器（Allocators）：负责空间配置与管理，从实现的角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的Class Template ； 说说优先级队列？ 优先队列底层数据结构一般以 vector 为底层容器，heap 为处理规则来管理底层容器实现。优先队列（priority_queue）容器与队列一样，只能从队尾插入元素，从队首删除元素。 但是它有一个特性，队列中最大的元素总是位于队首。 出队时，并非按照先进先出的原则进行，而是将当前队列中最大的元素出队。这点类似于给队列里的元素进行了由大到小的顺序排序。元素的比较规则默认按元素值由大到小排序，可以重载“\u003c”操作符来重新定义比较规则。在优先队列中，队首元素一定是当前队列中优先级最高的那一个； map和unordered_map的优缺点？ map优点：有序、基于红黑树实现，查找的时间复杂度为O(nlogn)； map缺点：空间占用率比较高，虽然底层是红黑树实现的，提高了运行效率，但是每个节点都要保存父节点和孩子节点和红黑树的性质，使得每一个节点都占用胆量的空间； 适用场景：对于有序的结构，小规模的数据量； nordered_map优点：底层是用哈希表实现的，查找效率非常高，时间复杂度为O(1)； unordered_map的缺点：哈希表的建立比较费时； 适用场景：对于查找问题，使用unordered_map更好，大规模的数据量； 为什么map和set和插入删除效率比其他序列容器高，而且每次insert之后，以前保存的iterator不会失效？ 因为存储的是节点，不需要内存拷贝和内存移动。插入操作只是节点指针换来换去，节点内存没有改变，而iterator就像指向节点的指针，内存没变，指向内存de指针也不会变。 为什么 map 和 set 不能像 vector 一样有个 reserve 函数来预分配数据？ 因为在map和set内部存储的已经不是元素本身了，而是包含元素的节点。 map 中[ ]与 find 的区别？ map的下标运算符[ ]的作用是：将关键码作为下标去执行查找，并返回对应的值；如果不存在这个关键码，就将一个具有该关键码和值类型的默认值的项插入这个map； map的find函数：用关键码执行查找，找到了返回该位置的迭代器；如果不存在这个关键码，就返回尾迭代器 end ； hash_map与map的区别？什么时候用hash_map，什么时候用map？ 构造函数：hash_map需要hash function和等于函数，而map需要比较函数（大于或小于）； 存储结构：hash_map以hashtable为底层，而map以RB-TREE为底层； 总的说来，hash_map 查找速度比 map 快，而且查找速度基本和数据量大小无关，属于常数级别。而 map 的查找速度是 logn 级别。但不一定常数就比 logn 小，而且hash_map 还有 hash function 耗时。如果考虑效率，特别当元素达到一定数量级时，用 hash_map ；考虑内存，或者元素数量较少时，用 map 。 讲一讲set的用法和它的特点？ 用法：count()-返回某个值元素的个数（set中最多为1）、find()-返回一个指向被查找到元素的迭代器、equal_range()-返回集合中与给定值相等的上下限的两个迭代器； 特点：元素不允许有重复，在默认情况下会对元素进行自动排序，数据被组织成一棵红黑树，查找的速度非常快（二分），时间复杂度是O(logn)，set中的元素不能被修改，只能删除后再添加； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:5:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"十大排序算法 ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:0","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"冒泡排序 从前往后（或从后往前）两两比较相邻元素的值，若为逆序（即A[I-1]\u003eA[I]）,则交换它们，直到序列比较完。我们称它为第一趟冒泡，结果是将最小的元素交换到待排序列的第一个位置（或将最大的元素交换到待排序列的最后一个位置），关键字最小的元素如气泡一样逐渐向上“漂浮”。最终一个一个排好了位置； void bubbleSort(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); for (int i = 0; i \u003c n - 1; i++) { for (int j = 0; j \u003c n - i - 1; j++) { if (nums[j] \u003e nums[j+1]) { swap(nums[j], nums[j+1]); } } } } 时间复杂度：O(N2)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:1","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"快速排序 通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。每一趟中，都至少可以确定一个元素的最终位置。 // 快速排序 注：开始时right = 数组的最大有效下标 void QuickSort(int *arr, int left, int right){ if(left \u003e= right) return; int key = arr[left]; int low = left; int high = right; while(low \u003c high){ while(low \u003c high \u0026\u0026 arr[high] \u003e= key) high--; arr[low] = arr[high]; while(low \u003c high \u0026\u0026 arr[low] \u003c= key) low++; arr[high] = arr[low]; } arr[low] = key; QuickSort(arr, left, low - 1); QuickSort(arr, low + 1, right); } 快速排序的优化 随机选择基准元素 快速排序最坏情况下的时间复杂度为 O(N2)，这种情况通常发生在每次选择的基准元素都是当前子数组的最大或最小值时。为了避免这种情况，我们可以随机选择一个元素作为基准元素，这样每个元素都有相同的概率成为基准元素，从而避免了最坏情况的发生； 三数取中法选择基准元素 在确定基准元素时，我们可以选择当前子数组的第一个元素、最后一个元素、中间元素中的中位数作为基准元素。这种方式称为三数取中法，可以使得基准元素更加均衡，从而提高排序效率； 双轴快排 双轴快排是一种基于快速排序的改进算法，它使用两个基准元素而不是一个基准元素进行分区。具体来说，我们先选择两个基准元素p和q，其中p \u003c q，然后将数组分成三部分：小于p的部分、大于q的部分和介于p和q之间的部分。接下来，我们对小于p和大于q的两部分递归进行双轴快排，对介于p和 q之间的部分进行普通的快速排序。双轴快排相比于普通的快速排序，在某些情况下可以提高排序效率； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:2","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"选择排序 每次从待排序序列中选择最小的元素，与序列的第一个元素交换位置。这样，序列的第一个位置就是最小的元素。然后在剩下的元素中继续执行上述操作，直到整个序列排序完成。 void selectionSort(int arr[], int n) { for (int i = 0; i \u003c n - 1; i++) { int minIndex = i; for (int j = i + 1; j \u003c n; j++) { if (arr[j] \u003c arr[minIndex]) { minIndex = j; } } int temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; } } 时间复杂度：O(N2)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:3","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"插入排序 它的基本思想是将一个记录插入到已经排好序的有序表中，从而一个新的、记录数增1的有序表。在其实现过程使用双层循环，外层循环对除了第一个元素之外的所有元素，内层循环对当前元素前面有序表进行待插入位置查找，并进行移动; 插入排序的工作方式像许多人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较。拿在左手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌; void insertionSort(int arr[], int n) { for (int i = 1; i \u003c n; i++) { int key = arr[i]; int j = i - 1; while (j \u003e= 0 \u0026\u0026 arr[j] \u003e key) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = key; } } 时间复杂度：O(N2)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:4","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"希尔排序 希尔排序的基本思想是将待排序的元素分成若干个小组，对每个小组进行插入排序，随着排序过程的进行，每个小组的元素个数逐渐增多，但仍然保持有序。最后将所有元素分成一个组，进行插入排序。希尔排序的具体步骤如下： 选择一个增量序列d1，d2，…，dk，其中di \u003e dj，dk = 1； 对于每个增量di，将序列分成di个子序列，分别对每个子序列进行插入排序；增量逐渐缩小，重复步骤2，直到增量为1。 在实际应用中，希尔排序常常使用一些常见的增量序列，如希尔增量（n/2，n/4，…，1）、Hibbard增量（1，3，7，…，2^k-1）、Sedgewick增量等，以提高排序的效率； void shellSort(int arr[], int n) { for (int gap = n / 2; gap \u003e 0; gap /= 2) { for (int i = gap; i \u003c n; i++) { int temp = arr[i]; int j; for (j = i; j \u003e= gap \u0026\u0026 arr[j - gap] \u003e temp; j -= gap) { arr[j] = arr[j - gap]; } arr[j] = temp; } } } 时间复杂度：O(N2)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:5","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"归并排序 归并排序是一种基于分治思想的排序算法，它的基本思想是将待排序的序列不断地二分为两个子序列，直到每个子序列只剩下一个元素。然后，将两个子序列归并成一个有序序列，不断地归并，直到最终得到一个有序序列； void merge(int arr[], int left, int mid, int right) { int n1 = mid - left + 1; int n2 = right - mid; int leftArr[n1], rightArr[n2]; for (int i = 0; i \u003c n1; i++) { leftArr[i] = arr[left + i]; } for (int j = 0; j \u003c n2; j++) { rightArr[j] = arr[mid + 1 + j]; } int i = 0, j = 0, k = left; while (i \u003c n1 \u0026\u0026 j \u003c n2) { if (leftArr[i] \u003c= rightArr[j]) { arr[k] = leftArr[i]; i++; } else { arr[k] = rightArr[j]; j++; } k++; } while (i \u003c n1) { arr[k] = leftArr[i]; i++; k++; } while (j \u003c n2) { arr[k] = rightArr[j]; j++; k++; } } void mergeSort(int arr[], int left, int right) { if (left \u003c right) { int mid = (left + right) / 2; mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); merge(arr, left, mid, right); } } 时间复杂度：O(NlogN)； ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:6","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"堆排序 堆排序是一种基于堆数据结构的排序算法，其基本思想是将待排序的元素构造成一个堆，然后依次将堆顶元素与堆底元素交换，再对堆顶元素进行下沉操作，使得交换后的堆仍然保持最大堆或最小堆的性质，重复上述过程直到排序完成。 在堆排序中，首先要构建一个堆，可以使用从下往上的建堆方法，或者使用堆插入的方法。建堆完成后，将堆顶元素与堆底元素交换，然后对堆顶元素进行下沉操作，使得堆顶元素重新满足最大堆或最小堆的性质。交换后的堆除堆顶元素外，仍然满足最大堆或最小堆的性质，继续进行相同的操作，直到排序完成。 堆排序的时间复杂度为O(NlogN)，空间复杂度为O(1)。堆排序是一种不稳定的排序算法，因为交换操作会改变相同元素之间的相对位置； // 堆排序(大根堆) 注：length = 数组的最大有效下标 void HeapAdjust(int *arr, int length, int aj_idx){ arr[0] = arr[aj_idx]; int i = 0; for(i = aj_idx * 2;i \u003c= length; i *= 2){ if(i \u003c length \u0026\u0026 arr[i] \u003c arr[i + 1]) i++; if(arr[0] \u003c arr[i]){ arr[aj_idx] = arr[i]; aj_idx = i; } else break; } arr[aj_idx] = arr[0]; } void BigHeapBuild(int *arr, int length){ for(int i = (length / 2) + 1; i \u003e 0; i--) HeapAdjust(arr, length, i); } void BigHeapSort(int *arr, int length){ // 调整成大根堆 BigHeapBuild(arr, length); // 堆排序 for(int i = length; i \u003e 1; i--){ arr[0] = arr[i]; arr[i] = arr[1]; arr[1] = arr[0]; HeapAdjust(arr, i - 1, 1); } } ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:7","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"计数排序 计数排序的基本思想是对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数（此处并非比较各元素的大小，而是通过对元素值的计数和计数值的累加来确定）。一旦有了这个信息，就可以将x直接存放到最终的输出序列的正确位置上。例如，如果输入序列中只有17个元素的值小于x的值，则x可以直接存放在输出序列的第18个位置上; void countingSort(int arr[], int n, int k) { int count[k + 1] = {0}; int output[n]; for (int i = 0; i \u003c n; i++) { count[arr[i]]++; } for (int i = 1; i \u003c= k; i++) { count[i] += count[i - 1]; } for (int i = n - 1; i \u003e= 0; i--) { output[count[arr[i]] - 1] = arr[i]; count[arr[i]]--; } for (int i = 0; i \u003c n; i++) { arr[i] = output[i]; } } 时间复杂度：O(N); 空间复杂度：O(N); ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:8","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"桶排序 桶排序（Bucket Sort）是一种线性时间复杂度的排序算法，它的基本思想是将待排序的元素分配到不同的桶中，每个桶内部进行排序，最后按照桶的顺序依次输出所有元素。桶排序的基本思想如下： 确定桶的数量：根据待排序元素的特点，确定需要的桶的数量。 将元素分配到桶中：遍历待排序的元素，根据某种映射关系将元素分配到对应的桶中。 桶内排序：对每个非空桶内的元素进行排序，可以使用其他排序算法（如插入排序、快速排序等）或递归地使用桶排序。 合并桶中元素：按照桶的顺序依次输出所有元素，即可得到有序序列。 void bucketSort(float arr[], int n) { vector\u003cfloat\u003e bucket[n]; for (int i = 0; i \u003c n; i++) { int index = n * arr[i]; bucket[index].push_back(arr[i]); } for (int i = 0; i \u003c n; i++) { sort(bucket[i].begin(), bucket[i].end()); } int index = 0; for (int i = 0; i \u003c n; i++) { for (int j = 0; j \u003c bucket[i].size(); j++) { arr[index++] = bucket[i][j]; } } } ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:9","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["CPP"],"content":"基数排序 基数排序是一种非比较排序算法，它的基本思想是将待排序的元素分别按照位数的大小进行排序。一般的实现方法是先按照个位数排序，然后按照十位数排序，接着按照百位数排序，直到最高位数排完后，排序完成。具体的实现步骤如下： 找出待排序数组中最大的数，确定最大数的位数，作为排序的轮数； 对于每一位数，用计数排序或桶排序进行排序； 将排序后的数组按照位数依次组合起来，得到最终结果。 基数排序的时间复杂度为O(NK)，其中K为最大数的位数，N为数组元素个数。当k比较小的时候，基数排序的效率较高。但是当k比较大时，需要分配较大的桶或计数器，空间复杂度会变高。 void countingSort(int arr[], int n, int exp) { int count[10] = {0}; int output[n]; for (int i = 0; i \u003c n; i++) { count[(arr[i] / exp) % 10]++; } for (int i = 1; i \u003c 10; i++) { count[i] += count[i - 1]; } for (int i = n - 1; i \u003e= 0; i--) { output[count[(arr[i] / exp) % 10] - 1] = arr[i]; count[(arr[i] / exp) % 10]--; } for (int i = 0; i \u003c n; i++) { arr[i] = output[i]; } } void radixSort(int arr[], int n) { int maxVal = arr[0]; for (int i = 1; i \u003c n; i++) { if (arr[i] \u003e maxVal) { maxVal = arr[i]; } } for (int exp = 1; maxVal / exp \u003e 0; exp *= 10) { countingSort(arr, n, exp); } } ","date":"2024-01-23","objectID":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/:6:10","tags":["八股文"],"title":"CPP 八股文","uri":"/cpp-%E5%85%AB%E8%82%A1%E6%96%87/"},{"categories":["LeetCode"],"content":"今天刷了贪心算法，小结一下这些题目的思路。 ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:0:0","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"买卖股票的最佳时机 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。 ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:1:0","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"思路 用两个变量分别记录最大利润和股票的最低价，先计算先前买的股票的最大利润，既 max_profit = max(max_profit, prices[i] - purchase) , 再判断今天是否是股票的最低价，既 purchase = min(purchase, prices[i])；注意，这两个步骤不能反，因为你不能出售未来买的股票。 代码实现 class Solution { public: int maxProfit(vector\u003cint\u003e\u0026 prices) { int length = prices.size(); if (length == 1) return 0; int max_profit = 0; int purchase = prices[0]; for (int i = 0; i \u003c length; i++) { max_profit = max(max_profit, prices[i] - purchase); purchase = min(purchase, prices[i]); } return max_profit; } }; 时间复杂度：遍历了一次 prices ，故为O(N)； 空间复杂度：使用了三个临时变量，故为O(1)； ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:1:1","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"跳跃游戏 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。 ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:2:0","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"思路 如果可以从开头跳到结尾，那么必然可以从结尾跳到开头。所以可以从结尾往前跳，一个一个判断，能跳到开头，就返回true，否则返回false。 实现过程 class Solution { public: bool canJump(vector\u003cint\u003e\u0026 nums) { if (nums.size() == 1) return true; int cur = nums.size() - 1; int pre = cur - 1; while (pre \u003e= 0) { if (nums[pre] \u003e= cur - pre) { cur = pre; pre -= 1; } else pre--; } if (cur == 0) return true; return false; } }; 时间复杂度：遍历了一次 nums ，故为O(N)； 空间复杂度：O(1); ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:2:1","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"跳跃游戏 II 给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。 每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处: 0 \u003c= j \u003c= nums[i] i + j \u003c n 返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。 ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:3:0","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"思路 一跳接着一跳跳。先找出从当前可以跳到的下一个区间，跳数加一，再以找到下一个区间作为当前这一跳的区间，再去找下一跳的区间，以此类推，直到跳到最后一个下标。 实现过程 class Solution { public: int jump(vector\u003cint\u003e\u0026 nums) { int start = 0; int end = 1; int len = nums.size(); int result = 0; while (end \u003c len) { int maxDistance = INT_MIN; for (int i = start; i \u003c end; i++) { maxDistance = max(maxDistance, i + nums[i]); } start = end; end = maxDistance + 1; result += 1; } return result; } }; 时间复杂度：在 while 循环里，实际上遍历了一次 nums ，故为O(N)； 空间复杂度：O(1); ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:3:1","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"划分字母区间 给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。 注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。 返回一个表示每个字符串片段的长度的列表。 ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:4:0","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"思路 记录每个字符最后出现的位置，从字符开始出现 start 到最后出现 end 这个区间中，如果存在字符的最后出现位置超过 end ，那么就更新 end ，当遍历到 end 时，说明这个区间的字符已经遍历完了，将这个区间加入到 answer 中即可，然后更新 start 和 end ，依此类推直到遍历完整个字符串。 代码实现 class Solution { public: vector\u003cint\u003e partitionLabels(string s) { unordered_map\u003cchar, int\u003e map; int len = s.size(); vector\u003cint\u003e ans; // 记录字符的最后出现位置 for (int i = 0; i \u003c len; i++) { map[s[i]] = i; } int start = 0; int end = map[s[0]]; for (int i = 0; i \u003c len; i++) { if (i == end) { ans.push_back(end - start + 1); start = i + 1; if (i != len - 1) end = map[s[i + 1]]; continue; } if (i \u003c end \u0026\u0026 map[s[i]] \u003e end) end = map[s[i]]; } return ans; } }; 时间复杂度：遍历了两次字符串，故为O(N)； 空间复杂度：采用了哈希表存储每个字符出现的最后位置，最多有26个字符，故为O(1)； ","date":"2024-01-23","objectID":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/:4:1","tags":["贪心算法"],"title":"LeetCode 贪心算法","uri":"/leetcode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"categories":["LeetCode"],"content":"这两天刷了二分查找的题，感觉对二分的理解进了一步，这里做个小总结。 ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:0:0","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"在排序数组中查找元素的第一个和最后一个位置 给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。 如果数组中不存在目标值 target，返回 [-1, -1]。 你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。 ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:1:0","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"思路 采用二分查找找到target，然后再找到边界即可。 时间复杂度：最坏情况下，数组中的元素均一致，故为O(N)，一般情况下为O(logN); 空间复杂度：采用了常数个临时变量，故为O(1)； ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:1:1","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"搜索旋转排序数组 整数数组 nums 按升序排列，数组中的值 互不相同 。 在传递给函数之前，nums 在预先未知的某个下标 k（0 \u003c= k \u003c nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。 给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。 ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:2:0","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"思路 数组旋转后，以第一个元素为枢轴值，采用二分查找。如果 nums[mid] \u003e= nums[0] , 说明当前遍历的是 nums 的前半部分，且[nums[0], nums[mid]]有序，若是target位于前半部分，则继续进行二分查找即可；若target不位于前半部分，则令 low = mid + 1, 往后半部分进行查找即可。如果 nums[mid] \u003c nums[0]，说明当前便利的是后半部分，且[nums[mid], nums[len - 1]] 有序。按照上面的思路进行搜索即可。 实现过程 class Solution { public: int search(vector\u003cint\u003e\u0026 nums, int target) { int low = 0; int high = nums.size() - 1; int mid = (low + high) / 2; int len = nums.size(); while (low \u003c= high) { mid = (low + high) / 2; if (nums[mid] == target) return mid; if (nums[mid] \u003e= nums[0]) { if (nums[mid] \u003e target \u0026\u0026 target \u003e= nums[0]) high = mid - 1; else low = mid + 1; } else { if (nums[mid] \u003c target \u0026\u0026 target \u003c= nums[len - 1]) low = mid + 1; else high = mid - 1; } } return -1; } }; 时间复杂度：二分查找，故为O(logN); 空间复杂度：O(1)，使用常数个临时变量； 注意 只要有序，就可以二分查找，这个有序不一定非要整体有序，部分有序的话也可以对部分进行二分查找。 ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:2:1","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"寻找旋转排序数组中的最小值 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到： 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2] 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7] 注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。 给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。 ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:3:0","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"思路 思路与上一题大差不差，同样以第一个元素为枢轴进行比较，如果 nums[mid] \u003e nums[0] ，说明当前位于前半部分，最小的元素在后半部分，需要后移，故令 low = mid + 1;否则说明遍历的是后半部分，令 high = mid - 1， 往前移找到最小值即可。 实现过程 class Solution { public: int findMin(vector\u003cint\u003e\u0026 nums) { int len = nums.size(); if (len == 1 || nums[0] \u003c nums[len - 1]) return nums[0]; int low = 0; int high = len - 1; int mid = (low + high) / 2; while (low \u003c= high) { mid = (low + high) / 2; if (nums[mid] \u003e= nums[0]) { low = mid + 1; } else { high = mid - 1; } } return nums[low]; } }; 时间复杂度：二分查找，故为O(logN); 空间复杂度：O(1)； ","date":"2024-01-22","objectID":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/:3:1","tags":["二分查找"],"title":"LeetCode 二分查找","uri":"/leetcode-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"categories":["LeetCode"],"content":"总结一下今天刷栈类题目的思路或学到的思路。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:0:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"有效的括号 给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串 s ，判断字符串是否有效。有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:1:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 这是道简单题，直接用栈就可解决。遍历括号序列，如果是左括号，就加入到栈中，如果遇到右括号，则弹出栈顶的括号，如果不i配，可直接返回false；以此类推，遍历完这个序列。 时间复杂度：遍历一遍括号序列，故为O(N)； 空间复杂度：最坏情况下，序列的最后一个字符为右括号，其余全为左括号，栈中存储了N - 1个括号，故为O(N)； ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:1:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。实现MinStack类： MinStack() 初始化堆栈对象。 void push(int val) 将元素val推入堆栈。 void pop() 删除堆栈顶部的元素。 int top() 获取堆栈顶部的元素。 int getMin() 获取堆栈中的最小元素。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:2:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 就是实现一个栈嘛。采用单向链表的方式实现，其中栈的先进先出特性，可对链表采用头插法实现。链表带头节点，每次插入一个元素时，就将节点插入到头节点的后面。 实现过程 class Node { public: int val; Node* next; Node(int value) : val(value) { next = nullptr; } }; class MinStack { Node* head; public: MinStack() { head = new Node(INT_MAX); } void push(int val) { head-\u003eval = min(val, head-\u003eval); Node* p = new Node(val); p-\u003enext = head-\u003enext; head-\u003enext = p; } void pop() { Node* temp = head-\u003enext; head-\u003enext = temp-\u003enext; if (head-\u003eval == temp-\u003eval) { head-\u003eval = INT_MAX; Node* p = head-\u003enext; while (p) { head-\u003eval = min(head-\u003eval, p-\u003eval); p = p-\u003enext; } } delete temp; } int top() { if (head-\u003enext) return head-\u003enext-\u003eval; else return -1; } int getMin() { return head-\u003eval; } }; /** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj-\u003epush(val); * obj-\u003epop(); * int param_3 = obj-\u003etop(); * int param_4 = obj-\u003egetMin(); */ ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:2:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"每日温度 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:3:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 采用单调栈解决，栈中的元素有序。使用一个栈来记录当前遇到的最高温度。当栈为空时，当前元素的坐标入栈；若当前元素小于栈顶元素，则将当前元素的坐标入栈；当栈不为空且栈顶元素小于当前元素时，更新栈顶元素对应的答案 ans[s.top()] = i - s.top() ；然后弹出栈顶元素，更新新栈顶元素对应的答案，直到栈为空，最后将当前元素的坐标入栈。 实现过程 class Solution { public: vector\u003cint\u003e dailyTemperatures(vector\u003cint\u003e\u0026 temperatures) { stack\u003cint\u003e stk; int len = temperatures.size(); vector\u003cint\u003e ans(len); fill(ans.begin(), ans.end(), 0); for (int i = 0; i \u003c len; i++) { while (!stk.empty() \u0026\u0026 temperatures[i] \u003e temperatures[stk.top()]) { ans[stk.top()] = i - stk.top(); stk.pop(); } stk.push(i); } return ans; } }; 时间复杂度：遍历一遍 nums 数组，故为O(N)； 空间复杂度：最坏情况下每日温度为递减序列，栈中存储了所有元素，故为O(N); ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:3:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"今天刷的专题是回溯，对于回溯这块，比较陌生，这里记录一下一些题的思路以及大神总结的回溯题思路。 回溯算法 回溯算法是一种在搜索空间中寻找解的算法。它采用试错的思想，尝试分步地去解决一个问题。在求解过程中，当发现当前的分步答案不能得到正确的解时，就取消上一步或几步的计算，并进行新的尝试。 回溯算法通常应用于组合问题、排列问题、选择问题等。它的基本思路是：从第一个可能的动作开始搜索，每当搜索到一个状态时，先判断这个状态是否满足问题的约束条件，如果满足约束条件，则进入下一个状态继续搜索；如果不满足约束条件，则返回上一个状态，进行其他可能的动作。这个过程就像在一个树形结构中遍历所有的节点，因此回溯算法也被称为“试探法”。 怎样写回溯算法？ 画出递归树，找到状态变量(回溯函数的参数) 根据题意，确立结束条件 找准选择列表(与函数参数相关)，与第一步紧密关联 判断是否需要剪枝 做出选择，递归调用，进入下一层 撤销选择 遇到回溯算法相关的题目，可根据这个步骤思考，得到最终的实现代码。 注意 由于下面的题都是关于回溯算法的，故思路都是差不多的，只是条件不一样，重点是结合上面的过程和下面的实现代码强化对这类题的思考，对这类题形成一种思路而不是束手无措。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:0:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"全排列 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:1:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 采用由深度优先搜索改造成的回溯函数，先一步步“试错”，找到最终答案，然后撤销选择，遍历完整个状态空间。 实现过程 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e \u0026 ans,vector\u003cint\u003e\u0026nums, int start, int length){ // 递归结束条件，遍历到nums中的最后一个元素 if(start == length){ ans.push_back(nums); return; } // 选择列表为未出现过的元素，这里由于是全排列问题，生成的状态都是有可能的，故不需要剪枝 for(int i = start;i \u003c length; i++){ // 试错，然后进入下一层递归 swap(nums[i], nums[start]); backTrack(ans, nums, start + 1, length); // 撤销选择 swap(nums[i], nums[start]); } } vector\u003cvector\u003cint\u003e\u003e permute(vector\u003cint\u003e\u0026 nums) { vector\u003cvector\u003cint\u003e\u003e ans; backTrack(ans, nums, 0, nums.size()); return ans; } }; 时间复杂度：O(N*N!)； 空间复杂度：全排列问题需要遍历到最后一个元素，故为O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:1:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"子集 给你一个整数数组 nums ，数组中的元素互不相同。返回该数组所有可能的子集（幂集）。解集不能包含重复的子集。你可以按任意顺序返回解集。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:2:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 采用回溯算法，递归树中使用一个参数 start，来标识当前的选择列表的起始位置。标识每一层的状态，然后start + 1，进入下一层的递归，直到找到所有子集。 实现代码 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e\u0026ans, vector\u003cint\u003e\u0026nums, vector\u003cint\u003e\u0026path, int start){ // 此题特殊，找到的所有状态都是答案，故均需要加入到ans中； ans.push_back(path); for(int i = start; i \u003c nums.size();i++){ // 当前路径中加入 nums[i]，生成下一个子集 path.push_back(nums[i]); backTrack(ans, nums, path, i + 1); // 撤销选择，删除加入的nums[i]; path.pop_back(); } } vector\u003cvector\u003cint\u003e\u003e subsets(vector\u003cint\u003e\u0026 nums) { vector\u003cvector\u003cint\u003e\u003e ans; vector\u003cint\u003epath; backTrack(ans,nums, path, 0); return ans; } }; 时间复杂度：一共是2N个状态，每个状态的构建需要O(N)，故总的为O(N*2N)； 空间复杂度：使用了一个数组存储路径，故为O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:2:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"组合总和 给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。 candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 对于给定的输入，保证和为 target 的不同组合数少于 150 个。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:3:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 套用上面总结的回溯模板，找到、找准结束条件，选择列表即可。 实现过程 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e\u0026 ans, vector\u003cint\u003e\u0026nums, vector\u003cint\u003e \u0026path, int start, int sum, int target){ // 结束条件 =\u003e 当前元素和 sum == target if(sum == target){ ans.push_back(path); return; } for(int i = start;i \u003c nums.size();i++){ // 剪枝操作，若当前 sum + nums[i] \u003e target ，则说明其下一层的子状态都不是解，故不需要再进入下一层递归 if(sum + nums[i] \u003e target) continue; // 路径中加入当前元素值nums[i]，进入下一层递归 path.push_back(nums[i]); backTrack(ans, nums, path, i, sum + nums[i], target); // 撤销选择 path.pop_back(); } } vector\u003cvector\u003cint\u003e\u003e combinationSum(vector\u003cint\u003e\u0026 candidates, int target) { vector\u003cvector\u003cint\u003e\u003e ans; vector\u003cint\u003epath; backTrack(ans, candidates,path, 0, 0, target); return ans; } }; 时间复杂度：O(N)，N为所有可行解的长度之和。搜索递归树的时间复杂度取决于搜索树所有叶子节点的深度之和，即所有可行解的长度之和； 空间复杂度：最坏情况下，target 由 target 个 1 组成，需要递归 O(target)层，故为O(target)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:3:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"括号生成 数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 实现过程 class Solution { public: void backTrack(vector\u003cstring\u003e\u0026ans, string cur, int left, int right, int len){ // n 对括号序列的长度为 2 * n，若当前字符串的长度为 2 * len，则其为问题的解之一 if(len * 2== cur.size()){ ans.push_back(cur); return; } // 左括号数量没有达到 len 时，可以继续生成左括号，然后递归 if(left \u003c len){ cur.push_back('('); backTrack(ans,cur, left + 1, right, len); cur.pop_back(); } // 若左括号数量为 n 之后，右括号数量不够，则生成右括号 if(right \u003c left){ cur.push_back(')'); backTrack(ans,cur, left, right + 1, len); cur.pop_back(); } } vector\u003cstring\u003e generateParenthesis(int n) { vector\u003cstring\u003eans; string cur = \"\"; backTrack(ans,cur,0,0,n); return ans; } }; 时间复杂度：O(22*N * N); 空间复杂度：需要的空间取决于递归栈的深度，每一层递归函数需要 O(1) 的空间，最多递归 2*N 层，因此空间复杂度为 O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:4:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"分割回文串 给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。回文串 是正着读和反着读都一样的字符串。 实现过程 class Solution { vector\u003cvector\u003cstring\u003e\u003e ans; vector\u003cstring\u003e path; void backTrack(const string\u0026 s, int start) { // 所有字符都划分完成，达到结束条件 if (start \u003e= s.size()) { ans.push_back(path); return; } for (int i = start; i \u003c s.size(); i++) { // 如果当前划分的字串是回文的，则将其进一步划分 if (isPlalindrome(s, start, i)) { string temp = s.substr(start, i - start + 1); path.push_back(temp); backTrack(s, i + 1); } else continue; path.pop_back(); } } // 判断是否是回文，双指针 bool isPlalindrome(const string\u0026 s, int i, int j) { while (i \u003c j) { if (s[i++] != s[j--]) return false; } return true; } public: vector\u003cvector\u003cstring\u003e\u003e partition(string s) { ans.clear(); path.clear(); backTrack(s, 0); return ans; } }; ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:5:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"复原IP地址 有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。 例如：“0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、“192.168.1.312” 和 “192.168@1.1” 是 无效 IP 地址。 给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:6:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 复原IP地址的思路与分割回文串的思路一致，都是分割，但是这里的回溯结束条件是子串中划分成了四个部分，既有三个’.’； 实现过程 class Solution { vector\u003cstring\u003eans; void backTrack(string \u0026s, int start, int point){ if(point == 3){ if(isLegal(s,start, s.size() - 1)) ans.push_back(s); return; } for(int i = start; i \u003cs.size();i++){ if(isLegal(s, start, i)){ s.insert(s.begin() + i + 1, '.'); backTrack(s, i + 2,point + 1); s.erase(s.begin() + i + 1); }else break; } } bool isLegal(string\u0026s, int left, int right){ if(left \u003e right) return false; if(s[left] == '0' \u0026\u0026 left != right) return false; int num = 0; for (int i = left; i \u003c= right; i++) { if (s[i] \u003e '9' || s[i] \u003c '0') { return false; } num = num * 10 + (s[i] - '0'); } if (num \u003e 255) return false; return true; } public: vector\u003cstring\u003e restoreIpAddresses(string s) { ans.clear(); if(s.size() \u003c 4 || s.size() \u003e 12) return ans; backTrack(s,0,0); return ans; } }; ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:6:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"小结一下今天刷到的关于堆的题目。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:0:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"数组中的第K个最大元素 给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:1:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 这道题中说明了，不用考虑重复元素，若需要考虑重复元素时，使用哈希表去重即可。维护一个容量为 K 的小根堆(优先队列 priority_queue )，先将前 K 个元素放入堆中，然后遍历整个数组，将每个元素与堆顶元素比较，若其大于堆顶元素，则弹出堆顶元素，并将当前的元素入堆；遍历完之后，对顶元素既是第 K 大的元素。 实现代码 class Solution { public: int findKthLargest(vector\u003cint\u003e\u0026 nums, int k) { priority_queue\u003cint, std::vector\u003cint\u003e, std::greater\u003cint\u003e\u003e q; int length = nums.size(); int i = 0; for(;i \u003c k;i++){ q.push(nums[i]); } for(;i \u003c length;i++){ if(nums[i] \u003c q.top()) continue; q.push(nums[i]); q.pop(); } return q.top(); } }; 时间复杂度：维护一个大小为 K 的堆，最坏情况下，数组中的元素为升序排列，故为O(NlogN)； 空间复杂度：使用大小为 K 的堆，故为O(K); ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:1:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"前 K 个高频元素 给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:2:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 先用哈希表记录各个元素出现的次数，然后将这些记录对加入到一个vector中，以出现次数进行排序，倒数 K 个记录对即为前 K 个高频单词。 实现代码 class Solution { public: vector\u003cint\u003e topKFrequent(vector\u003cint\u003e\u0026 nums, int k) { unordered_map\u003cint, int\u003e times; for (auto e : nums) times[e]++; vector\u003cpair\u003cint, int\u003e\u003etemp; for(auto \u0026 it : times){ pair\u003cint, int\u003e t(it.second, it.first); temp.push_back(t); } sort(temp.begin(), temp.end()); vector\u003cint\u003e ans; for(int i = temp.size() - 1;k \u003e 0;i--,k--){ ans.push_back(temp[i].second); } return ans; } }; 注意，在ACM模式下，使用pair需要加头文件 #include \u003cutility\u003e. ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:2:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。返回 滑动窗口中的最大值 。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:3:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 这道题可以说是考察大根堆的运用，采用大根堆存储遍历到的元素，若堆顶元素的下标大于或等于窗口的左边界，那么这个值就是窗口内的最大值，否则弹出堆顶元素，继续判断。依此类推，遍历完整个数组，即可找打窗口中的所有最大值。 实现代码 class Solution { public: vector\u003cint\u003e maxSlidingWindow(vector\u003cint\u003e\u0026 nums, int k) { priority_queue\u003cpair\u003cint ,int\u003e\u003e q; int i = 0; int length = nums.size(); for(;i \u003c length, k \u003e 0; i++, k--){ q.push(make_pair(nums[i], i)); } vector\u003cint\u003eans; ans.push_back(q.top().first); int left_margin = 1; for(;i \u003c length;i++){ q.push(make_pair(nums[i], i)); while(q.top().second \u003c left_margin) q.pop(); ans.push_back(q.top().first); left_margin++; } return ans; } }; 时间复杂度：最坏情况下，数组 nums 中的元素单调递增，最终大根堆中没有元素被移除。由于将一个元素放入堆的时间复杂度为 O(logN)，因此总时间复杂度为 O(NlogN); 空间复杂度：采用了大根堆存储遍历到的元素，故为O(N)； ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:3:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"数据流的中位数 中位数是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。 例如 arr = [2,3,4] 的中位数是 3 。 例如 arr = [2,3] 的中位数是 (2 + 3) / 2 = 2.5 。 实现 MedianFinder 类: MedianFinder() 初始化 MedianFinder 对象。 void addNum(int num) 将数据流中的整数 num 添加到数据结构中。 double findMedian() 返回到目前为止所有元素的中位数。与实际答案相差 10-5 以内的答案将被接受。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:4:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 使用两个优先队列，一个是大根堆，一个是小根堆。大根堆存储输入数据中较小的一半数据，小根堆存储输入数据中较大的一半数据。插入数据时，若两个堆的元素个数一致，先插入到小根堆中，否则，插入到大根堆。当两个堆中的元素个数相同时，中位数就是两个堆对顶元素之和的一半；不相同时，中位数就是小根堆中的堆顶元素。 实现过程 class MedianFinder { priority_queue\u003cint, vector\u003cint\u003e, greater\u003cint\u003e\u003e min_heap; priority_queue\u003cint\u003e max_heap; public: MedianFinder() {} void addNum(int num) { if (min_heap.size() == max_heap.size()) { max_heap.push(num); min_heap.push(max_heap.top()); max_heap.pop(); } else { min_heap.push(num); max_heap.push(min_heap.top()); min_heap.pop(); } } double findMedian() { if (min_heap.size() != max_heap.size()) return min_heap.top(); else return (max_heap.top() + min_heap.top()) / 2.0; } }; /** * Your MedianFinder object will be instantiated and called as such: * MedianFinder* obj = new MedianFinder(); * obj-\u003eaddNum(num); * double param_2 = obj-\u003efindMedian(); */ 注意 使用优先队列大小根堆时，要先引入头文件 queue ,同时，使用priority_queue默认是大根堆，使用小根堆时，需要这样写 #include\u003cqueue\u003e // 优先队列要引入这个头文件 priority_queue\u003cint, vector, greater\u003e name // 小根堆的写法 时间复杂度：查找中位数的时间为O(1)，直接访问对顶元素即可；添加/删除 num 的时间为O(logN)，故为O(logN)； 空间复杂度：存储了所有 num ，故为O(N)； ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:4:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"小结一下今天LeetCode上关于图论的几道题。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:0:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"岛屿数量 给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:1:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 本质就是考察图的深度优先遍历，遍历图中的每个点，如果是'1’，则对其进行dfs，最后统计外层循环里调用了几次dfs，即可得知图中有几个岛屿。 时间复杂度：遍历完整个图，故为O(MN)； 空间复杂度：dfs采用递归实现，最坏情况下整个图为陆地，故为O(MN)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:1:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"腐烂的橘子 在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一： 值 0 代表空单元格； 值 1 代表新鲜橘子； 值 2 代表腐烂的橘子； 每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:2:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 先统计一下新鲜水果和坏水果的数量，如果没有新鲜水果和坏水果，则可直接返回0； 令count = 3；则第一次腐烂的水果为 count - 1 = 2；将在第一分钟内被感染成腐烂的水果的值置为 count ，然后 count++ ，那么第二分钟内腐烂的水果为count - 1 = 3。此时不用再处理值为2的腐烂水果，因为其已经被第一感染腐烂的水果包围了，不能再感染新鲜水果。再将第二分钟感染成腐烂的水果的值置为 count ，然后 count++。以此类推，直到没有新鲜水果被感染时，即可返回结果； 最终返回时，若没有未被感染的新鲜水果，则返回 count - 4 ，既是所需的最小时间；若有未被感染的新鲜水果，就返回 -1. 时间复杂度：设所需的最小时间为t，则上述过程中遍历了 t + 1 次网格，最坏情况下 t = M，故为O(M2N)； 空间复杂度：使用了常数个临时变量，故为O(1)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:2:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"课程表 你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。 例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路一 构造一个 numCourses * numCourses 的bool类型图 matrix ，若修读课程 j ，时需先修读课程 i ，那么 matrix[i][j] = true ，表示从 i 指向 j ，i 是 j 的先驱节点。遍历每一个课程对，将 matrix 中对应的值设为 true 。若 i、j、k 中存在这样的关系：i \u003c- j \u003c- k ，那么将 matrix[k][j] 设为 true 之后， 也需要将 matrix[k][i] 设为 true 。最后，遍历 matrix ，若存在 matrix[i][j] == matrix[j][i] ，则说明这两个点成环，可直接返回 false；遍历完之后，未找到上述的情况，返回 true 。 时间复杂度：设 M 为 prerequisites 的长度，matrix 为 N * N 的矩阵，最坏情况下为O(N2)； 空间复杂度：建立了 matrix 作为邻接矩阵，故为O(N2)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路二 换种角度思考，若课程可以修读完成，则图中没有环，则可说明图中存在拓扑序列。所以可以把课程对当前边，对这个图进行拓扑排序，若得到的拓扑序列中节点的数量等于 numCourses ，则说明图中没有环，课程可以正常修读完成，否则说明图中有环，课程不可以正常修读完成。 拓扑序列的模板代码 class Solution { public: bool canFinish(int numCourses, vector\u003cvector\u003cint\u003e\u003e\u0026 prerequisites) { // matrix 相当于邻接表，存储图中的边； vector\u003cint\u003e matrix[numCourses]; // in_degree 记录每个顶点的入度； vector\u003cint\u003e in_degree(numCourses, 0); // 计算各边的入度； for (auto\u0026 e : prerequisites) { matrix[e[1]].push_back(e[0]); in_degree[e[0]]++; } // 辅助队列q，用以实现拓扑排序，用栈也可； queue\u003cint\u003e q; // 找到第一个入度为零的顶点，并加入到队列中； for (int i =0;i\u003cnumCourses;i++) { if (!in_degree[i]) q.push(i); } // 进行拓扑排序， 用 count 统计序列中顶点的数量； int count = 0; while (!q.empty()) { int idx = q.front(); q.pop(); count++; for (auto\u0026 i : matrix[idx]) { // 若入度减一之后为零，将其加入到队列中； if (--in_degree[i] == 0) q.push(i); } } return count == numCourses; } }; 这段代码为拓扑排序的模板的代码，贴这供以后学习用~~ 时间复杂度：对图中的边均进行了两次遍历，同时访问了一次入度数组，故为O(M + N)； 空间复杂度：存储了图中的边及入读，故为O(M + N); ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:2","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"实现Trie(前缀数) Trie（发音类似 “try”）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。请你实现Trie()类： Trie() 初始化前缀树对象； void insert(String word) 向前缀树中插入字符串 word ； boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false ； boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false ； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:4:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 首先什么是 前缀树 ？ 前缀数，顾名思义就是前缀形成树，也称为字典树，是一种用于高效存储和检索字符串的数据结构。它的主要特点是将输入的字符串拆分成字符序列，并通过字符之间的关联关系来组织和表示这些字符串。例如在百度中输入C++，会出现一大堆联想词语，都是以C++作为前缀的词语。前缀树的基本思想是利用共同的前缀来减少存储空间和搜索时间。它以树状结构存储字符序列，从根节点开始，每个节点代表一个字符，节点之间通过指针连接形成树的结构。从根节点到每个叶子节点的路径都代表一个完整的字符串。（注意根节点不存储字符） 前缀数的结构？ 在前缀树中，一个节点一般包含两个部分： 字符结尾标志，表示当前字符是否是字符串的结尾； 子节点指针：指向当前节点的子节点，通常使用数组或哈希表来存储多个子节点，其中数组或哈希表的大小取决于字符集的大小。 前缀数操作的实现？ 插入操作：将一个字符串插入前缀树的过程是逐个字符进行的。从根节点开始，根据每个字符找到对应的子节点（如果不存在就创建一个），然后继续处理下一个字符，直到插入完整个字符串。 搜索操作：在前缀树中搜索一个字符串时，也是逐个字符进行的。从根节点开始，根据每个字符找到对应的子节点，如果遇到空指针或者没有对应的子节点，则表示该字符串不存在于前缀树中。 前缀匹配操作：前缀树最大的优势之一是可以快速找到具有特定前缀的所有字符串。从根节点开始，根据每个字符找到对应的子节点，直到达到前缀的最后一个字符。然后，可以通过遍历子树或使用深度优先搜索等方法，获取所有以该前缀开头的字符串。 删除操作：删除一个字符串时，需要从前缀树中将其对应的节点递归地删除。如果删除节点后导致其父节点成为叶子节点且没有其他子节点，则可以进一步删除该父节点，以此类推，直到遇到一个非叶子节点或者有其他子节点的节点。 实现代码(不包含删除操作) class Trie { bool isEnd; Trie* next[26]; public: Trie() { isEnd = false; for(auto \u0026 e : next) e = nullptr; } void insert(string word) { Trie* cur_node = this; for (auto ch : word) { if (cur_node-\u003enext[ch - 'a'] == nullptr) { cur_node-\u003enext[ch - 'a'] = new Trie(); } cur_node = cur_node-\u003enext[ch - 'a']; } cur_node-\u003eisEnd = true; } bool search(string word) { Trie* cur_node = this; for (auto ch : word) { cur_node = cur_node-\u003enext[ch - 'a']; if (cur_node == nullptr) return false; } return cur_node-\u003eisEnd; } bool startsWith(string prefix) { Trie* cur_node = this; for (auto ch : prefix) { cur_node = cur_node-\u003enext[ch - 'a']; if (cur_node == nullptr) return false; } return true; } }; ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:4:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"总结一下今天刷二叉树遇到的难题和一些思路。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:0:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"从前序与中序遍历序列构造二叉树 给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:1:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路(借鉴大神) 前序遍历 =\u003e （根节点，左子树前序序列，右子树前序序列）； 中序遍历 =\u003e （左子树中序序列，根节点，右子树中序序列） 并且各序列的长度相同 先根据前序序列得到当前根节点的值(preorder[0]); 申请当前树节点, 并初始化; 如果序列长度为1, 说明这颗树只有根节点，直接返回这个节点； 查找中序序列里当前节点值(没有重复元素)，找得到两子树的序列长度； 将左子树前序序列, 右子树前序序列，左子树中序序列, 右子树中序序列创建出来； 以左子树，右子树分类，进行递归, 构造左右子树( 回到步骤1 ), 将返回结果(子树根节点)赋值给左右指针； 返回这个节点； 代码实现过程C++ class Solution { public: TreeNode* buildTree(vector\u003cint\u003e\u0026 preorder, vector\u003cint\u003e\u0026 inorder) { // 如果是一颗空树，直接返回空指针； if(!preorder.size()) return nullptr; // 申请节点并初始化 TreeNode *root = new TreeNode(); root-\u003eval = preorder[0]; root-\u003eleft = nullptr; root-\u003eright = nullptr; // 如果这棵树只有根节点，直接返回这个节点； if(preorder.size() == 1) return root; // 查找当前节点在中序序列中的位置； auto it = find(inorder.begin(), inorder.end(), preorder[0]); // //创建左子树前序序列, 右子树前序序列，左子树中序序列, 右子树中序序列； vector\u003cint\u003e pl(preorder.begin() + 1,preorder.begin() + 1 + (it - inorder.begin())); vector\u003cint\u003epr(preorder.begin() + 1 + (it - inorder.begin()), preorder.end()); vector\u003cint\u003e il(inorder.begin(), it); vector\u003cint\u003e ir(it + 1, inorder.end()); // 创建左右子树, 并将它们的根节点赋值给当前节点的指针； root-\u003eleft = buildTree(pl, il); root-\u003eright = buildTree(pr, ir); return root; } }; 这段代码的递归思路很nice，值得记录下来学习！ 时间复杂度： O(N)，N是树中的节点个数； 空间复杂度： 在创建过程中，除了答案需要的O(N)空间之外，我们还创建了左右子树的先序、中序序列，所以中的空间复杂度为o(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:1:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的最近公共祖先 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:2:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 使用后序遍历的模型，每个父节点都可以接收到两个孩子节点的状态，并把这个状态往上传递，直到该节点满足祖先节点的条件。 对二叉树进行后序遍历，如果当前节点是p或者q或者NULL，则返回当前节点； 对子节点进行遍历，获取左右孩子的状态； 若左右孩子都返回了一个非空指针，则说明当前节点是他们的最近公共祖先，返回当前节点即可；若右孩子扎到了，则返回右孩子；若左孩子找到了，则返回左孩子；否则返回NULL； 代码实现过程 class Solution { public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { if(root == p || root == q || root == NULL) return root; TreeNode* left = lowestCommonAncestor(root-\u003eleft, p, q); TreeNode* right = lowestCommonAncestor(root-\u003eright, p, q); // left 和 right都不为空，说明此时root就是最近公共节点; if(left \u0026\u0026 right) return root; // 如果left为空，right不为空，就返回right，说明目标节点是通过right返回的，反之亦然; if(!left) return right; return left; } }; 时间复杂度： 递归模型是后序遍历，最坏情况下需要遍历整棵树，故为O(N)； 空间复杂度： 递归调用栈的深度等于二叉树的高度，最坏情况下二叉树为一个链表，故为O(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:2:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的右视图 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:3:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 就是对二叉树进行层序遍历嘛，把每一层的最右个节点逐个加入到ans中即可。 时间复杂度： 遍历完整棵树，故为O(N)； 空间复杂度：使用了一个队列存储书中一层的节点，故为O(log2N); ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:3:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的直径 给你一棵二叉树的根节点，返回该树的 直径 。二叉树的 直径 是指树中任意两个节点之间最长路径的 长度 。这条路径可能经过也可能不经过根节点 root 。两节点之间路径的 长度 由它们之间边数表示。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:4:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 easy，就是求树中节点左右孩子高度和的最大值，对求二叉树高度的代码稍加改造即可。 时间复杂度：O(N); 空间复杂度：递归栈的大小为log2N，最坏情况下，二叉树为链表，故为O(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:4:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树中的最大路径和 二叉树中的 路径 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。路径和 是路径中各节点值的总和。给你一个二叉树的根节点 root ，返回其 最大路径和 。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:5:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 每遍历一个节点，都要求出包含该节点在内的最大路径，并且在后面的遍历中更新这个最大值。对于当前节点来说，它的最大路径和等于左右子树的最大路径加上本身的值。但是有个前提，如果左右孩子中的最大路径和小于或者等于0了，那就不需要把这个值加上去，因为它对最大路径和产生了负贡献，使得最大值变小了； 对于一个节点来说，它对最大路径和的贡献来与源于其本身的值与其左右孩子中的最大值，所以在求左右子树最大值的时候，返回其节点值与其最大的孩子值即可； 代码实现 class Solution { public: int(getMax(TreeNode* root, int \u0026ans)){ // 当前节点为空，其对最大路径和的贡献为0，故返回0； if(!root) return 0; // 求左子树的最大贡献，若左子树是负贡献，则其为0； int left_max = max(getMax(root-\u003eleft, ans), 0); // 求右子树的最大贡献，若右子树是负贡献，则其为0； int right_max = max(getMax(root-\u003eright, ans), 0); // 计算当前节点的最大路径和； int cur_max = root-\u003eval + left_max + right_max; // 更新最大路径和 ans = max(ans, cur_max); // 返回当前节点对最大路径的贡献(当前节点值 + 左右孩子中的最大值)； return root-\u003eval + max(left_max, right_max); } int maxPathSum(TreeNode* root) { int ans = INT_MIN; getMax(root, ans); return ans; } }; 时间复杂度：使用的是先序遍历的递归模型，时间复杂度为O(N)； 空间复杂度：使用了常数个临时变量，故为O(1)； 总结 关于二叉树的题，大部分都是运用递归的思想解决。使用递归时，关键是通过分析当前节点与所求值的关系，理清递归时左右孩子需不需要返回，返回时需要返回什么样的值的问题，最后再看怎么处理空节点，从而得到递归的整个边界关系，完成递归代码的编写。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:5:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"今天刷了挺多链表的题，稍微总结一下思路。大部分的链表题，按照常规思路去想就可以解决，很少有特别精妙的方法。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:0:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"两数相加 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:1:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 easy，就是用链表表示两个加数，然后将其相加。从两个链表的头部开始一个一个节点相机即可，注意一下进位就好。 时间复杂度： 遍历两个链表，故为O(N)； 空间复杂度： 新开了一个链表存储结果，所以空间复杂度为o(N); ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:1:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"K个一组翻转链表 给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。k是一个正整数，它的值小于或等于链表的长度。如果节点总数不是k的整数倍，那么请将最后剩余的节点保持原有顺序。能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:2:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 使用快慢指针，从原链表上一组一组的截取一段节点，然后将每一组节点反转、拼接起来即可。 时间复杂度：截取原链表，故需要遍历一次，在翻转的过程中遍历每一段链表，所以总的来看遍历了两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，所以空间复杂度为O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:2:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"随机链表的复制 给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:3:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 这题较难的地方是对random指针的处理，而且题中没说节点的值是唯一的，这就有可能多个节点的值都一样，造成对random的处理变得复杂。但是，同样可以运用快慢指针来解决这个问题。先遍历一遍整个链表，复制每一个节点，不管random指针先。第二次遍历时，new_list和old_list同时从头节点开始遍历，如果old_list中random为空，则new_list中random也为空；如果random不为空时，让慢指针slow和快指针fast同时指向new_list的头节点，接着从old_list中random指向的节点开始向下移动，每移动一个节点，fast也移动一个节点。当old_list移动到末尾时，slow再和fast同时一步一步的移动，当fast也走到末尾时，此时slow指向的节点刚好是对应于random指向的节点。 时间复杂度： 最坏情况为o(N2); 空间复杂度：O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:3:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"合并K个升序链表 给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:4:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 easy，就是对链表数组做K路归并排序嘛一个while循环里嵌套个for循环就可以解决。 时间复杂度： 遍历了每一个节点，故为O(KN)； 空间复杂度： 使用了常数个临时变量，故空间复杂度为O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:4:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"LRU缓存 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:5:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 使用哈希表加双向链表解决。哈希表可以在O(1)时间内查找到key对应的节点。这些哈希表上的节点用双向链表表示，把这些节点用一个头节点head串成一个循环链表。head-\u003enext指向的是第一个节点，head-\u003epre指向的是尾节点。当访问一个节点或新建立一个节点时，就把这个节点放到head的后面，当容量超过capacity时，就删除掉尾节点。 代码实现 class Node { public: int key; int value; Node* pre; Node* next; Node(int k, int v) : key(k), value(v) { pre = next = nullptr; } }; class LRUCache { int capacity; unordered_map\u003cint, Node*\u003e map; Node* head; public: LRUCache(int capacity) { this-\u003ecapacity = capacity; head = new Node(0, 0); head-\u003enext = head; head-\u003epre = head; } int get(int key) { auto cur = map.find(key); if (cur == map.end()) return -1; // 将访问过的节点调到头节点后面； cur-\u003esecond-\u003epre-\u003enext = cur-\u003esecond-\u003enext; cur-\u003esecond-\u003enext-\u003epre = cur-\u003esecond-\u003epre; cur-\u003esecond-\u003enext = head-\u003enext; head-\u003enext-\u003epre = cur-\u003esecond; head-\u003enext = cur-\u003esecond; cur-\u003esecond-\u003epre = head; return cur-\u003esecond-\u003evalue; } void put(int key, int value) { auto cur = map.find(key); if (cur != map.end()) { // 节点存在时，修改器value值， 并将其调到头节点后面； cur-\u003esecond-\u003evalue = value; cur-\u003esecond-\u003epre-\u003enext = cur-\u003esecond-\u003enext; cur-\u003esecond-\u003enext-\u003epre = cur-\u003esecond-\u003epre; cur-\u003esecond-\u003enext = head-\u003enext; head-\u003enext-\u003epre = cur-\u003esecond; head-\u003enext = cur-\u003esecond; cur-\u003esecond-\u003epre = head; return; } // 节点不存在，则新间节点，加入到头节点后面； Node* node = new Node(key, value); map[key] = node; node-\u003enext = head-\u003enext; head-\u003enext-\u003epre = node; head-\u003enext = node; node-\u003epre = head; // 判断节点数量有没有达到阈值； if (map.size() \u003c= capacity) return; // 到达阈值时，删除链表最后一个节点； Node* temp = head-\u003epre; map.erase(temp-\u003ekey); temp-\u003epre-\u003enext = temp-\u003enext; temp-\u003enext-\u003epre = temp-\u003epre; delete temp; } }; /** * Your LRUCache object will be instantiated and called as such: * LRUCache* obj = new LRUCache(capacity); * int param_1 = obj-\u003eget(key); * obj-\u003eput(key,value); */ ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:5:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"小结一下今天刷的关于链表的题，设计的主要知识点是快慢指针，虽然有点简单，但还是总结一下吧。 快慢指针思想 常规： 定义一个slow慢指针，一个fast快指针，慢指针走一步时，快指针走两步。当快指针走到链表尾时，慢指针刚好位于链表中点。 进阶：快指针先走N步，慢指针不动，然后快指针走一步时慢指针也走一步。当快指针到达链表尾时，慢指针刚好位于倒数第N个位置。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:0:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"环形链表 给你一个链表的头节点，判断链表中是否有环。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:1:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路： 使用快慢指针的常规做法，当一个链表中有坏时，快指针和慢指针走了n步之后走，必定在环中相遇，因为快指针每次都比慢指针多走一步。若链表中没有环，那么快慢指针则不可能相遇。 时间复杂度： 快慢指针都走了n步，时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，故空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:1:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"环形链表II 给你一个链表的头节点，判断其中是否有环，如果有环，则返回坏的起始节点，否则返回N空指针。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:2:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路： 使用快慢指针的常规做法解决。设链表中非环部分的长度为a，两指针第一次相遇时慢指针在环里走过的长度为b，环里剩下的长度为c，那么两指针第一次相遇时，有以下的关系： 2 * (a + b) = a + (n + 1) * b + n * c; 化简一下有 =\u003e a = (n - 1)(b + c) + c； 由此可以知道，当快慢指针第一次相遇后，把快指针移到头节点，然后慢指针走一步，快指针也走一步，当他们走了a步之后再次相遇时，就是刚好位于链表中环的起始位置。 时间复杂度： 相当于遍历了两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时指针，故空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:2:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"删除链表中倒数第N个节点 给你一个链表，删除链表的倒数第 n个结点，并且返回链表的头结点。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路一： 快慢指针的进阶用法，快指针先走n步，然后快慢指针再同时一步一步的走，当快指针到达链表尾时，慢指针刚好位于倒数第N个位置，此时对链表进行相应的操作即可。 时间复杂度： 遍历一次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路二： 先遍历一次链表，统计出链表中的节点个数，在下一次遍历中找到倒数第n个节点，将其删除。 时间复杂度： 遍历两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:2","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"小结一下今天刷的LeetCode算法题，今天刷的三道题属于矩阵方面。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:0:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"矩阵置零 给你一个m * n 的数组，如果一个元素的值为零，则将这个元素所在行列的全部元素置为零，要求使用原地算法。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:1:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 先遍历一次整个矩阵，用临时数组存储数组中值为零的元素的坐标，然后逐一把这些元素所在的行列的元素置为零。 空间复杂度 最坏情况下，矩阵中的每一个元素均为零，所需的额外空间为O(m * n)； 时间复杂度 同样是最坏情况下，对于每一个元素，据需要处理m + n个元素，所以时间复杂度为O((m + n) * m * n) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:1:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"螺旋矩阵 给你一个矩阵，按照顺时针螺旋的顺序，返回矩阵中的所有元素。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:2:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 按照顺时针螺旋的顺序，一个个返回矩阵中的元素，设置四个边界值，分别对应右-\u003e下-\u003e左-\u003e上，每输出一轮元素后(既输出一行或者一列元素后)，就更新边界值，直到输出完所有的矩阵元素。 空间复杂度 使用了几个临时变量暂存下标，故空间复杂度为O(1) 时间复杂度 遍历一次整个矩阵，故时间复杂度为O(N2); ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:2:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"旋转图像 给定一个n * n的矩阵表示一个图像，将图像进行原地顺时针旋转九十度，不可使用辅助矩阵。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:3:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 观察题目给出的样子，可以发现matrix[i][j]位置的元素旋转后的位置是[j][length -i -1]；与i、j对应的四个元素之间存在这样的关系： matrix[i][j] = matrix[length - j - 1][i] matrix[length - j - 1][i] = matrix[length - i - 1][length - j - 1] matrix[length - i - 1][length - j - 1] = matrix[j][length - i - 1] matrix[j][length - i - 1] = matrix[i][j] 发现这些关系后就不难了，把这些关系代码化，放进双重for循环里既可解决这道题。 空间复杂度 O(1) 时间复杂度O(n2) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:4:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"搜索二维矩阵 编写一个算法，看target值是否在矩阵中，矩阵的每行每列元素均是升序的。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:5:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 判断target是否可能在matrix[i]上，如果可能，则对这一行元素进行二分查找，否则判断下一行元素，直至找完整个矩阵。 空间复杂度O(1) 时间复杂度O(m*log2n) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:5:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["计算机"],"content":"在学习完计算机网络之后，对一些常用网络协议做的梳理总结。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:0:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本常用的网络协议-简介 传输控制协议（TCP） ：TCP是一种面向连接的协议，用于在网络中可靠地传输数据。它通过提供流控制、拥塞控制、差错恢复和可靠性保证等机制来确保数据的完整性和可靠性。TCP广泛用于传输网页、电子邮件、文件传输等应用。 网际协议（IP） ：IP是一种网络层协议，负责在互联网中将数据包从源地址传输到目的地址。它定义了数据包的格式和路由选择算法。IP地址用于唯一标识网络中的设备。IP协议是互联网的核心协议，使得不同网络之间的通信成为可能。 超文本传输协议（HTTP） ：HTTP是一种应用层协议，用于在客户端和服务器之间传输超文本（如网页）和其他资源。它是Web通信的基础，通过使用URL作为资源定位符来请求和传输数据。HTTP协议通常使用TCP作为传输协议。 域名系统（DNS） ：DNS是一种用于将域名解析为IP地址的分布式数据库系统。当你在浏览器中输入一个域名时，DNS将负责将其解析为相应的IP地址，使得你可以访问该域名对应的服务器。 动态主机配置协议（DHCP） ：DHCP是一种用于自动分配IP地址和其他网络配置信息的协议。它允许计算机在加入网络时自动获取所需的网络配置，而无需手动配置。DHCP协议使得网络的管理更加灵活和高效。 文件传输协议（FTP） ：FTP是一种用于在网络中传输文件的协议。它允许用户通过FTP客户端连接到FTP服务器，并进行文件上传、下载、删除等操作。FTP可以通过TCP协议进行可靠的数据传输。 简单邮件传输协议（SMTP） ：SMTP是一种用于在网络中发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。 网际组管理协议（IGMP） ：IGMP是一种用于在多播网络中管理组播组的协议。它允许主机加入和离开多播组，并通过路由器进行组播数据的传输。IGMP在视频流、音频流和在线游戏等应用中发挥重要作用。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:1:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本的常用的网络协议-详细 传输控制协议（TCP） ： 作用层次：传输层（第四层） 单向/双向：TCP是一种双向协议，允许双方在连接中进行双向的数据传输。 长连接/点对点：TCP使用长连接，即在通信双方建立连接后，可以持续地进行数据传输。 区别：TCP提供可靠的、面向连接的通信。它通过序列号、确认应答、重传机制等保证数据的可靠性和完整性。TCP还提供流控制和拥塞控制机制，以确保网络中的可靠性和效率。 网际协议（IP） ： 作用层次：网络层（第三层） 单向/双向：IP是一种无连接协议，只负责将数据包从源地址传输到目的地址，是一种单向协议。 长连接/点对点：IP本身并不保持连接状态，因此没有长连接或点对点的概念。 区别：IP协议是互联网的核心协议，负责数据包的路由选择和传输。它使用IP地址唯一标识网络中的设备，并根据路由表将数据包从源地址传输到目的地址。IP协议提供了无连接、不可靠的传输服务。 超文本传输协议（HTTP） ： 作用层次：应用层（第七层） 单向/双向：HTTP是一种双向协议，客户端向服务器发送请求，服务器返回响应。 长连接/点对点：HTTP既可以使用长连接也可以使用短连接。长连接允许在单个连接上发送多个请求和响应，而短连接在每个请求-响应周期后关闭连接。 区别：HTTP用于在客户端和服务器之间传输超文本和其他资源。它使用URL作为资源定位符，通过请求方法（如GET、POST）向服务器发送请求，并接收服务器返回的响应。 域名系统（DNS） ： 作用层次：应用层（第七层） 单向/双向：DNS是一种双向协议，客户端向DNS服务器发送查询请求，服务器返回响应。 长连接/点对点：DNS通常使用短连接，即每次查询都会建立一个新的连接。 区别：DNS用于将域名解析为IP地址，以实现设备之间的通信。它使用分布式数据库系统，客户端向DNS服务器发送域名查询请求，并接收到对应的IP地址响应。 动态主机配置协议（DHCP） ： 作用层次：应用层（第七层） 单向/双向：DHCP是一种双向协议，客户端向DHCP服务器发送请求，服务器提供响应和配置信息。 长连接/点对点：DHCP使用短连接，在完成IP地址分配后，连接将被释放。 区别：DHCP允许设备在加入网络时自动获取IP地址和其他网络配置信息。客户端通过DHCP发现、请求、确认等阶段与服务器进行交互，最终获取网络配置。 用户数据报协议（UDP） ： 作用层次：传输层（第四层）。 单向/双向：UDP是一种无连接协议，可以进行单向或双向通信。但是，UDP本身不提供确认和重传机制，因此数据传输不可靠。 长连接/点对点：UDP是无连接的，每个数据报都是一个独立的信息单元。每个数据报都具有自己的源地址和目的地址。 区别：UDP是一种简单的传输协议，它提供了一种无需建立连接的快速数据传输方式。它将数据分割为数据报，并通过IP协议进行传输，但不提供可靠性保证。UDP通常用于实时应用，如音频、视频、实时游戏等，其中传输速度和即时性比数据完整性更重要。 文件传输协议（FTP） ： 作用层次：应用层（第七层）。 单向/双向：FTP是一种双向协议，客户端与服务器之间可以进行双向数据传输。 长连接/点对点：FTP使用长连接，客户端在建立连接后可以持续进行多个文件传输操作。 区别：FTP是一种专门用于文件传输的协议。它提供了一套命令和响应规范，允许客户端连接到FTP服务器并进行文件上传、下载、删除等操作。FTP可以使用TCP作为传输协议，以确保可靠的数据传输。 简单邮件传输协议（SMTP） ： 作用层次：应用层（第七层）。 单向/双向：SMTP是一种双向协议，用于在客户端和邮件服务器之间进行双向通信。 长连接/点对点：SMTP使用短连接，在每次邮件发送后连接会关闭。 区别：SMTP是用于发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。SMTP协议通常使用TCP作为传输协议，以确保可靠的邮件传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"TCP与UDP的区别 TCP（传输控制协议） ： TCP是面向连接的协议，它在通信双方之间建立一个可靠的、有序的、全双工的连接。 TCP提供数据传输的可靠性，通过序号、确认和重传等机制来确保数据的可靠性和完整性。 TCP保证数据按顺序到达目标，如果有数据丢失或损坏，TCP会重新传输丢失的数据。 TCP连接的建立使用三次握手，连接的关闭使用四次挥手。 TCP适用于对数据可靠性要求高的应用场景，如文件传输、Web浏览、电子邮件等。 UDP（用户数据报协议） ： UDP是无连接的协议，每个数据报都是独立的，不与之前或之后的数据报建立连接。 UDP不提供数据传输的可靠性，也不保证数据的按序到达目标。它将数据报发送到目标地址，但无法确保它是否到达或是否按顺序到达。 UDP是一种轻量级的协议，没有TCP的连接建立和维护的开销，以及重传和拥塞控制机制，因此传输效率较高。 UDP适用于实时性要求较高的应用场景，如音频和视频流媒体、实时游戏等，因为它对数据传输的实时性更敏感，可以更快地传递数据。 举例说明： TCP：当你浏览网页时，你的浏览器使用TCP与Web服务器建立连接，然后请求和接收网页的数据。TCP确保数据可靠地传输，并按正确的顺序到达，以确保你能够正确地浏览网页的内容。 UDP：在实时游戏中，UDP常用于传输游戏数据。例如，在多人在线游戏中，玩家的位置和动作需要实时传输给服务器和其他玩家。UDP的低延迟和快速传输特性使得玩家能够快速响应游戏动作。 与TCP相比，UDP具有一些明显的区别： 连接性：TCP是面向连接的协议，它在通信双方建立连接并维护连接状态。UDP则是无连接的，每个数据报都是独立的。 可靠性：TCP提供可靠的数据传输，通过确认和重传机制来确保数据的完整性和可靠性。UDP不提供这些机制，因此数据传输不可靠。 传输效率：由于TCP提供了可靠性和拥塞控制等机制，它在传输效率上会有一定的开销。相比之下，UDP不提供这些机制，因此传输效率更高。 数据包边界：TCP是一个数据流协议，没有数据包边界的概念。UDP通过将数据分割为数据报，每个数据报都具有自己的边界。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:1","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"FTP与SMTP FTP用于文件传输，允许客户端与服务器进行双向数据传输。它使用长连接来支持多个文件传输操作。 SMTP用于电子邮件传输，支持发送和接收电子邮件。它也是一个双向协议，使用短连接来发送邮件。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:2","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"如何理解长连接、短链接？单向以及双向通信？ 理解长连接和短连接、单向和双向通信的概念可以从以下角度入手： 连接的持续性 ： 长连接：长连接是指在通信双方之间建立连接后，保持连接的状态进行持续的数据传输。在长连接中，通信双方可以进行多次的数据交换而无需重新建立连接。 短连接：短连接是指每次通信都需要建立一个新的连接，并在通信结束后关闭连接。每次通信都是独立的，不保持连接的状态。 通信的双向性 ： 单向通信：在单向通信中，数据的传输只发生在一个方向上，从发送方到接收方。接收方不会向发送方发送任何数据。 双向通信：双向通信允许数据在通信双方之间进行双向传输。发送方和接收方都可以发送和接收数据。 举例来说，让我们以网络通信中的TCP协议为例来说明这些概念的应用： 长连接（双向）：当两台计算机通过TCP建立连接后，它们可以在连接的生命周期内进行双向的数据传输。数据可以在双方之间交换多次，而无需每次都重新建立连接。这种长连接常见于像网页浏览、实时通信应用等场景，例如通过Web浏览器访问网站时，浏览器与服务器之间可以建立一个长连接来传输多个资源。 短连接（单向）：在某些情况下，通信双方可能只需进行一次或少数几次数据交换，而无需保持连接的状态。例如，当客户端通过HTTP向服务器请求某个网页时，客户端会与服务器建立短连接，发送请求并接收响应后，连接会关闭。下次再请求时会再次建立新的连接。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:3","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是有状态和无状态？ 有状态和无状态是指网络通信协议或应用程序在交互过程中是否保持上下文或状态信息的特性。 有状态（Stateful） ： 有状态是指在通信过程中保持一定的状态信息或上下文。 当通信双方建立连接后，会在双方之间维护一些状态信息，这些信息可能包括会话标识、认证状态、会话数据等。 在后续的通信中，这些状态信息会影响协议或应用程序的行为和处理过程。 有状态的协议或应用程序能够跟踪和管理多个请求之间的关系，提供更高级的功能和服务。 例如，HTTP协议本身是无状态的，但通过使用HTTP会话机制（如Cookie、Session），可以在多个请求之间保持状态信息。 无状态（Stateless） ： 无状态是指在通信过程中不保持任何状态信息或上下文。 每个请求都是独立的，服务器不会记住之前的请求或客户端的状态。 每个请求都需要提供所有必要的信息来完成处理，不依赖之前的请求或状态。 无状态的协议或应用程序更加简单和轻量，每个请求都是相互独立的。 例如，DNS协议就是无状态的，每个DNS查询都是独立的，不依赖之前的查询结果或状态信息。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:4","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的三次握手？为什么是三次？ 当建立和终止TCP连接时，TCP协议使用三次握手（Three-Way Handshake）和四次挥手（Four-Way Handshake）的过程。 TCP三次握手（Three-Way Handshake） ： 第一次握手（SYN）：客户端向服务器发送一个SYN（同步）报文，指示客户端请求建立连接。该报文包含一个初始序列号（ISN）作为数据的起始点。 第二次握手（SYN + ACK）：服务器接收到客户端的SYN报文后，会发送一个带有SYN/ACK标志的报文作为响应。该报文表示服务器已经接收到请求，并同意建立连接。同时，服务器也会为连接分配自己的初始序列号。 第三次握手（ACK）：客户端收到服务器的SYN/ACK报文后，会发送一个带有ACK标志的报文作为确认。这样，客户端和服务器的连接就建立起来了。连接建立后，双方可以开始传输数据。 三次握手的原理和原因： 第一次握手确保客户端可以向服务器发送请求，并通知服务器客户端的初始序列号。 第二次握手确保服务器能够接收到客户端的请求，并同意建立连接。服务器也通知客户端服务器的初始序列号。 第三次握手是为了确认服务器收到了客户端的响应，确保连接的双向性。 为什么不是2次握手： 两次握手无法解决以下情况：客户端向服务器发送连接请求，但该请求在网络中延迟，并最终在一段时间后到达服务器。如果只有两次握手，服务器会以为客户端要建立连接，但实际上客户端并没有发送连接请求。这样会导致服务器浪费资源和时间。 通过引入第三次握手，服务器可以确认客户端确实有意向建立连接，从而避免错误的连接请求。 总结： TCP三次握手和四次挥手是为了确保可靠的连接建立和关闭。三次握手确保连接建立时的双向通信，而四次挥手保证连接的正确关闭。这些过程和步骤是为了解决网络延迟和确保数据完整性的问题，以提供可靠的数据传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:5","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的四次挥手？ TCP四次挥手（Four-Way Handshake） ： 第一次挥手（FIN）：当一个端点（通常是客户端）希望关闭连接时，它发送一个带有FIN（结束）标志的报文给另一个端点（通常是服务器）。这表示该端点已经完成了数据的发送，并且准备关闭发送端的连接。 第二次挥手（ACK）：接收到带有FIN标志的报文后，另一个端点（通常是服务器）发送一个带有ACK（确认）标志的报文给发送端。这个报文表示它已经收到了关闭请求，并确认发送端可以开始关闭连接。 第三次挥手（FIN）：在接收到关闭请求并发送确认后，另一个端点（通常是服务器）也会开始关闭连接。它发送一个带有FIN标志的报文给发送端，表示该端点也完成了数据的发送。 第四次挥手（ACK）：接收到带有FIN标志的报文后，发送端（通常是客户端）发送一个带有ACK标志的报文给另一个端点。这个报文确认接收到了关闭请求，并表示双方的连接已经成功关闭。 四次挥手的原理和原因： 第一次挥手：发送端发送FIN报文给接收端，表示发送端已经完成了数据的发送，并希望关闭连接。 第二次挥手：接收端收到FIN报文后，发送一个ACK报文给发送端，表示已经收到关闭请求，并确认发送端可以开始关闭连接。 第三次挥手：接收端发送FIN报文给发送端，表示接收端也完成了数据的发送，并准备关闭连接。 第四次挥手：发送端收到FIN报文后，发送一个ACK报文给接收端，表示接收到关闭请求，并确认双方的连接已经成功关闭。 为什么需要四次挥手： 因为TCP是全双工的协议，允许数据在两个方向上同时传输。因此，关闭连接需要双方都完成数据的传输和关闭操作。 第三次挥手是为了确保接收端可以完成数据的传输并准备关闭连接，同时发送一个FIN报文。 第四次挥手是为了发送端确认接收到关闭请求并进行最后的确认，同时发送一个ACK报文。 为什么不是三次挥手： TCP连接的终止需要一个额外的步骤来保证数据完整性和可靠性。因此，四次挥手是为了正确关闭连接而设计的。 第三次挥手（FIN）是为了客户端通知服务器已经准备好关闭连接，并停止发送数据。 第四次挥手（ACK）是为了服务器确认客户端的关闭请求，并通知客户端自己也准备关闭连接。 这样，双方都能确认彼此的关闭意图，并进行必要的数据传输和状态清理。 通过四次挥手，双方可以彼此确认关闭连接的意图，并完成最后的数据传输和状态清理，确保连接的正确关闭。 总结： TCP四次挥手是为了可靠地关闭连接而设计的。它确保双方在关闭连接时能够完成数据的传输和状态的清理，以提供可靠的连接关闭过程。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:6","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是SYN、ACK、FIN？ SYN报文（同步报文） ： SYN报文是由发起连接的一方（通常是客户端）发送的。 它用于建立连接，表示客户端请求建立连接，并在报文的TCP头部中携带一个初始序列号（ISN）。 SYN报文的主要作用是告知对方自己希望建立连接，并通过ISN提供一个起始点，以便在数据传输中对字节进行编号。 ACK报文（确认报文） ： ACK报文可以单独存在，也可以与其他标志（如SYN、FIN）组合使用。 它用于确认接收到的数据，表明对方已经正确接收到了之前的数据，并可以继续发送下一段数据。 在三次握手过程中的第二次握手中，ACK报文用于确认接收到了对方发送的SYN报文，并表示同意建立连接。 ACK报文在建立连接后的数据传输中也起着重要的作用，用于确认接收到的数据，并保持双方的数据传输同步。 FIN报文（结束报文） ： FIN报文是由一方（通常是发起关闭的一方）发送的。 它用于关闭连接，表示发送方不再发送数据，并请求关闭连接。 FIN报文的发送方通常已经完成了数据的发送，并且希望关闭连接。 总结： SYN报文用于请求建立连接，并携带初始序列号（ISN），而ACK报文用于确认接收到的数据，保持数据传输的同步和可靠性。它们在TCP连接的建立过程中起着关键的作用，确保双方能够正确建立连接并进行数据传输。FIN报文用于关闭TCP连接，发送方发送FIN报文表示完成了数据的发送并请求关闭连接，接收方发送FIN报文表示自己也完成了数据的发送。通过FIN报文的交换，双方能够协调关闭连接的过程，并确保连接的正确关闭。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:7","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"HTTP与HTTPS HTTP（Hypertext Transfer Protocol）和HTTPS（Hypertext Transfer Protocol Secure）是两种常用的协议。它们在安全性和数据传输方面有以下区别： HTTP（Hypertext Transfer Protocol） ： HTTP是一种无状态的协议，它用于在Web服务器和客户端之间传输超文本内容。 HTTP在传输数据时使用明文（未加密），因此数据可以被窃听和篡改。 HTTP使用TCP作为传输协议，使用默认端口号80。 HTTP请求和响应的内容通常是明文的，包括URL、请求头、响应头和消息体等。 HTTP不提供数据的加密和身份验证，因此对于涉及敏感信息的网站，如登录、支付等，存在安全风险。 HTTPS（Hypertext Transfer Protocol Secure） ： HTTPS是基于HTTP的安全协议，通过使用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议进行加密和身份验证来保护数据传输的安全性。 HTTPS使用TCP作为传输协议，使用默认端口号443。 HTTPS通过使用公钥加密和私钥解密的方式来加密通信内容，确保数据在传输过程中的机密性。 HTTPS使用数字证书来验证服务器的身份，并确保与服务器建立的连接是可信的。 HTTPS可以有效地防止数据被窃听和篡改，提供了更高的安全性。 区别总结： HTTP是无状态的协议，数据传输不加密，容易被窃听和篡改。HTTPS是基于HTTP的安全协议，通过加密和身份验证保护数据传输的安全性。 HTTP使用默认端口号80，HTTPS使用默认端口号443。 HTTP传输的数据是明文的，而HTTPS传输的数据经过加密。 HTTP不提供身份验证机制，HTTPS使用数字证书来验证服务器的身份。 HTTPS在安全性方面比HTTP更可靠，适用于对数据传输安全性要求较高的场景，如登录、支付等涉及敏感信息的网站。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:8","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["kubernetes"],"content":"在完成柔性计算项目的过程中，总结request在kubernetes中的各种作用。如有不正确的地方或者有补充的点，欢迎联系我。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:0:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request出现之处 在 Kubernetes 中，Pod 是最小的可调度的部署单元。Pod 包含一个或多个容器，共享相同的网络命名空间和卷存储空间。在 Kubernetes 中，Pod 用来承载应用程序，并提供资源的抽象。Pod 中的 requests 字段是用来定义容器需要的最小计算资源的，主要包括 CPU 和内存。 requests 字段可以在 Pod 级别或容器级别设置。在 Pod 级别设置 requests 字段可以确保所有容器都具有相同的资源要求。在容器级别设置 requests 字段可以确保每个容器都有特定的资源要求。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:1:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用分析 为Pod设置request之后，其会在 Kubernetes 的Scheduler、Kubelet中发挥作用。下面进行详细分析。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Scheduler 当Pod设置中设置了request Scheduler在调度Pod到合适节点的过程中，会经过预选和优选两个阶段，其中会有各种各样的检查和评分策略，以为Pod找到最适合它的节点。在预选过程中有一个策略叫 NodeResourcesFit ，其作用是检查节点是否拥有Pod 请求的所有资源。实现的扩展点有preFilter、filter、score。其中的重点是 filter 的过程。 filter 过程Scheduler是如何实现的呢？它首先获取到集群中所有节点，然后检查节点是由有满足Pod请求的最小资源(既是节点的剩余可用资源是否大于Pod中设置的request)，如果不满足，则过滤掉当前节点。在计算节点的剩余可用资源时，Scheduler统计运行在节点上的每一个Pod的request，并把它们累加，如果 podRequest.MilliCPU \u003e (nodeInfo.Allocatable.MilliCPU - nodeInfo.Requested.MilliCPU)，那么该节点将会被过滤(这里以CPU举例，检查Memory是否满足要求也是同样的方法)。 当Pod未设置request Pod中未设置request时，Scheduler则认为Pod需要的最小计算资源为0，认为此Pod可以运行在任意一个节点上。故此时Scheduler不再对节点进行过滤和评分，而时把Pod调度到随机的节点上。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:1","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Kubelet 当Pod被调度成功之后，对应节点上的Kubelet会创建、运行、管理这个Pod。Kubelet管理节点上所有Pod的生命周期。当节点上所有Pod的request资源之和大于等于节点的Allocatable资源时，kubelet不创建最后一个被调度到此节点的Pod，并将最后一个被调度到此节点的Pod状态设为 OutOfcpu 或者 OutOfmemory。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:2","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"记录在验证kubelet压力驱逐原则时的遇到的问题与解决方法。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:0:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"验证节点压力驱逐原则时，实验结果与官方文档给出的规则相反 kubernetes的官方文档中给出，当节点内存资源紧张时，会根据以下的三条规则驱逐节点上的pod以回收内存资源，缓解内存资源压力： 先根据pod的内存使用量是否超过其request进行排序，超过的排在前面； 再根据pod的priority值大小进行排序，值小的排在前面； 最后根据pod内存request减去pod的实际内存使用量的值，得到值较小的排在前面； 我的集群环境： 三台基于Centos7.6操作系统的虚拟机 kubernetes版本1.23.0 未更改kubelet原本的配置文件 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验过程 自定义三个low、mid、high优先级类，在节点node1上部署两个pod，内存资源使用量大的pod而优先级高，内存使用量小的pod而优先级低。待他们运行稳定之后，再部署一个抢占node1内存资源的pod造成节点内存资源不足而触发驱逐，观察kubelet先驱逐哪一个pod。（**注意：**上述两个测试用的pod均没有设置request，故他们的request为0，驱逐的顺序由第2和第3点决定；同时保证抢占内存的pod不会被先驱逐） ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:1","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验结果 使用命令 kubectl get pods -n example -w 观察pod的状态（实验时上面的pod都在example的namespace下）。最终是优先级高的pod先被驱逐，并且它的状态直接是error，并没有出现evicted的状态。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:2","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"结果分析 显然上面的实验结果比不符合kubernetes文档给出的规则，在查阅kubelet源码之后也发现上面的实验结果有误。接着去查看node1上kubelet的配置，发现其节点剩余可用内存剩余小于100Mi时才触发驱逐，并且驱逐时pod的最大宽限期是0秒，这可能导致节点内存资源紧张时pod直接被kubelet kill掉，从而pod的状态直接变成error。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:3","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"思路验证 修改kubelet配置 进入到node1，使用命令打开 vim /var/lib/kubelet/config.yaml kubelet的配置文件，添加以下字段： evictionMaxPodGracePeriod: 60 evictionHard: memory.available: \"800Mi\" 上面是设置kubelet驱逐pod时，给pod的最大宽限期是60秒，当节点剩余可用内存小于800Mi时触发驱逐。然后使用命令 systemctl restart kubelet 重启节点上的kubelet，重新实验。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:4","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"二次实验与结果 同样按照一次实验时的实验步骤再次实验，观察哪一个pod先被驱逐。 这次实验时低优先级且内存使用量较小的pod先被驱逐，得到了正确的实验结果。故确实是因为kubelet默认的产生驱逐的阈值太高而导致出现错误的实验结果，当把kubelet内存的驱逐阈值调低即得到了正确的结果。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:5","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"在kubernets项目中多次使用到了docker的相关指令，特在此记录。 Docker 基本命令的使用方法 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:0:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像的拉取、上传和删除 搜索镜像 docker search [imageName]:[tag] 拉取镜像 docker pull [imageName]:[tag] 上传镜像 docker push [imagesName]:[tag] 删除镜像 docker rmi [镜像名]:[tag] 或 docker rmi [镜像ID] 如果删除不成功，可以在上面的删除命令后面加上参数强制删除，如： docker rmi [imageName]:[tag] --force 上述命令可以强制删除镜像，即使这个镜像正在被使用。 注意： 强制删除镜像的命令对于拥有子镜像的镜像将不会成功，除非先删除他的子镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:1:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像打包与导入 打包镜像 docker save -o [打包后的镜像名称].tar [imagesName]:[tag] 通过tar包导入镜像 docker load\u003c[打包的镜像名].tar 注意 其中的 \u003c 符号前后连接没有空格。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:2:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"docker制作镜像 docker build -t [你制作的镜像名]:[tag] . 其中的符号 . 表示Dockerfile文件在当前文件夹下，并使用其进行制作镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:3:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile 简介 什么是Dockerfile? Dockerfile是一个用来构建镜像的文本文件，里面包含了构建镜像所需的指令。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile指令介绍 FROM 所有Dockerfile指令都必须从FROM命令开始。FROM命令会指定镜像基于哪个基础镜像构建，接下来的命令也会给予这个基础镜像，FROM命令可以多 次使用，表示会创建多个镜像。 FROM \u003cimages name\u003e MAINTAINER MAINTAINER命令用于指定该镜像的作者。 MAINTAINER \u003cauthor name\u003e RUN RUN命令在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下： RUN \u003ccommand\u003e RUN apt-get update //这种形式使用/bin/sh环境中执行的命令 RUN [\"apt-get\", \"update\"] //这种形式直接使用系统调用exec来执行 多个命令可以用符号 \u0026\u0026 连接执行，如： RUN apt-get update \u0026\u0026 apt-get install vim ADD ADD是文件复制指令。它有两个参数和。destination是容器内的路径。source可以是URL或者是启动配置上下稳重的一个文件。语法如下： ADD \u003csrc\u003e \u003cdestination\u003e 如果源文件是主机上的zip或tar形式的压缩文件，Docker会先解压缩，然后将文件添加到镜像指定的文件。如果是URL指定的网络压缩文件则不会解压。 CMD CMD指令提供了容器启动时默认执行的命令。Dockerfile只允许使用一次CMD指令。 使用多个CMD指令会抵消之前所有的指令，只有最后一个指令生效。CMD有三种形式： CMD [\"executable\", \"paraml\", \"param2\"] CMD [\"param1\", \"param2\"] CMD command param1 param2 EXPOSE EXPOSE指定容器在运行时监听的端口。语法如下： EXPOSE \u003cport\u003e; //多个端口用空格隔开 EXPOSE 80 8080 9000 运行容器时通过参数-P(大写)即可在EXPOSE里所指定的端口映射到主机上另外的随机端口，其他容器或主机就可以通过映射后的端口与此容器通信。同时，我们也可以通过-p(小写)参数将Dockerfile中EXPOSE没有列出的端口设置成公开的。 ENTRYPOINT ENTRYPOINT：配置给容器一个可执行的命令。这意味着每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似CMD，Docker只允许一个ENTRYPOINT,多个ENTRYPOINT会抵消之前所有的ENTRYPOINT命令，只执行最后一句。其语法如下： ENTRYPOINT [\"executable\", \"param1\", \"param2\"] ENTRYPOINT command param1 param2 WORKDIR WORKDIR指定RUN、CMD和ENTRYPOINT命令的工作目录。语法如下： WORKDIR /path/to/workdir ENV ENV指令用于设置环境变量。它们使用键值对，增加运行程序的灵活性，语法如下： ENV \u003ckey\u003e \u003cvalue\u003e 以上是我本人在kubernetes项目中常用的指令，特在此记录。 另外，Dockerfile文件的理解是站在巨人的肩膀上，连接在此 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:1","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["杂记"],"content":"Markdown是一种轻量级标记语言，被广泛应用于各种场景中，如博客、论坛、文档等。Markdown的语法简单易懂，但是为了使文章格式清晰美观，还是需要按照一定的规范和格式来编写。 标题 Markdown中的标题使用 # 符号表示，一个 # 表示一级标题，两个 # 表示二级标题，以此类推，如下： 这是一级标题 一级标题 这是二级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:0:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"二级标题 这是三级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"三级标题 这是四级标题 四级标题 这是五级标题 五级标题 这是六级标题 六级标题 # 一级标题 ## 二级标题 ### 三级标题 文本样式 Markdown中可以使用如下方式来修改文本样式： 加粗：使用两个 * 符号或者两个 __ 符号包含文本。 **加粗文字** 或者 __加粗文字__ 斜体：使用一个 * 符号或者一个 _ 符号包含文本。 *斜体文字* 或者_斜体文字 删除线：使用两个 ~~ 符号包含文本。 ~~删除线文字~~ 列表 Markdown支持有序列表和无序列表两种，有序列表使用数字和 . 符号表示，无序列表使用 - 符号或者 * 符号表示。如下： 无序列表 - 无序列表1 - 无序列表2 - 无序列表3 有序列表 有序列表1 有序列表2 有序列表3 1. 有序列表1 2. 有序列表2 3. 有序列表三 链接和图片 Markdown中插入链接和图片的语法类似，都是使用中括号和小括号组合表示。其中，中括号内是链接或图片的描述，小括号内是链接或图片的地址。如下： 链接： 示例链接：百度链接 [链接描述](链接地址) 图片 示例图片： ![图片描述](图片地址) 代码块 如果需要插入一段代码，可使用 `` 符号包含代码，也可以使用 `````` 符号包含多行代码。如下： 一行代码 `code` 多行代码 code1 code2 code3 引用 Markdown中使用 \u003e 符号表示引用，可以嵌套使用。如下： 引用示例1 引用示例2 引用示例3 \u003e 引用1 \u003e\u003e 引用2 \u003e\u003e\u003e 引用3 分割线 Markdown中使用三个或者更多的 - 或者 * 符号表示分割线后可以有空格。如下： 分割线示例1 分割先示例2 --- 或 *** 上下标 上标: \u003csup\u003e num \u003c/sup\u003e 下标:\u003csub\u003e num \u003c/sub\u003e 以上就是Markdown编写文章的一些基本的规范和格式，可以根据需要进行调整。 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:1","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["项目"],"content":"梳理一下大二时做的一个课程设计，用C++语言实现一个轻量级的小型数据库，只存储键值对。 特点： 依赖少：实现过程中涉及到的数据结构如哈希表、小根堆等，均是自己实现，不依赖第三方库文件； 高效： 以顺序写的方式将数据写入到磁盘文件中，文件读取速度快。由于成本原因，大部分情况我们使用的都是传统的机械硬盘，机械硬盘随机读写慢，但是顺序读写快； 支持基本的增删改查、同时支持设置数据的生存时间。 键值对的设计 对于K-V中存储的每个key-value，每个记录有5个字段组成： key-length: 定长四节点的(int)整形表示，记录的是key的长度； value-length: 定长四个节点的(int)整形表示，记录的是value的长度； operation：定长双字节的(short)整形表示，1表示SET操作，2表示DELETE操作，3表示EXPIRES操作； key: 记录的是key的字符串； value: 记录的是value的字符串； 运用到的数据结构 哈希表 用哈希表建立内存索引，哈希表中的节点存储有每个记录的key、记录的过期时间及记录在文件中的偏移值。 小根堆 用小根堆维护被设置了过期时间的记录，堆中的节点同样存储了记录的key、记录的过期时间及记录在文件中的偏移值。 基本操作 写操作(SET) 将新的Key-Value Record追加写入到文件的末尾； 将 K-V Record同步更新到哈希表中，若Key不存在，则将它添加到索引中。若Key已经存在，则修改索引指向的位置(既再文件中偏移量)； 删除操作(DELETE) 在文件的末尾追加写入一个K-V Record，该Record中value的长度为-1，操作类型字段为2，表示删除这个记录； 更新哈希表中对应的记录，释放被删除的记录所在的节点； 读操作(GET) 查找哈希表，如果该记录存在，可以得到其在文件中的偏移值； 如果记录存在，依据哈希表中的偏移值去文件中读出对应的value并返回； 过期操作(EXPIRES) 设置Key的生存周期，倒计时归零后，自动将Key删除 获取当前的时间戳，加上生成时间得到过期时间戳； 将这个记录追加写入到文件中，operation操作字段为3，表示设置生成时间，同时value字段用来存放过期时间戳； 注意： 使用小根堆记录所有Key的过期时间： 读操作(GET)前，遍历堆顶元素，将所有已过期的Key删除； 对重复设置过期时间的Key，需要更新小根堆中的过期时间； 对已设置过期时间的Key，过期前执行删除(DELETE)或者覆盖(SET)操作，需要删除小根堆中的过期时间； 其他点 异常处理，如打开数据库文件时，需要判断输入的文件路径是否合法、文件是否存在、及是否创建成功； 由于数据库中对记录的操作都会在文件中追加如入，所以数据库文件存在一段时间后，会产生大量的无效数据，因此，当文件容量达到一定值时，需要对文件进行PURGE操作，删除无效的、过期的记录； 思考-进一步优化 由于磁盘操作比内存操作要慢，故可在内存中短暂存储短期内操作的数据，待内存使用达到上限阈值时，将最久不使用的Key-Value写入磁盘。 项目中涉及的八股文 堆排序 你能说一下堆排序吗？ 堆排序主要分为两个步骤，一是建堆，而是调整然后排序，下面以小根堆为例说下这两个过程； 建堆：堆中的数据是以数组的方式存储的，支持随机访问，堆中的数据有以下关系：下标从零开始，第i个节点的左孩子是2i+1，右孩子是2i+2，第i个节点的父节点是i/2(i为奇数)，或者是i/2 -1(i为偶数)。建堆时从下标为数组长度一般的元素开始，如果其左右孩子中有一个比它更小，那么将其与父节点交换，然后再以被交换的孩子节点作为父节点，看它的孩子中有没有比它更小的，如果有，则继续交换，重复上面的过程，直至其左右孩子不存在；接着坐标往前移，重复上述的调整过程，直到移动到第0个节点，此时整个堆构建完毕。 排序：交换堆顶元素与堆中的最后一个元素，数组长度减一，然后调整堆顶元素进，与最小的孩子进行交换，交换之后再以最小的孩子作为父节点，继续与它的孩子交换，直至不能再交换。再重复2的过程，直到数组的长度为1，此时可以得到降序排序的数组； 复杂度，建堆过程中，时间复杂度为O(N)，调整过程中，时间复杂度为O(NlogN)，所以总的时间复杂度为O(NlogN)； 哈希表 哈希表的实现方式有什么？ 数组+二叉搜索树：在每个哈希桶中使用二叉搜索树来存储元素。当哈希桶中的元素较多时，查询效率高，适合处理较大规模的数据。 数组+链表：在每个哈希桶中使用链表来存储元素，元素的插入和删除效率高，，但是查询时间较慢，适合处理小规模的数据。 哈希表的一般长度是多少？为什么是这么多？ 默认数组长度是 16，只要是2的次幂都行。那为什么数组长度得是 2 的次幂呢？一般来说，我们常用的 Hash函数是这样的：index = HashCode(key) % Length，由于位运算的效率比较高，所以 HashMap 就相应的可以改成：index = HashCode(key) \u0026 (Length - 1)。为了保证根据上述公式计算出来的 index 值是分布均匀的，我们就必须保证 Length 是 2 的次幂。 哈希表为什么按照两倍扩容？ 因为哈希表默认的数组长度一般是2的次幂，所以按照两倍扩容之后，数组的长度仍然是2的次幂。那为什么一定是2的次幂呢？因为这样可以使元素均匀的散布hashmap中，减少hash碰撞。index的计算可以改为用位运算的方式实现，计算效率高，而且扩容后元素在新表中的位置要么不动，要么有规律的出现在新表中（二的幂次方偏移量），这样会使扩容的效率大大提高。 处理哈希冲突的办法有哪些？ 开放地址法：有线性探测法和平方探测法，当发生冲突时，继续往后找； 多重哈希法：构造多个哈希函数，发生冲突后使用下一个哈希函数； 链地址法：将哈希值相同的记录用链表串起来； 建立公共溢出区：将哈希表分为基础表和益处表两部分，发生冲突的填入益处表； ","date":"2022-12-15","objectID":"/k-v-database/:0:0","tags":["File-Based-K-V-Database"],"title":"K v Database","uri":"/k-v-database/"}]