[{"categories":["计算机"],"content":"在学习完计算机网络之后，对一些常用网络协议做的梳理总结。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:0:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本常用的网络协议-简介 传输控制协议（TCP） ：TCP是一种面向连接的协议，用于在网络中可靠地传输数据。它通过提供流控制、拥塞控制、差错恢复和可靠性保证等机制来确保数据的完整性和可靠性。TCP广泛用于传输网页、电子邮件、文件传输等应用。 网际协议（IP） ：IP是一种网络层协议，负责在互联网中将数据包从源地址传输到目的地址。它定义了数据包的格式和路由选择算法。IP地址用于唯一标识网络中的设备。IP协议是互联网的核心协议，使得不同网络之间的通信成为可能。 超文本传输协议（HTTP） ：HTTP是一种应用层协议，用于在客户端和服务器之间传输超文本（如网页）和其他资源。它是Web通信的基础，通过使用URL作为资源定位符来请求和传输数据。HTTP协议通常使用TCP作为传输协议。 域名系统（DNS） ：DNS是一种用于将域名解析为IP地址的分布式数据库系统。当你在浏览器中输入一个域名时，DNS将负责将其解析为相应的IP地址，使得你可以访问该域名对应的服务器。 动态主机配置协议（DHCP） ：DHCP是一种用于自动分配IP地址和其他网络配置信息的协议。它允许计算机在加入网络时自动获取所需的网络配置，而无需手动配置。DHCP协议使得网络的管理更加灵活和高效。 文件传输协议（FTP） ：FTP是一种用于在网络中传输文件的协议。它允许用户通过FTP客户端连接到FTP服务器，并进行文件上传、下载、删除等操作。FTP可以通过TCP协议进行可靠的数据传输。 简单邮件传输协议（SMTP） ：SMTP是一种用于在网络中发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。 网际组管理协议（IGMP） ：IGMP是一种用于在多播网络中管理组播组的协议。它允许主机加入和离开多播组，并通过路由器进行组播数据的传输。IGMP在视频流、音频流和在线游戏等应用中发挥重要作用。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:1:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本的常用的网络协议-详细 传输控制协议（TCP） ： 作用层次：传输层（第四层） 单向/双向：TCP是一种双向协议，允许双方在连接中进行双向的数据传输。 长连接/点对点：TCP使用长连接，即在通信双方建立连接后，可以持续地进行数据传输。 区别：TCP提供可靠的、面向连接的通信。它通过序列号、确认应答、重传机制等保证数据的可靠性和完整性。TCP还提供流控制和拥塞控制机制，以确保网络中的可靠性和效率。 网际协议（IP） ： 作用层次：网络层（第三层） 单向/双向：IP是一种无连接协议，只负责将数据包从源地址传输到目的地址，是一种单向协议。 长连接/点对点：IP本身并不保持连接状态，因此没有长连接或点对点的概念。 区别：IP协议是互联网的核心协议，负责数据包的路由选择和传输。它使用IP地址唯一标识网络中的设备，并根据路由表将数据包从源地址传输到目的地址。IP协议提供了无连接、不可靠的传输服务。 超文本传输协议（HTTP） ： 作用层次：应用层（第七层） 单向/双向：HTTP是一种双向协议，客户端向服务器发送请求，服务器返回响应。 长连接/点对点：HTTP既可以使用长连接也可以使用短连接。长连接允许在单个连接上发送多个请求和响应，而短连接在每个请求-响应周期后关闭连接。 区别：HTTP用于在客户端和服务器之间传输超文本和其他资源。它使用URL作为资源定位符，通过请求方法（如GET、POST）向服务器发送请求，并接收服务器返回的响应。 域名系统（DNS） ： 作用层次：应用层（第七层） 单向/双向：DNS是一种双向协议，客户端向DNS服务器发送查询请求，服务器返回响应。 长连接/点对点：DNS通常使用短连接，即每次查询都会建立一个新的连接。 区别：DNS用于将域名解析为IP地址，以实现设备之间的通信。它使用分布式数据库系统，客户端向DNS服务器发送域名查询请求，并接收到对应的IP地址响应。 动态主机配置协议（DHCP） ： 作用层次：应用层（第七层） 单向/双向：DHCP是一种双向协议，客户端向DHCP服务器发送请求，服务器提供响应和配置信息。 长连接/点对点：DHCP使用短连接，在完成IP地址分配后，连接将被释放。 区别：DHCP允许设备在加入网络时自动获取IP地址和其他网络配置信息。客户端通过DHCP发现、请求、确认等阶段与服务器进行交互，最终获取网络配置。 用户数据报协议（UDP） ： 作用层次：传输层（第四层）。 单向/双向：UDP是一种无连接协议，可以进行单向或双向通信。但是，UDP本身不提供确认和重传机制，因此数据传输不可靠。 长连接/点对点：UDP是无连接的，每个数据报都是一个独立的信息单元。每个数据报都具有自己的源地址和目的地址。 区别：UDP是一种简单的传输协议，它提供了一种无需建立连接的快速数据传输方式。它将数据分割为数据报，并通过IP协议进行传输，但不提供可靠性保证。UDP通常用于实时应用，如音频、视频、实时游戏等，其中传输速度和即时性比数据完整性更重要。 文件传输协议（FTP） ： 作用层次：应用层（第七层）。 单向/双向：FTP是一种双向协议，客户端与服务器之间可以进行双向数据传输。 长连接/点对点：FTP使用长连接，客户端在建立连接后可以持续进行多个文件传输操作。 区别：FTP是一种专门用于文件传输的协议。它提供了一套命令和响应规范，允许客户端连接到FTP服务器并进行文件上传、下载、删除等操作。FTP可以使用TCP作为传输协议，以确保可靠的数据传输。 简单邮件传输协议（SMTP） ： 作用层次：应用层（第七层）。 单向/双向：SMTP是一种双向协议，用于在客户端和邮件服务器之间进行双向通信。 长连接/点对点：SMTP使用短连接，在每次邮件发送后连接会关闭。 区别：SMTP是用于发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。SMTP协议通常使用TCP作为传输协议，以确保可靠的邮件传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"TCP与UDP的区别 TCP（传输控制协议） ： TCP是面向连接的协议，它在通信双方之间建立一个可靠的、有序的、全双工的连接。 TCP提供数据传输的可靠性，通过序号、确认和重传等机制来确保数据的可靠性和完整性。 TCP保证数据按顺序到达目标，如果有数据丢失或损坏，TCP会重新传输丢失的数据。 TCP连接的建立使用三次握手，连接的关闭使用四次挥手。 TCP适用于对数据可靠性要求高的应用场景，如文件传输、Web浏览、电子邮件等。 UDP（用户数据报协议） ： UDP是无连接的协议，每个数据报都是独立的，不与之前或之后的数据报建立连接。 UDP不提供数据传输的可靠性，也不保证数据的按序到达目标。它将数据报发送到目标地址，但无法确保它是否到达或是否按顺序到达。 UDP是一种轻量级的协议，没有TCP的连接建立和维护的开销，以及重传和拥塞控制机制，因此传输效率较高。 UDP适用于实时性要求较高的应用场景，如音频和视频流媒体、实时游戏等，因为它对数据传输的实时性更敏感，可以更快地传递数据。 举例说明： TCP：当你浏览网页时，你的浏览器使用TCP与Web服务器建立连接，然后请求和接收网页的数据。TCP确保数据可靠地传输，并按正确的顺序到达，以确保你能够正确地浏览网页的内容。 UDP：在实时游戏中，UDP常用于传输游戏数据。例如，在多人在线游戏中，玩家的位置和动作需要实时传输给服务器和其他玩家。UDP的低延迟和快速传输特性使得玩家能够快速响应游戏动作。 与TCP相比，UDP具有一些明显的区别： 连接性：TCP是面向连接的协议，它在通信双方建立连接并维护连接状态。UDP则是无连接的，每个数据报都是独立的。 可靠性：TCP提供可靠的数据传输，通过确认和重传机制来确保数据的完整性和可靠性。UDP不提供这些机制，因此数据传输不可靠。 传输效率：由于TCP提供了可靠性和拥塞控制等机制，它在传输效率上会有一定的开销。相比之下，UDP不提供这些机制，因此传输效率更高。 数据包边界：TCP是一个数据流协议，没有数据包边界的概念。UDP通过将数据分割为数据报，每个数据报都具有自己的边界。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:1","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"FTP与SMTP FTP用于文件传输，允许客户端与服务器进行双向数据传输。它使用长连接来支持多个文件传输操作。 SMTP用于电子邮件传输，支持发送和接收电子邮件。它也是一个双向协议，使用短连接来发送邮件。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:2","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"如何理解长连接、短链接？单向以及双向通信？ 理解长连接和短连接、单向和双向通信的概念可以从以下角度入手： 连接的持续性 ： 长连接：长连接是指在通信双方之间建立连接后，保持连接的状态进行持续的数据传输。在长连接中，通信双方可以进行多次的数据交换而无需重新建立连接。 短连接：短连接是指每次通信都需要建立一个新的连接，并在通信结束后关闭连接。每次通信都是独立的，不保持连接的状态。 通信的双向性 ： 单向通信：在单向通信中，数据的传输只发生在一个方向上，从发送方到接收方。接收方不会向发送方发送任何数据。 双向通信：双向通信允许数据在通信双方之间进行双向传输。发送方和接收方都可以发送和接收数据。 举例来说，让我们以网络通信中的TCP协议为例来说明这些概念的应用： 长连接（双向）：当两台计算机通过TCP建立连接后，它们可以在连接的生命周期内进行双向的数据传输。数据可以在双方之间交换多次，而无需每次都重新建立连接。这种长连接常见于像网页浏览、实时通信应用等场景，例如通过Web浏览器访问网站时，浏览器与服务器之间可以建立一个长连接来传输多个资源。 短连接（单向）：在某些情况下，通信双方可能只需进行一次或少数几次数据交换，而无需保持连接的状态。例如，当客户端通过HTTP向服务器请求某个网页时，客户端会与服务器建立短连接，发送请求并接收响应后，连接会关闭。下次再请求时会再次建立新的连接。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:3","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是有状态和无状态？ 有状态和无状态是指网络通信协议或应用程序在交互过程中是否保持上下文或状态信息的特性。 有状态（Stateful） ： 有状态是指在通信过程中保持一定的状态信息或上下文。 当通信双方建立连接后，会在双方之间维护一些状态信息，这些信息可能包括会话标识、认证状态、会话数据等。 在后续的通信中，这些状态信息会影响协议或应用程序的行为和处理过程。 有状态的协议或应用程序能够跟踪和管理多个请求之间的关系，提供更高级的功能和服务。 例如，HTTP协议本身是无状态的，但通过使用HTTP会话机制（如Cookie、Session），可以在多个请求之间保持状态信息。 无状态（Stateless） ： 无状态是指在通信过程中不保持任何状态信息或上下文。 每个请求都是独立的，服务器不会记住之前的请求或客户端的状态。 每个请求都需要提供所有必要的信息来完成处理，不依赖之前的请求或状态。 无状态的协议或应用程序更加简单和轻量，每个请求都是相互独立的。 例如，DNS协议就是无状态的，每个DNS查询都是独立的，不依赖之前的查询结果或状态信息。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:4","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的三次握手？为什么是三次？ 当建立和终止TCP连接时，TCP协议使用三次握手（Three-Way Handshake）和四次挥手（Four-Way Handshake）的过程。 TCP三次握手（Three-Way Handshake） ： 第一次握手（SYN）：客户端向服务器发送一个SYN（同步）报文，指示客户端请求建立连接。该报文包含一个初始序列号（ISN）作为数据的起始点。 第二次握手（SYN + ACK）：服务器接收到客户端的SYN报文后，会发送一个带有SYN/ACK标志的报文作为响应。该报文表示服务器已经接收到请求，并同意建立连接。同时，服务器也会为连接分配自己的初始序列号。 第三次握手（ACK）：客户端收到服务器的SYN/ACK报文后，会发送一个带有ACK标志的报文作为确认。这样，客户端和服务器的连接就建立起来了。连接建立后，双方可以开始传输数据。 三次握手的原理和原因： 第一次握手确保客户端可以向服务器发送请求，并通知服务器客户端的初始序列号。 第二次握手确保服务器能够接收到客户端的请求，并同意建立连接。服务器也通知客户端服务器的初始序列号。 第三次握手是为了确认服务器收到了客户端的响应，确保连接的双向性。 为什么不是2次握手： 两次握手无法解决以下情况：客户端向服务器发送连接请求，但该请求在网络中延迟，并最终在一段时间后到达服务器。如果只有两次握手，服务器会以为客户端要建立连接，但实际上客户端并没有发送连接请求。这样会导致服务器浪费资源和时间。 通过引入第三次握手，服务器可以确认客户端确实有意向建立连接，从而避免错误的连接请求。 总结： TCP三次握手和四次挥手是为了确保可靠的连接建立和关闭。三次握手确保连接建立时的双向通信，而四次挥手保证连接的正确关闭。这些过程和步骤是为了解决网络延迟和确保数据完整性的问题，以提供可靠的数据传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:5","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的四次挥手？ TCP四次挥手（Four-Way Handshake） ： 第一次挥手（FIN）：当一个端点（通常是客户端）希望关闭连接时，它发送一个带有FIN（结束）标志的报文给另一个端点（通常是服务器）。这表示该端点已经完成了数据的发送，并且准备关闭发送端的连接。 第二次挥手（ACK）：接收到带有FIN标志的报文后，另一个端点（通常是服务器）发送一个带有ACK（确认）标志的报文给发送端。这个报文表示它已经收到了关闭请求，并确认发送端可以开始关闭连接。 第三次挥手（FIN）：在接收到关闭请求并发送确认后，另一个端点（通常是服务器）也会开始关闭连接。它发送一个带有FIN标志的报文给发送端，表示该端点也完成了数据的发送。 第四次挥手（ACK）：接收到带有FIN标志的报文后，发送端（通常是客户端）发送一个带有ACK标志的报文给另一个端点。这个报文确认接收到了关闭请求，并表示双方的连接已经成功关闭。 四次挥手的原理和原因： 第一次挥手：发送端发送FIN报文给接收端，表示发送端已经完成了数据的发送，并希望关闭连接。 第二次挥手：接收端收到FIN报文后，发送一个ACK报文给发送端，表示已经收到关闭请求，并确认发送端可以开始关闭连接。 第三次挥手：接收端发送FIN报文给发送端，表示接收端也完成了数据的发送，并准备关闭连接。 第四次挥手：发送端收到FIN报文后，发送一个ACK报文给接收端，表示接收到关闭请求，并确认双方的连接已经成功关闭。 为什么需要四次挥手： 因为TCP是全双工的协议，允许数据在两个方向上同时传输。因此，关闭连接需要双方都完成数据的传输和关闭操作。 第三次挥手是为了确保接收端可以完成数据的传输并准备关闭连接，同时发送一个FIN报文。 第四次挥手是为了发送端确认接收到关闭请求并进行最后的确认，同时发送一个ACK报文。 为什么不是三次挥手： TCP连接的终止需要一个额外的步骤来保证数据完整性和可靠性。因此，四次挥手是为了正确关闭连接而设计的。 第三次挥手（FIN）是为了客户端通知服务器已经准备好关闭连接，并停止发送数据。 第四次挥手（ACK）是为了服务器确认客户端的关闭请求，并通知客户端自己也准备关闭连接。 这样，双方都能确认彼此的关闭意图，并进行必要的数据传输和状态清理。 通过四次挥手，双方可以彼此确认关闭连接的意图，并完成最后的数据传输和状态清理，确保连接的正确关闭。 总结： TCP四次挥手是为了可靠地关闭连接而设计的。它确保双方在关闭连接时能够完成数据的传输和状态的清理，以提供可靠的连接关闭过程。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:6","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是SYN、ACK、FIN？ SYN报文（同步报文） ： SYN报文是由发起连接的一方（通常是客户端）发送的。 它用于建立连接，表示客户端请求建立连接，并在报文的TCP头部中携带一个初始序列号（ISN）。 SYN报文的主要作用是告知对方自己希望建立连接，并通过ISN提供一个起始点，以便在数据传输中对字节进行编号。 ACK报文（确认报文） ： ACK报文可以单独存在，也可以与其他标志（如SYN、FIN）组合使用。 它用于确认接收到的数据，表明对方已经正确接收到了之前的数据，并可以继续发送下一段数据。 在三次握手过程中的第二次握手中，ACK报文用于确认接收到了对方发送的SYN报文，并表示同意建立连接。 ACK报文在建立连接后的数据传输中也起着重要的作用，用于确认接收到的数据，并保持双方的数据传输同步。 FIN报文（结束报文） ： FIN报文是由一方（通常是发起关闭的一方）发送的。 它用于关闭连接，表示发送方不再发送数据，并请求关闭连接。 FIN报文的发送方通常已经完成了数据的发送，并且希望关闭连接。 总结： SYN报文用于请求建立连接，并携带初始序列号（ISN），而ACK报文用于确认接收到的数据，保持数据传输的同步和可靠性。它们在TCP连接的建立过程中起着关键的作用，确保双方能够正确建立连接并进行数据传输。FIN报文用于关闭TCP连接，发送方发送FIN报文表示完成了数据的发送并请求关闭连接，接收方发送FIN报文表示自己也完成了数据的发送。通过FIN报文的交换，双方能够协调关闭连接的过程，并确保连接的正确关闭。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:7","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"HTTP与HTTPS HTTP（Hypertext Transfer Protocol）和HTTPS（Hypertext Transfer Protocol Secure）是两种常用的协议。它们在安全性和数据传输方面有以下区别： HTTP（Hypertext Transfer Protocol） ： HTTP是一种无状态的协议，它用于在Web服务器和客户端之间传输超文本内容。 HTTP在传输数据时使用明文（未加密），因此数据可以被窃听和篡改。 HTTP使用TCP作为传输协议，使用默认端口号80。 HTTP请求和响应的内容通常是明文的，包括URL、请求头、响应头和消息体等。 HTTP不提供数据的加密和身份验证，因此对于涉及敏感信息的网站，如登录、支付等，存在安全风险。 HTTPS（Hypertext Transfer Protocol Secure） ： HTTPS是基于HTTP的安全协议，通过使用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议进行加密和身份验证来保护数据传输的安全性。 HTTPS使用TCP作为传输协议，使用默认端口号443。 HTTPS通过使用公钥加密和私钥解密的方式来加密通信内容，确保数据在传输过程中的机密性。 HTTPS使用数字证书来验证服务器的身份，并确保与服务器建立的连接是可信的。 HTTPS可以有效地防止数据被窃听和篡改，提供了更高的安全性。 区别总结： HTTP是无状态的协议，数据传输不加密，容易被窃听和篡改。HTTPS是基于HTTP的安全协议，通过加密和身份验证保护数据传输的安全性。 HTTP使用默认端口号80，HTTPS使用默认端口号443。 HTTP传输的数据是明文的，而HTTPS传输的数据经过加密。 HTTP不提供身份验证机制，HTTPS使用数字证书来验证服务器的身份。 HTTPS在安全性方面比HTTP更可靠，适用于对数据传输安全性要求较高的场景，如登录、支付等涉及敏感信息的网站。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:8","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["kubernetes"],"content":"在完成柔性计算项目的过程中，总结request在kubernetes中的各种作用。如有不正确的地方或者有补充的点，欢迎联系我。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:0:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request出现之处 在 Kubernetes 中，Pod 是最小的可调度的部署单元。Pod 包含一个或多个容器，共享相同的网络命名空间和卷存储空间。在 Kubernetes 中，Pod 用来承载应用程序，并提供资源的抽象。Pod 中的 requests 字段是用来定义容器需要的最小计算资源的，主要包括 CPU 和内存。 requests 字段可以在 Pod 级别或容器级别设置。在 Pod 级别设置 requests 字段可以确保所有容器都具有相同的资源要求。在容器级别设置 requests 字段可以确保每个容器都有特定的资源要求。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:1:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用分析 为Pod设置request之后，其会在 Kubernetes 的Scheduler、Kubelet中发挥作用。下面进行详细分析。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Scheduler 当Pod设置中设置了request Scheduler在调度Pod到合适节点的过程中，会经过预选和优选两个阶段，其中会有各种各样的检查和评分策略，以为Pod找到最适合它的节点。在预选过程中有一个策略叫 NodeResourcesFit ，其作用是检查节点是否拥有Pod 请求的所有资源。实现的扩展点有preFilter、filter、score。其中的重点是 filter 的过程。 filter 过程Scheduler是如何实现的呢？它首先获取到集群中所有节点，然后检查节点是由有满足Pod请求的最小资源(既是节点的剩余可用资源是否大于Pod中设置的request)，如果不满足，则过滤掉当前节点。在计算节点的剩余可用资源时，Scheduler统计运行在节点上的每一个Pod的request，并把它们累加，如果 podRequest.MilliCPU \u003e (nodeInfo.Allocatable.MilliCPU - nodeInfo.Requested.MilliCPU)，那么该节点将会被过滤(这里以CPU举例，检查Memory是否满足要求也是同样的方法)。 当Pod未设置request Pod中未设置request时，Scheduler则认为Pod需要的最小计算资源为0，认为此Pod可以运行在任意一个节点上。故此时Scheduler不再对节点进行过滤和评分，而时把Pod调度到随机的节点上。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:1","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Kubelet 当Pod被调度成功之后，对应节点上的Kubelet会创建、运行、管理这个Pod。Kubelet管理节点上所有Pod的生命周期。当节点上所有Pod的request资源之和大于等于节点的Allocatable资源时，kubelet不创建最后一个被调度到此节点的Pod，并将最后一个被调度到此节点的Pod状态设为 OutOfcpu 或者 OutOfmemory。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:2","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"记录在验证kubelet压力驱逐原则时的遇到的问题与解决方法。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:0:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"验证节点压力驱逐原则时，实验结果与官方文档给出的规则相反 kubernetes的官方文档中给出，当节点内存资源紧张时，会根据以下的三条规则驱逐节点上的pod以回收内存资源，缓解内存资源压力： 先根据pod的内存使用量是否超过其request进行排序，超过的排在前面； 再根据pod的priority值大小进行排序，值小的排在前面； 最后根据pod内存request减去pod的实际内存使用量的值，得到值较小的排在前面； 我的集群环境： 三台基于Centos7.6操作系统的虚拟机 kubernetes版本1.23.0 未更改kubelet原本的配置文件 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验过程 自定义三个low、mid、high优先级类，在节点node1上部署两个pod，内存资源使用量大的pod而优先级高，内存使用量小的pod而优先级低。待他们运行稳定之后，再部署一个抢占node1内存资源的pod造成节点内存资源不足而触发驱逐，观察kubelet先驱逐哪一个pod。（**注意：**上述两个测试用的pod均没有设置request，故他们的request为0，驱逐的顺序由第2和第3点决定；同时保证抢占内存的pod不会被先驱逐） ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:1","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验结果 使用命令 kubectl get pods -n example -w 观察pod的状态（实验时上面的pod都在example的namespace下）。最终是优先级高的pod先被驱逐，并且它的状态直接是error，并没有出现evicted的状态。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:2","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"结果分析 显然上面的实验结果比不符合kubernetes文档给出的规则，在查阅kubelet源码之后也发现上面的实验结果有误。接着去查看node1上kubelet的配置，发现其节点剩余可用内存剩余小于100Mi时才触发驱逐，并且驱逐时pod的最大宽限期是0秒，这可能导致节点内存资源紧张时pod直接被kubelet kill掉，从而pod的状态直接变成error。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:3","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"思路验证 修改kubelet配置 进入到node1，使用命令打开 vim /var/lib/kubelet/config.yaml kubelet的配置文件，添加以下字段： evictionMaxPodGracePeriod: 60 evictionHard: memory.available: \"800Mi\" 上面是设置kubelet驱逐pod时，给pod的最大宽限期是60秒，当节点剩余可用内存小于800Mi时触发驱逐。然后使用命令 systemctl restart kubelet 重启节点上的kubelet，重新实验。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:4","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"二次实验与结果 同样按照一次实验时的实验步骤再次实验，观察哪一个pod先被驱逐。 这次实验时低优先级且内存使用量较小的pod先被驱逐，得到了正确的实验结果。故确实是因为kubelet默认的产生驱逐的阈值太高而导致出现错误的实验结果，当把kubelet内存的驱逐阈值调低即得到了正确的结果。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:5","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"在kubernets项目中多次使用到了docker的相关指令，特在此记录。 Docker 基本命令的使用方法 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:0:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像的拉取、上传和删除 搜索镜像 docker search [imageName]:[tag] 拉取镜像 docker pull [imageName]:[tag] 上传镜像 docker push [imagesName]:[tag] 删除镜像 docker rmi [镜像名]:[tag] 或 docker rmi [镜像ID] 如果删除不成功，可以在上面的删除命令后面加上参数强制删除，如： docker rmi [imageName]:[tag] --force 上述命令可以强制删除镜像，即使这个镜像正在被使用。 注意： 强制删除镜像的命令对于拥有子镜像的镜像将不会成功，除非先删除他的子镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:1:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像打包与导入 打包镜像 docker save -o [打包后的镜像名称].tar [imagesName]:[tag] 通过tar包导入镜像 docker load\u003c[打包的镜像名].tar 注意 其中的 \u003c 符号前后连接没有空格。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:2:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"docker制作镜像 docker build -t [你制作的镜像名]:[tag] . 其中的符号 . 表示Dockerfile文件在当前文件夹下，并使用其进行制作镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:3:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile 简介 什么是Dockerfile? Dockerfile是一个用来构建镜像的文本文件，里面包含了构建镜像所需的指令。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile指令介绍 FROM 所有Dockerfile指令都必须从FROM命令开始。FROM命令会指定镜像基于哪个基础镜像构建，接下来的命令也会给予这个基础镜像，FROM命令可以多 次使用，表示会创建多个镜像。 FROM \u003cimages name\u003e MAINTAINER MAINTAINER命令用于指定该镜像的作者。 MAINTAINER \u003cauthor name\u003e RUN RUN命令在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下： RUN \u003ccommand\u003e RUN apt-get update //这种形式使用/bin/sh环境中执行的命令 RUN [\"apt-get\", \"update\"] //这种形式直接使用系统调用exec来执行 多个命令可以用符号 \u0026\u0026 连接执行，如： RUN apt-get update \u0026\u0026 apt-get install vim ADD ADD是文件复制指令。它有两个参数和。destination是容器内的路径。source可以是URL或者是启动配置上下稳重的一个文件。语法如下： ADD \u003csrc\u003e \u003cdestination\u003e 如果源文件是主机上的zip或tar形式的压缩文件，Docker会先解压缩，然后将文件添加到镜像指定的文件。如果是URL指定的网络压缩文件则不会解压。 CMD CMD指令提供了容器启动时默认执行的命令。Dockerfile只允许使用一次CMD指令。 使用多个CMD指令会抵消之前所有的指令，只有最后一个指令生效。CMD有三种形式： CMD [\"executable\", \"paraml\", \"param2\"] CMD [\"param1\", \"param2\"] CMD command param1 param2 EXPOSE EXPOSE指定容器在运行时监听的端口。语法如下： EXPOSE \u003cport\u003e; //多个端口用空格隔开 EXPOSE 80 8080 9000 运行容器时通过参数-P(大写)即可在EXPOSE里所指定的端口映射到主机上另外的随机端口，其他容器或主机就可以通过映射后的端口与此容器通信。同时，我们也可以通过-p(小写)参数将Dockerfile中EXPOSE没有列出的端口设置成公开的。 ENTRYPOINT ENTRYPOINT：配置给容器一个可执行的命令。这意味着每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似CMD，Docker只允许一个ENTRYPOINT,多个ENTRYPOINT会抵消之前所有的ENTRYPOINT命令，只执行最后一句。其语法如下： ENTRYPOINT [\"executable\", \"param1\", \"param2\"] ENTRYPOINT command param1 param2 WORKDIR WORKDIR指定RUN、CMD和ENTRYPOINT命令的工作目录。语法如下： WORKDIR /path/to/workdir ENV ENV指令用于设置环境变量。它们使用键值对，增加运行程序的灵活性，语法如下： ENV \u003ckey\u003e \u003cvalue\u003e 以上是我本人在kubernetes项目中常用的指令，特在此记录。 另外，Dockerfile文件的理解是站在巨人的肩膀上，连接在此 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:1","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["杂记"],"content":"Markdown是一种轻量级标记语言，被广泛应用于各种场景中，如博客、论坛、文档等。Markdown的语法简单易懂，但是为了使文章格式清晰美观，还是需要按照一定的规范和格式来编写。 标题 Markdown中的标题使用 # 符号表示，一个 # 表示一级标题，两个 # 表示二级标题，以此类推，如下： 这是一级标题 一级标题 这是二级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:0:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"二级标题 这是三级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"三级标题 这是四级标题 四级标题 这是五级标题 五级标题 这是六级标题 六级标题 # 一级标题 ## 二级标题 ### 三级标题 文本样式 Markdown中可以使用如下方式来修改文本样式： 加粗：使用两个 * 符号或者两个 __ 符号包含文本。 **加粗文字** 或者 __加粗文字__ 斜体：使用一个 * 符号或者一个 _ 符号包含文本。 *斜体文字* 或者_斜体文字 删除线：使用两个 ~~ 符号包含文本。 ~~删除线文字~~ 列表 Markdown支持有序列表和无序列表两种，有序列表使用数字和 . 符号表示，无序列表使用 - 符号或者 * 符号表示。如下： 无序列表 - 无序列表1 - 无序列表2 - 无序列表3 有序列表 有序列表1 有序列表2 有序列表3 1. 有序列表1 2. 有序列表2 3. 有序列表三 链接和图片 Markdown中插入链接和图片的语法类似，都是使用中括号和小括号组合表示。其中，中括号内是链接或图片的描述，小括号内是链接或图片的地址。如下： 链接： 示例链接：百度链接 [链接描述](链接地址) 图片 示例图片： ![图片描述](图片地址) 代码块 如果需要插入一段代码，可使用 `` 符号包含代码，也可以使用 `````` 符号包含多行代码。如下： 一行代码 `code` 多行代码 code1 code2 code3 引用 Markdown中使用 \u003e 符号表示引用，可以嵌套使用。如下： 引用示例1 引用示例2 引用示例3 \u003e 引用1 \u003e\u003e 引用2 \u003e\u003e\u003e 引用3 分割线 Markdown中使用三个或者更多的 - 或者 * 符号表示分割线后可以有空格。如下： 分割线示例1 分割先示例2 --- 或 *** 以上就是Markdown编写文章的一些基本的规范和格式，可以根据需要进行调整。 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:1","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"}]