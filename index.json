[{"categories":["LeetCode"],"content":"总结一下今天刷栈类题目的思路或学到的思路。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:0:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"有效的括号 给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串 s ，判断字符串是否有效。有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:1:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 这是道简单题，直接用栈就可解决。遍历括号序列，如果是左括号，就加入到栈中，如果遇到右括号，则弹出栈顶的括号，如果不i配，可直接返回false；以此类推，遍历完这个序列。 时间复杂度：遍历一遍括号序列，故为O(N)； 空间复杂度：最坏情况下，序列的最后一个字符为右括号，其余全为左括号，栈中存储了N - 1个括号，故为O(N)； ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:1:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"最小栈 设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。实现MinStack类： MinStack() 初始化堆栈对象。 void push(int val) 将元素val推入堆栈。 void pop() 删除堆栈顶部的元素。 int top() 获取堆栈顶部的元素。 int getMin() 获取堆栈中的最小元素。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:2:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 就是实现一个栈嘛。采用单向链表的方式实现，其中栈的先进先出特性，可对链表采用头插法实现。链表带头节点，每次插入一个元素时，就将节点插入到头节点的后面。 实现过程 class Node { public: int val; Node* next; Node(int value) : val(value) { next = nullptr; } }; class MinStack { Node* head; public: MinStack() { head = new Node(INT_MAX); } void push(int val) { head-\u003eval = min(val, head-\u003eval); Node* p = new Node(val); p-\u003enext = head-\u003enext; head-\u003enext = p; } void pop() { Node* temp = head-\u003enext; head-\u003enext = temp-\u003enext; if (head-\u003eval == temp-\u003eval) { head-\u003eval = INT_MAX; Node* p = head-\u003enext; while (p) { head-\u003eval = min(head-\u003eval, p-\u003eval); p = p-\u003enext; } } delete temp; } int top() { if (head-\u003enext) return head-\u003enext-\u003eval; else return -1; } int getMin() { return head-\u003eval; } }; /** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj-\u003epush(val); * obj-\u003epop(); * int param_3 = obj-\u003etop(); * int param_4 = obj-\u003egetMin(); */ ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:2:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"每日温度 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。 ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:3:0","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"思路 采用单调栈解决，栈中的元素有序。使用一个栈来记录当前遇到的最高温度。当栈为空时，当前元素的坐标入栈；若当前元素小于栈顶元素，则将当前元素的坐标入栈；当栈不为空且栈顶元素小于当前元素时，更新栈顶元素对应的答案 ans[s.top()] = i - s.top() ；然后弹出栈顶元素，更新新栈顶元素对应的答案，直到栈为空，最后将当前元素的坐标入栈。 实现过程 class Solution { public: vector\u003cint\u003e dailyTemperatures(vector\u003cint\u003e\u0026 temperatures) { stack\u003cint\u003e stk; int len = temperatures.size(); vector\u003cint\u003e ans(len); fill(ans.begin(), ans.end(), 0); for (int i = 0; i \u003c len; i++) { while (!stk.empty() \u0026\u0026 temperatures[i] \u003e temperatures[stk.top()]) { ans[stk.top()] = i - stk.top(); stk.pop(); } stk.push(i); } return ans; } }; 时间复杂度：遍历一遍 nums 数组，故为O(N)； 空间复杂度：最坏情况下每日温度为递减序列，栈中存储了所有元素，故为O(N); ","date":"2024-01-19","objectID":"/leetcode-%E6%A0%88/:3:1","tags":["栈"],"title":"LeetCode 栈","uri":"/leetcode-%E6%A0%88/"},{"categories":["LeetCode"],"content":"今天刷的专题是回溯，对于回溯这块，比较陌生，这里记录一下一些题的思路以及大神总结的回溯题思路。 回溯算法 回溯算法是一种在搜索空间中寻找解的算法。它采用试错的思想，尝试分步地去解决一个问题。在求解过程中，当发现当前的分步答案不能得到正确的解时，就取消上一步或几步的计算，并进行新的尝试。 回溯算法通常应用于组合问题、排列问题、选择问题等。它的基本思路是：从第一个可能的动作开始搜索，每当搜索到一个状态时，先判断这个状态是否满足问题的约束条件，如果满足约束条件，则进入下一个状态继续搜索；如果不满足约束条件，则返回上一个状态，进行其他可能的动作。这个过程就像在一个树形结构中遍历所有的节点，因此回溯算法也被称为“试探法”。 怎样写回溯算法？ 画出递归树，找到状态变量(回溯函数的参数) 根据题意，确立结束条件 找准选择列表(与函数参数相关)，与第一步紧密关联 判断是否需要剪枝 做出选择，递归调用，进入下一层 撤销选择 遇到回溯算法相关的题目，可根据这个步骤思考，得到最终的实现代码。 注意 由于下面的题都是关于回溯算法的，故思路都是差不多的，只是条件不一样，重点是结合上面的过程和下面的实现代码强化对这类题的思考，对这类题形成一种思路而不是束手无措。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:0:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"全排列 给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:1:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 采用由深度优先搜索改造成的回溯函数，先一步步“试错”，找到最终答案，然后撤销选择，遍历完整个状态空间。 实现过程 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e \u0026 ans,vector\u003cint\u003e\u0026nums, int start, int length){ // 递归结束条件，遍历到nums中的最后一个元素 if(start == length){ ans.push_back(nums); return; } // 选择列表为未出现过的元素，这里由于是全排列问题，生成的状态都是有可能的，故不需要剪枝 for(int i = start;i \u003c length; i++){ // 试错，然后进入下一层递归 swap(nums[i], nums[start]); backTrack(ans, nums, start + 1, length); // 撤销选择 swap(nums[i], nums[start]); } } vector\u003cvector\u003cint\u003e\u003e permute(vector\u003cint\u003e\u0026 nums) { vector\u003cvector\u003cint\u003e\u003e ans; backTrack(ans, nums, 0, nums.size()); return ans; } }; 时间复杂度：O(N*N!)； 空间复杂度：全排列问题需要遍历到最后一个元素，故为O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:1:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"子集 给你一个整数数组 nums ，数组中的元素互不相同。返回该数组所有可能的子集（幂集）。解集不能包含重复的子集。你可以按任意顺序返回解集。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:2:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 采用回溯算法，递归树中使用一个参数 start，来标识当前的选择列表的起始位置。标识每一层的状态，然后start + 1，进入下一层的递归，直到找到所有子集。 实现代码 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e\u0026ans, vector\u003cint\u003e\u0026nums, vector\u003cint\u003e\u0026path, int start){ // 此题特殊，找到的所有状态都是答案，故均需要加入到ans中； ans.push_back(path); for(int i = start; i \u003c nums.size();i++){ // 当前路径中加入 nums[i]，生成下一个子集 path.push_back(nums[i]); backTrack(ans, nums, path, i + 1); // 撤销选择，删除加入的nums[i]; path.pop_back(); } } vector\u003cvector\u003cint\u003e\u003e subsets(vector\u003cint\u003e\u0026 nums) { vector\u003cvector\u003cint\u003e\u003e ans; vector\u003cint\u003epath; backTrack(ans,nums, path, 0); return ans; } }; 时间复杂度：一共是2N个状态，每个状态的构建需要O(N)，故总的为O(N*2N)； 空间复杂度：使用了一个数组存储路径，故为O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:2:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"组合总和 给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。 candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 对于给定的输入，保证和为 target 的不同组合数少于 150 个。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:3:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 套用上面总结的回溯模板，找到、找准结束条件，选择列表即可。 实现过程 class Solution { public: void backTrack(vector\u003cvector\u003cint\u003e\u003e\u0026 ans, vector\u003cint\u003e\u0026nums, vector\u003cint\u003e \u0026path, int start, int sum, int target){ // 结束条件 =\u003e 当前元素和 sum == target if(sum == target){ ans.push_back(path); return; } for(int i = start;i \u003c nums.size();i++){ // 剪枝操作，若当前 sum + nums[i] \u003e target ，则说明其下一层的子状态都不是解，故不需要再进入下一层递归 if(sum + nums[i] \u003e target) continue; // 路径中加入当前元素值nums[i]，进入下一层递归 path.push_back(nums[i]); backTrack(ans, nums, path, i, sum + nums[i], target); // 撤销选择 path.pop_back(); } } vector\u003cvector\u003cint\u003e\u003e combinationSum(vector\u003cint\u003e\u0026 candidates, int target) { vector\u003cvector\u003cint\u003e\u003e ans; vector\u003cint\u003epath; backTrack(ans, candidates,path, 0, 0, target); return ans; } }; 时间复杂度：O(N)，N为所有可行解的长度之和。搜索递归树的时间复杂度取决于搜索树所有叶子节点的深度之和，即所有可行解的长度之和； 空间复杂度：最坏情况下，target 由 target 个 1 组成，需要递归 O(target)层，故为O(target)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:3:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"括号生成 数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 实现过程 class Solution { public: void backTrack(vector\u003cstring\u003e\u0026ans, string cur, int left, int right, int len){ // n 对括号序列的长度为 2 * n，若当前字符串的长度为 2 * len，则其为问题的解之一 if(len * 2== cur.size()){ ans.push_back(cur); return; } // 左括号数量没有达到 len 时，可以继续生成左括号，然后递归 if(left \u003c len){ cur.push_back('('); backTrack(ans,cur, left + 1, right, len); cur.pop_back(); } // 若左括号数量为 n 之后，右括号数量不够，则生成右括号 if(right \u003c left){ cur.push_back(')'); backTrack(ans,cur, left, right + 1, len); cur.pop_back(); } } vector\u003cstring\u003e generateParenthesis(int n) { vector\u003cstring\u003eans; string cur = \"\"; backTrack(ans,cur,0,0,n); return ans; } }; 时间复杂度：O(22*N * N); 空间复杂度：需要的空间取决于递归栈的深度，每一层递归函数需要 O(1) 的空间，最多递归 2*N 层，因此空间复杂度为 O(N)； ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:4:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"分割回文串 给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。回文串 是正着读和反着读都一样的字符串。 实现过程 class Solution { vector\u003cvector\u003cstring\u003e\u003e ans; vector\u003cstring\u003e path; void backTrack(const string\u0026 s, int start) { // 所有字符都划分完成，达到结束条件 if (start \u003e= s.size()) { ans.push_back(path); return; } for (int i = start; i \u003c s.size(); i++) { // 如果当前划分的字串是回文的，则将其进一步划分 if (isPlalindrome(s, start, i)) { string temp = s.substr(start, i - start + 1); path.push_back(temp); backTrack(s, i + 1); } else continue; path.pop_back(); } } // 判断是否是回文，双指针 bool isPlalindrome(const string\u0026 s, int i, int j) { while (i \u003c j) { if (s[i++] != s[j--]) return false; } return true; } public: vector\u003cvector\u003cstring\u003e\u003e partition(string s) { ans.clear(); path.clear(); backTrack(s, 0); return ans; } }; ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:5:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"复原IP地址 有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。 例如：“0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、“192.168.1.312” 和 “192.168@1.1” 是 无效 IP 地址。 给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。 ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:6:0","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"思路 复原IP地址的思路与分割回文串的思路一致，都是分割，但是这里的回溯结束条件是子串中划分成了四个部分，既有三个’.’； 实现过程 class Solution { vector\u003cstring\u003eans; void backTrack(string \u0026s, int start, int point){ if(point == 3){ if(isLegal(s,start, s.size() - 1)) ans.push_back(s); return; } for(int i = start; i \u003cs.size();i++){ if(isLegal(s, start, i)){ s.insert(s.begin() + i + 1, '.'); backTrack(s, i + 2,point + 1); s.erase(s.begin() + i + 1); }else break; } } bool isLegal(string\u0026s, int left, int right){ if(left \u003e right) return false; if(s[left] == '0' \u0026\u0026 left != right) return false; int num = 0; for (int i = left; i \u003c= right; i++) { if (s[i] \u003e '9' || s[i] \u003c '0') { return false; } num = num * 10 + (s[i] - '0'); } if (num \u003e 255) return false; return true; } public: vector\u003cstring\u003e restoreIpAddresses(string s) { ans.clear(); if(s.size() \u003c 4 || s.size() \u003e 12) return ans; backTrack(s,0,0); return ans; } }; ","date":"2024-01-16","objectID":"/leetcode-%E5%9B%9E%E6%BA%AF/:6:1","tags":["回溯"],"title":"LeetCode 回溯","uri":"/leetcode-%E5%9B%9E%E6%BA%AF/"},{"categories":["LeetCode"],"content":"小结一下今天刷到的关于堆的题目。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:0:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"数组中的第K个最大元素 给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。你必须设计并实现时间复杂度为 O(n) 的算法解决此问题。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:1:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 这道题中说明了，不用考虑重复元素，若需要考虑重复元素时，使用哈希表去重即可。维护一个容量为 K 的小根堆(优先队列 priority_queue )，先将前 K 个元素放入堆中，然后遍历整个数组，将每个元素与堆顶元素比较，若其大于堆顶元素，则弹出堆顶元素，并将当前的元素入堆；遍历完之后，对顶元素既是第 K 大的元素。 实现代码 class Solution { public: int findKthLargest(vector\u003cint\u003e\u0026 nums, int k) { priority_queue\u003cint, std::vector\u003cint\u003e, std::greater\u003cint\u003e\u003e q; int length = nums.size(); int i = 0; for(;i \u003c k;i++){ q.push(nums[i]); } for(;i \u003c length;i++){ if(nums[i] \u003c q.top()) continue; q.push(nums[i]); q.pop(); } return q.top(); } }; 时间复杂度：维护一个大小为 K 的堆，最坏情况下，数组中的元素为升序排列，故为O(NlogN)； 空间复杂度：使用大小为 K 的堆，故为O(K); ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:1:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"前 K 个高频元素 给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:2:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 先用哈希表记录各个元素出现的次数，然后将这些记录对加入到一个vector中，以出现次数进行排序，倒数 K 个记录对即为前 K 个高频单词。 实现代码 class Solution { public: vector\u003cint\u003e topKFrequent(vector\u003cint\u003e\u0026 nums, int k) { unordered_map\u003cint, int\u003e times; for (auto e : nums) times[e]++; vector\u003cpair\u003cint, int\u003e\u003etemp; for(auto \u0026 it : times){ pair\u003cint, int\u003e t(it.second, it.first); temp.push_back(t); } sort(temp.begin(), temp.end()); vector\u003cint\u003e ans; for(int i = temp.size() - 1;k \u003e 0;i--,k--){ ans.push_back(temp[i].second); } return ans; } }; 注意，在ACM模式下，使用pair需要加头文件 #include \u003cutility\u003e. ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:2:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。返回 滑动窗口中的最大值 。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:3:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 这道题可以说是考察大根堆的运用，采用大根堆存储遍历到的元素，若堆顶元素的下标大于或等于窗口的左边界，那么这个值就是窗口内的最大值，否则弹出堆顶元素，继续判断。依此类推，遍历完整个数组，即可找打窗口中的所有最大值。 实现代码 class Solution { public: vector\u003cint\u003e maxSlidingWindow(vector\u003cint\u003e\u0026 nums, int k) { priority_queue\u003cpair\u003cint ,int\u003e\u003e q; int i = 0; int length = nums.size(); for(;i \u003c length, k \u003e 0; i++, k--){ q.push(make_pair(nums[i], i)); } vector\u003cint\u003eans; ans.push_back(q.top().first); int left_margin = 1; for(;i \u003c length;i++){ q.push(make_pair(nums[i], i)); while(q.top().second \u003c left_margin) q.pop(); ans.push_back(q.top().first); left_margin++; } return ans; } }; 时间复杂度：最坏情况下，数组 nums 中的元素单调递增，最终大根堆中没有元素被移除。由于将一个元素放入堆的时间复杂度为 O(logN)，因此总时间复杂度为 O(NlogN); 空间复杂度：采用了大根堆存储遍历到的元素，故为O(N)； ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:3:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"数据流的中位数 中位数是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。 例如 arr = [2,3,4] 的中位数是 3 。 例如 arr = [2,3] 的中位数是 (2 + 3) / 2 = 2.5 。 实现 MedianFinder 类: MedianFinder() 初始化 MedianFinder 对象。 void addNum(int num) 将数据流中的整数 num 添加到数据结构中。 double findMedian() 返回到目前为止所有元素的中位数。与实际答案相差 10-5 以内的答案将被接受。 ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:4:0","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"思路 使用两个优先队列，一个是大根堆，一个是小根堆。大根堆存储输入数据中较小的一半数据，小根堆存储输入数据中较大的一半数据。插入数据时，若两个堆的元素个数一致，先插入到小根堆中，否则，插入到大根堆。当两个堆中的元素个数相同时，中位数就是两个堆对顶元素之和的一半；不相同时，中位数就是小根堆中的堆顶元素。 实现过程 class MedianFinder { priority_queue\u003cint, vector\u003cint\u003e, greater\u003cint\u003e\u003e min_heap; priority_queue\u003cint\u003e max_heap; public: MedianFinder() {} void addNum(int num) { if (min_heap.size() == max_heap.size()) { max_heap.push(num); min_heap.push(max_heap.top()); max_heap.pop(); } else { min_heap.push(num); max_heap.push(min_heap.top()); min_heap.pop(); } } double findMedian() { if (min_heap.size() != max_heap.size()) return min_heap.top(); else return (max_heap.top() + min_heap.top()) / 2.0; } }; /** * Your MedianFinder object will be instantiated and called as such: * MedianFinder* obj = new MedianFinder(); * obj-\u003eaddNum(num); * double param_2 = obj-\u003efindMedian(); */ 注意 使用优先队列大小根堆时，要先引入头文件 queue ,同时，使用priority_queue默认是大根堆，使用小根堆时，需要这样写 #include\u003cqueue\u003e // 优先队列要引入这个头文件 priority_queue\u003cint, vector, greater\u003e name // 小根堆的写法 时间复杂度：查找中位数的时间为O(1)，直接访问对顶元素即可；添加/删除 num 的时间为O(logN)，故为O(logN)； 空间复杂度：存储了所有 num ，故为O(N)； ","date":"2024-01-15","objectID":"/leetcode-%E5%A0%86/:4:1","tags":["堆"],"title":"LeetCode 堆","uri":"/leetcode-%E5%A0%86/"},{"categories":["LeetCode"],"content":"小结一下今天LeetCode上关于图论的几道题。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:0:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"岛屿数量 给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:1:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 本质就是考察图的深度优先遍历，遍历图中的每个点，如果是'1’，则对其进行dfs，最后统计外层循环里调用了几次dfs，即可得知图中有几个岛屿。 时间复杂度：遍历完整个图，故为O(MN)； 空间复杂度：dfs采用递归实现，最坏情况下整个图为陆地，故为O(MN)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:1:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"腐烂的橘子 在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一： 值 0 代表空单元格； 值 1 代表新鲜橘子； 值 2 代表腐烂的橘子； 每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:2:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 先统计一下新鲜水果和坏水果的数量，如果没有新鲜水果和坏水果，则可直接返回0； 令count = 3；则第一次腐烂的水果为 count - 1 = 2；将在第一分钟内被感染成腐烂的水果的值置为 count ，然后 count++ ，那么第二分钟内腐烂的水果为count - 1 = 3。此时不用再处理值为2的腐烂水果，因为其已经被第一感染腐烂的水果包围了，不能再感染新鲜水果。再将第二分钟感染成腐烂的水果的值置为 count ，然后 count++。以此类推，直到没有新鲜水果被感染时，即可返回结果； 最终返回时，若没有未被感染的新鲜水果，则返回 count - 4 ，既是所需的最小时间；若有未被感染的新鲜水果，就返回 -1. 时间复杂度：设所需的最小时间为t，则上述过程中遍历了 t + 1 次网格，最坏情况下 t = M，故为O(M2N)； 空间复杂度：使用了常数个临时变量，故为O(1)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:2:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"课程表 你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。 例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。 ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路一 构造一个 numCourses * numCourses 的bool类型图 matrix ，若修读课程 j ，时需先修读课程 i ，那么 matrix[i][j] = true ，表示从 i 指向 j ，i 是 j 的先驱节点。遍历每一个课程对，将 matrix 中对应的值设为 true 。若 i、j、k 中存在这样的关系：i \u003c- j \u003c- k ，那么将 matrix[k][j] 设为 true 之后， 也需要将 matrix[k][i] 设为 true 。最后，遍历 matrix ，若存在 matrix[i][j] == matrix[j][i] ，则说明这两个点成环，可直接返回 false；遍历完之后，未找到上述的情况，返回 true 。 时间复杂度：设 M 为 prerequisites 的长度，matrix 为 N * N 的矩阵，最坏情况下为O(N2)； 空间复杂度：建立了 matrix 作为邻接矩阵，故为O(N2)； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路二 换种角度思考，若课程可以修读完成，则图中没有环，则可说明图中存在拓扑序列。所以可以把课程对当前边，对这个图进行拓扑排序，若得到的拓扑序列中节点的数量等于 numCourses ，则说明图中没有环，课程可以正常修读完成，否则说明图中有环，课程不可以正常修读完成。 拓扑序列的模板代码 class Solution { public: bool canFinish(int numCourses, vector\u003cvector\u003cint\u003e\u003e\u0026 prerequisites) { // matrix 相当于邻接表，存储图中的边； vector\u003cint\u003e matrix[numCourses]; // in_degree 记录每个顶点的入度； vector\u003cint\u003e in_degree(numCourses, 0); // 计算各边的入度； for (auto\u0026 e : prerequisites) { matrix[e[1]].push_back(e[0]); in_degree[e[0]]++; } // 辅助队列q，用以实现拓扑排序，用栈也可； queue\u003cint\u003e q; // 找到第一个入度为零的顶点，并加入到队列中； for (int i =0;i\u003cnumCourses;i++) { if (!in_degree[i]) q.push(i); } // 进行拓扑排序， 用 count 统计序列中顶点的数量； int count = 0; while (!q.empty()) { int idx = q.front(); q.pop(); count++; for (auto\u0026 i : matrix[idx]) { // 若入度减一之后为零，将其加入到队列中； if (--in_degree[i] == 0) q.push(i); } } return count == numCourses; } }; 这段代码为拓扑排序的模板的代码，贴这供以后学习用~~ 时间复杂度：对图中的边均进行了两次遍历，同时访问了一次入度数组，故为O(M + N)； 空间复杂度：存储了图中的边及入读，故为O(M + N); ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:3:2","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"实现Trie(前缀数) Trie（发音类似 “try”）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。请你实现Trie()类： Trie() 初始化前缀树对象； void insert(String word) 向前缀树中插入字符串 word ； boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false ； boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false ； ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:4:0","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"思路 首先什么是 前缀树 ？ 前缀数，顾名思义就是前缀形成树，也称为字典树，是一种用于高效存储和检索字符串的数据结构。它的主要特点是将输入的字符串拆分成字符序列，并通过字符之间的关联关系来组织和表示这些字符串。例如在百度中输入C++，会出现一大堆联想词语，都是以C++作为前缀的词语。前缀树的基本思想是利用共同的前缀来减少存储空间和搜索时间。它以树状结构存储字符序列，从根节点开始，每个节点代表一个字符，节点之间通过指针连接形成树的结构。从根节点到每个叶子节点的路径都代表一个完整的字符串。（注意根节点不存储字符） 前缀数的结构？ 在前缀树中，一个节点一般包含两个部分： 字符结尾标志，表示当前字符是否是字符串的结尾； 子节点指针：指向当前节点的子节点，通常使用数组或哈希表来存储多个子节点，其中数组或哈希表的大小取决于字符集的大小。 前缀数操作的实现？ 插入操作：将一个字符串插入前缀树的过程是逐个字符进行的。从根节点开始，根据每个字符找到对应的子节点（如果不存在就创建一个），然后继续处理下一个字符，直到插入完整个字符串。 搜索操作：在前缀树中搜索一个字符串时，也是逐个字符进行的。从根节点开始，根据每个字符找到对应的子节点，如果遇到空指针或者没有对应的子节点，则表示该字符串不存在于前缀树中。 前缀匹配操作：前缀树最大的优势之一是可以快速找到具有特定前缀的所有字符串。从根节点开始，根据每个字符找到对应的子节点，直到达到前缀的最后一个字符。然后，可以通过遍历子树或使用深度优先搜索等方法，获取所有以该前缀开头的字符串。 删除操作：删除一个字符串时，需要从前缀树中将其对应的节点递归地删除。如果删除节点后导致其父节点成为叶子节点且没有其他子节点，则可以进一步删除该父节点，以此类推，直到遇到一个非叶子节点或者有其他子节点的节点。 实现代码(不包含删除操作) class Trie { bool isEnd; Trie* next[26]; public: Trie() { isEnd = false; for(auto \u0026 e : next) e = nullptr; } void insert(string word) { Trie* cur_node = this; for (auto ch : word) { if (cur_node-\u003enext[ch - 'a'] == nullptr) { cur_node-\u003enext[ch - 'a'] = new Trie(); } cur_node = cur_node-\u003enext[ch - 'a']; } cur_node-\u003eisEnd = true; } bool search(string word) { Trie* cur_node = this; for (auto ch : word) { cur_node = cur_node-\u003enext[ch - 'a']; if (cur_node == nullptr) return false; } return cur_node-\u003eisEnd; } bool startsWith(string prefix) { Trie* cur_node = this; for (auto ch : prefix) { cur_node = cur_node-\u003enext[ch - 'a']; if (cur_node == nullptr) return false; } return true; } }; ","date":"2024-01-14","objectID":"/leetcode-%E5%9B%BE%E8%AE%BA/:4:1","tags":["图论"],"title":"LeetCode 图论","uri":"/leetcode-%E5%9B%BE%E8%AE%BA/"},{"categories":["LeetCode"],"content":"总结一下今天刷二叉树遇到的难题和一些思路。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:0:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"从前序与中序遍历序列构造二叉树 给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:1:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路(借鉴大神) 前序遍历 =\u003e （根节点，左子树前序序列，右子树前序序列）； 中序遍历 =\u003e （左子树中序序列，根节点，右子树中序序列） 并且各序列的长度相同 先根据前序序列得到当前根节点的值(preorder[0]); 申请当前树节点, 并初始化; 如果序列长度为1, 说明这颗树只有根节点，直接返回这个节点； 查找中序序列里当前节点值(没有重复元素)，找得到两子树的序列长度； 将左子树前序序列, 右子树前序序列，左子树中序序列, 右子树中序序列创建出来； 以左子树，右子树分类，进行递归, 构造左右子树( 回到步骤1 ), 将返回结果(子树根节点)赋值给左右指针； 返回这个节点； 代码实现过程C++ class Solution { public: TreeNode* buildTree(vector\u003cint\u003e\u0026 preorder, vector\u003cint\u003e\u0026 inorder) { // 如果是一颗空树，直接返回空指针； if(!preorder.size()) return nullptr; // 申请节点并初始化 TreeNode *root = new TreeNode(); root-\u003eval = preorder[0]; root-\u003eleft = nullptr; root-\u003eright = nullptr; // 如果这棵树只有根节点，直接返回这个节点； if(preorder.size() == 1) return root; // 查找当前节点在中序序列中的位置； auto it = find(inorder.begin(), inorder.end(), preorder[0]); // //创建左子树前序序列, 右子树前序序列，左子树中序序列, 右子树中序序列； vector\u003cint\u003e pl(preorder.begin() + 1,preorder.begin() + 1 + (it - inorder.begin())); vector\u003cint\u003epr(preorder.begin() + 1 + (it - inorder.begin()), preorder.end()); vector\u003cint\u003e il(inorder.begin(), it); vector\u003cint\u003e ir(it + 1, inorder.end()); // 创建左右子树, 并将它们的根节点赋值给当前节点的指针； root-\u003eleft = buildTree(pl, il); root-\u003eright = buildTree(pr, ir); return root; } }; 这段代码的递归思路很nice，值得记录下来学习！ 时间复杂度： O(N)，N是树中的节点个数； 空间复杂度： 在创建过程中，除了答案需要的O(N)空间之外，我们还创建了左右子树的先序、中序序列，所以中的空间复杂度为o(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:1:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的最近公共祖先 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:2:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 使用后序遍历的模型，每个父节点都可以接收到两个孩子节点的状态，并把这个状态往上传递，直到该节点满足祖先节点的条件。 对二叉树进行后序遍历，如果当前节点是p或者q或者NULL，则返回当前节点； 对子节点进行遍历，获取左右孩子的状态； 若左右孩子都返回了一个非空指针，则说明当前节点是他们的最近公共祖先，返回当前节点即可；若右孩子扎到了，则返回右孩子；若左孩子找到了，则返回左孩子；否则返回NULL； 代码实现过程 class Solution { public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { if(root == p || root == q || root == NULL) return root; TreeNode* left = lowestCommonAncestor(root-\u003eleft, p, q); TreeNode* right = lowestCommonAncestor(root-\u003eright, p, q); // left 和 right都不为空，说明此时root就是最近公共节点; if(left \u0026\u0026 right) return root; // 如果left为空，right不为空，就返回right，说明目标节点是通过right返回的，反之亦然; if(!left) return right; return left; } }; 时间复杂度： 递归模型是后序遍历，最坏情况下需要遍历整棵树，故为O(N)； 空间复杂度： 递归调用栈的深度等于二叉树的高度，最坏情况下二叉树为一个链表，故为O(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:2:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的右视图 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:3:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 就是对二叉树进行层序遍历嘛，把每一层的最右个节点逐个加入到ans中即可。 时间复杂度： 遍历完整棵树，故为O(N)； 空间复杂度：使用了一个队列存储书中一层的节点，故为O(log2N); ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:3:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树的直径 给你一棵二叉树的根节点，返回该树的 直径 。二叉树的 直径 是指树中任意两个节点之间最长路径的 长度 。这条路径可能经过也可能不经过根节点 root 。两节点之间路径的 长度 由它们之间边数表示。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:4:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 easy，就是求树中节点左右孩子高度和的最大值，对求二叉树高度的代码稍加改造即可。 时间复杂度：O(N); 空间复杂度：递归栈的大小为log2N，最坏情况下，二叉树为链表，故为O(N)； ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:4:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"二叉树中的最大路径和 二叉树中的 路径 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。路径和 是路径中各节点值的总和。给你一个二叉树的根节点 root ，返回其 最大路径和 。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:5:0","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"思路 每遍历一个节点，都要求出包含该节点在内的最大路径，并且在后面的遍历中更新这个最大值。对于当前节点来说，它的最大路径和等于左右子树的最大路径加上本身的值。但是有个前提，如果左右孩子中的最大路径和小于或者等于0了，那就不需要把这个值加上去，因为它对最大路径和产生了负贡献，使得最大值变小了； 对于一个节点来说，它对最大路径和的贡献来与源于其本身的值与其左右孩子中的最大值，所以在求左右子树最大值的时候，返回其节点值与其最大的孩子值即可； 代码实现 class Solution { public: int(getMax(TreeNode* root, int \u0026ans)){ // 当前节点为空，其对最大路径和的贡献为0，故返回0； if(!root) return 0; // 求左子树的最大贡献，若左子树是负贡献，则其为0； int left_max = max(getMax(root-\u003eleft, ans), 0); // 求右子树的最大贡献，若右子树是负贡献，则其为0； int right_max = max(getMax(root-\u003eright, ans), 0); // 计算当前节点的最大路径和； int cur_max = root-\u003eval + left_max + right_max; // 更新最大路径和 ans = max(ans, cur_max); // 返回当前节点对最大路径的贡献(当前节点值 + 左右孩子中的最大值)； return root-\u003eval + max(left_max, right_max); } int maxPathSum(TreeNode* root) { int ans = INT_MIN; getMax(root, ans); return ans; } }; 时间复杂度：使用的是先序遍历的递归模型，时间复杂度为O(N)； 空间复杂度：使用了常数个临时变量，故为O(1)； 总结 关于二叉树的题，大部分都是运用递归的思想解决。使用递归时，关键是通过分析当前节点与所求值的关系，理清递归时左右孩子需不需要返回，返回时需要返回什么样的值的问题，最后再看怎么处理空节点，从而得到递归的整个边界关系，完成递归代码的编写。 ","date":"2024-01-13","objectID":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/:5:1","tags":["二叉树"],"title":"LeetCode 二叉树","uri":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"categories":["LeetCode"],"content":"今天刷了挺多链表的题，稍微总结一下思路。大部分的链表题，按照常规思路去想就可以解决，很少有特别精妙的方法。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:0:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"两数相加 给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:1:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 easy，就是用链表表示两个加数，然后将其相加。从两个链表的头部开始一个一个节点相机即可，注意一下进位就好。 时间复杂度： 遍历两个链表，故为O(N)； 空间复杂度： 新开了一个链表存储结果，所以空间复杂度为o(N); ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:1:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"K个一组翻转链表 给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。k是一个正整数，它的值小于或等于链表的长度。如果节点总数不是k的整数倍，那么请将最后剩余的节点保持原有顺序。能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:2:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 使用快慢指针，从原链表上一组一组的截取一段节点，然后将每一组节点反转、拼接起来即可。 时间复杂度：截取原链表，故需要遍历一次，在翻转的过程中遍历每一段链表，所以总的来看遍历了两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，所以空间复杂度为O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:2:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"随机链表的复制 给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:3:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 这题较难的地方是对random指针的处理，而且题中没说节点的值是唯一的，这就有可能多个节点的值都一样，造成对random的处理变得复杂。但是，同样可以运用快慢指针来解决这个问题。先遍历一遍整个链表，复制每一个节点，不管random指针先。第二次遍历时，new_list和old_list同时从头节点开始遍历，如果old_list中random为空，则new_list中random也为空；如果random不为空时，让慢指针slow和快指针fast同时指向new_list的头节点，接着从old_list中random指向的节点开始向下移动，每移动一个节点，fast也移动一个节点。当old_list移动到末尾时，slow再和fast同时一步一步的移动，当fast也走到末尾时，此时slow指向的节点刚好是对应于random指向的节点。 时间复杂度： 最坏情况为o(N2); 空间复杂度：O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:3:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"合并K个升序链表 给你一个链表数组，每个链表都已经按升序排列。请你将所有链表合并到一个升序链表中，返回合并后的链表。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:4:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 easy，就是对链表数组做K路归并排序嘛一个while循环里嵌套个for循环就可以解决。 时间复杂度： 遍历了每一个节点，故为O(KN)； 空间复杂度： 使用了常数个临时变量，故空间复杂度为O(1)； ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:4:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"LRU缓存 请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。 ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:5:0","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"思路 使用哈希表加双向链表解决。哈希表可以在O(1)时间内查找到key对应的节点。这些哈希表上的节点用双向链表表示，把这些节点用一个头节点head串成一个循环链表。head-\u003enext指向的是第一个节点，head-\u003epre指向的是尾节点。当访问一个节点或新建立一个节点时，就把这个节点放到head的后面，当容量超过capacity时，就删除掉尾节点。 代码实现 class Node { public: int key; int value; Node* pre; Node* next; Node(int k, int v) : key(k), value(v) { pre = next = nullptr; } }; class LRUCache { int capacity; unordered_map\u003cint, Node*\u003e map; Node* head; public: LRUCache(int capacity) { this-\u003ecapacity = capacity; head = new Node(0, 0); head-\u003enext = head; head-\u003epre = head; } int get(int key) { auto cur = map.find(key); if (cur == map.end()) return -1; // 将访问过的节点调到头节点后面； cur-\u003esecond-\u003epre-\u003enext = cur-\u003esecond-\u003enext; cur-\u003esecond-\u003enext-\u003epre = cur-\u003esecond-\u003epre; cur-\u003esecond-\u003enext = head-\u003enext; head-\u003enext-\u003epre = cur-\u003esecond; head-\u003enext = cur-\u003esecond; cur-\u003esecond-\u003epre = head; return cur-\u003esecond-\u003evalue; } void put(int key, int value) { auto cur = map.find(key); if (cur != map.end()) { // 节点存在时，修改器value值， 并将其调到头节点后面； cur-\u003esecond-\u003evalue = value; cur-\u003esecond-\u003epre-\u003enext = cur-\u003esecond-\u003enext; cur-\u003esecond-\u003enext-\u003epre = cur-\u003esecond-\u003epre; cur-\u003esecond-\u003enext = head-\u003enext; head-\u003enext-\u003epre = cur-\u003esecond; head-\u003enext = cur-\u003esecond; cur-\u003esecond-\u003epre = head; return; } // 节点不存在，则新间节点，加入到头节点后面； Node* node = new Node(key, value); map[key] = node; node-\u003enext = head-\u003enext; head-\u003enext-\u003epre = node; head-\u003enext = node; node-\u003epre = head; // 判断节点数量有没有达到阈值； if (map.size() \u003c= capacity) return; // 到达阈值时，删除链表最后一个节点； Node* temp = head-\u003epre; map.erase(temp-\u003ekey); temp-\u003epre-\u003enext = temp-\u003enext; temp-\u003enext-\u003epre = temp-\u003epre; delete temp; } }; /** * Your LRUCache object will be instantiated and called as such: * LRUCache* obj = new LRUCache(capacity); * int param_1 = obj-\u003eget(key); * obj-\u003eput(key,value); */ ","date":"2024-01-12","objectID":"/leetcode-%E9%93%BE%E8%A1%A8/:5:1","tags":["链表"],"title":"LeetCode 链表","uri":"/leetcode-%E9%93%BE%E8%A1%A8/"},{"categories":["LeetCode"],"content":"小结一下今天刷的关于链表的题，设计的主要知识点是快慢指针，虽然有点简单，但还是总结一下吧。 快慢指针思想 常规： 定义一个slow慢指针，一个fast快指针，慢指针走一步时，快指针走两步。当快指针走到链表尾时，慢指针刚好位于链表中点。 进阶：快指针先走N步，慢指针不动，然后快指针走一步时慢指针也走一步。当快指针到达链表尾时，慢指针刚好位于倒数第N个位置。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:0:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"环形链表 给你一个链表的头节点，判断链表中是否有环。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:1:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路： 使用快慢指针的常规做法，当一个链表中有坏时，快指针和慢指针走了n步之后走，必定在环中相遇，因为快指针每次都比慢指针多走一步。若链表中没有环，那么快慢指针则不可能相遇。 时间复杂度： 快慢指针都走了n步，时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，故空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:1:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"环形链表II 给你一个链表的头节点，判断其中是否有环，如果有环，则返回坏的起始节点，否则返回N空指针。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:2:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路： 使用快慢指针的常规做法解决。设链表中非环部分的长度为a，两指针第一次相遇时慢指针在环里走过的长度为b，环里剩下的长度为c，那么两指针第一次相遇时，有以下的关系： 2 * (a + b) = a + (n + 1) * b + n * c; 化简一下有 =\u003e a = (n - 1)(b + c) + c； 由此可以知道，当快慢指针第一次相遇后，把快指针移到头节点，然后慢指针走一步，快指针也走一步，当他们走了a步之后再次相遇时，就是刚好位于链表中环的起始位置。 时间复杂度： 相当于遍历了两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时指针，故空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:2:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"删除链表中倒数第N个节点 给你一个链表，删除链表的倒数第 n个结点，并且返回链表的头结点。 ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:0","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路一： 快慢指针的进阶用法，快指针先走n步，然后快慢指针再同时一步一步的走，当快指针到达链表尾时，慢指针刚好位于倒数第N个位置，此时对链表进行相应的操作即可。 时间复杂度： 遍历一次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:1","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"我的思路二： 先遍历一次链表，统计出链表中的节点个数，在下一次遍历中找到倒数第n个节点，将其删除。 时间复杂度： 遍历两次链表，故时间复杂度为O(N)； 空间复杂度： 使用了常数个临时变量，空间复杂度为O(1)； ","date":"2024-01-11","objectID":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/:3:2","tags":["快慢指针"],"title":"LeetCode 快慢指针","uri":"/leetcode-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/"},{"categories":["LeetCode"],"content":"小结一下今天刷的LeetCode算法题，今天刷的三道题属于矩阵方面。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:0:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"矩阵置零 给你一个m * n 的数组，如果一个元素的值为零，则将这个元素所在行列的全部元素置为零，要求使用原地算法。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:1:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 先遍历一次整个矩阵，用临时数组存储数组中值为零的元素的坐标，然后逐一把这些元素所在的行列的元素置为零。 空间复杂度 最坏情况下，矩阵中的每一个元素均为零，所需的额外空间为O(m * n)； 时间复杂度 同样是最坏情况下，对于每一个元素，据需要处理m + n个元素，所以时间复杂度为O((m + n) * m * n) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:1:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"螺旋矩阵 给你一个矩阵，按照顺时针螺旋的顺序，返回矩阵中的所有元素。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:2:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 按照顺时针螺旋的顺序，一个个返回矩阵中的元素，设置四个边界值，分别对应右-\u003e下-\u003e左-\u003e上，每输出一轮元素后(既输出一行或者一列元素后)，就更新边界值，直到输出完所有的矩阵元素。 空间复杂度 使用了几个临时变量暂存下标，故空间复杂度为O(1) 时间复杂度 遍历一次整个矩阵，故时间复杂度为O(N2); ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:2:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"旋转图像 给定一个n * n的矩阵表示一个图像，将图像进行原地顺时针旋转九十度，不可使用辅助矩阵。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:3:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 观察题目给出的样子，可以发现matrix[i][j]位置的元素旋转后的位置是[j][length -i -1]；与i、j对应的四个元素之间存在这样的关系： matrix[i][j] = matrix[length - j - 1][i] matrix[length - j - 1][i] = matrix[length - i - 1][length - j - 1] matrix[length - i - 1][length - j - 1] = matrix[j][length - i - 1] matrix[j][length - i - 1] = matrix[i][j] 发现这些关系后就不难了，把这些关系代码化，放进双重for循环里既可解决这道题。 空间复杂度 O(1) 时间复杂度O(n2) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:4:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"搜索二维矩阵 编写一个算法，看target值是否在矩阵中，矩阵的每行每列元素均是升序的。 ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:5:0","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["LeetCode"],"content":"我的思路 判断target是否可能在matrix[i]上，如果可能，则对这一行元素进行二分查找，否则判断下一行元素，直至找完整个矩阵。 空间复杂度O(1) 时间复杂度O(m*log2n) ","date":"2024-01-10","objectID":"/leetcode-%E7%9F%A9%E9%98%B5/:5:1","tags":["矩阵"],"title":"LeetCode 矩阵","uri":"/leetcode-%E7%9F%A9%E9%98%B5/"},{"categories":["计算机"],"content":"在学习完计算机网络之后，对一些常用网络协议做的梳理总结。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:0:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本常用的网络协议-简介 传输控制协议（TCP） ：TCP是一种面向连接的协议，用于在网络中可靠地传输数据。它通过提供流控制、拥塞控制、差错恢复和可靠性保证等机制来确保数据的完整性和可靠性。TCP广泛用于传输网页、电子邮件、文件传输等应用。 网际协议（IP） ：IP是一种网络层协议，负责在互联网中将数据包从源地址传输到目的地址。它定义了数据包的格式和路由选择算法。IP地址用于唯一标识网络中的设备。IP协议是互联网的核心协议，使得不同网络之间的通信成为可能。 超文本传输协议（HTTP） ：HTTP是一种应用层协议，用于在客户端和服务器之间传输超文本（如网页）和其他资源。它是Web通信的基础，通过使用URL作为资源定位符来请求和传输数据。HTTP协议通常使用TCP作为传输协议。 域名系统（DNS） ：DNS是一种用于将域名解析为IP地址的分布式数据库系统。当你在浏览器中输入一个域名时，DNS将负责将其解析为相应的IP地址，使得你可以访问该域名对应的服务器。 动态主机配置协议（DHCP） ：DHCP是一种用于自动分配IP地址和其他网络配置信息的协议。它允许计算机在加入网络时自动获取所需的网络配置，而无需手动配置。DHCP协议使得网络的管理更加灵活和高效。 文件传输协议（FTP） ：FTP是一种用于在网络中传输文件的协议。它允许用户通过FTP客户端连接到FTP服务器，并进行文件上传、下载、删除等操作。FTP可以通过TCP协议进行可靠的数据传输。 简单邮件传输协议（SMTP） ：SMTP是一种用于在网络中发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。 网际组管理协议（IGMP） ：IGMP是一种用于在多播网络中管理组播组的协议。它允许主机加入和离开多播组，并通过路由器进行组播数据的传输。IGMP在视频流、音频流和在线游戏等应用中发挥重要作用。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:1:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"基本的常用的网络协议-详细 传输控制协议（TCP） ： 作用层次：传输层（第四层） 单向/双向：TCP是一种双向协议，允许双方在连接中进行双向的数据传输。 长连接/点对点：TCP使用长连接，即在通信双方建立连接后，可以持续地进行数据传输。 区别：TCP提供可靠的、面向连接的通信。它通过序列号、确认应答、重传机制等保证数据的可靠性和完整性。TCP还提供流控制和拥塞控制机制，以确保网络中的可靠性和效率。 网际协议（IP） ： 作用层次：网络层（第三层） 单向/双向：IP是一种无连接协议，只负责将数据包从源地址传输到目的地址，是一种单向协议。 长连接/点对点：IP本身并不保持连接状态，因此没有长连接或点对点的概念。 区别：IP协议是互联网的核心协议，负责数据包的路由选择和传输。它使用IP地址唯一标识网络中的设备，并根据路由表将数据包从源地址传输到目的地址。IP协议提供了无连接、不可靠的传输服务。 超文本传输协议（HTTP） ： 作用层次：应用层（第七层） 单向/双向：HTTP是一种双向协议，客户端向服务器发送请求，服务器返回响应。 长连接/点对点：HTTP既可以使用长连接也可以使用短连接。长连接允许在单个连接上发送多个请求和响应，而短连接在每个请求-响应周期后关闭连接。 区别：HTTP用于在客户端和服务器之间传输超文本和其他资源。它使用URL作为资源定位符，通过请求方法（如GET、POST）向服务器发送请求，并接收服务器返回的响应。 域名系统（DNS） ： 作用层次：应用层（第七层） 单向/双向：DNS是一种双向协议，客户端向DNS服务器发送查询请求，服务器返回响应。 长连接/点对点：DNS通常使用短连接，即每次查询都会建立一个新的连接。 区别：DNS用于将域名解析为IP地址，以实现设备之间的通信。它使用分布式数据库系统，客户端向DNS服务器发送域名查询请求，并接收到对应的IP地址响应。 动态主机配置协议（DHCP） ： 作用层次：应用层（第七层） 单向/双向：DHCP是一种双向协议，客户端向DHCP服务器发送请求，服务器提供响应和配置信息。 长连接/点对点：DHCP使用短连接，在完成IP地址分配后，连接将被释放。 区别：DHCP允许设备在加入网络时自动获取IP地址和其他网络配置信息。客户端通过DHCP发现、请求、确认等阶段与服务器进行交互，最终获取网络配置。 用户数据报协议（UDP） ： 作用层次：传输层（第四层）。 单向/双向：UDP是一种无连接协议，可以进行单向或双向通信。但是，UDP本身不提供确认和重传机制，因此数据传输不可靠。 长连接/点对点：UDP是无连接的，每个数据报都是一个独立的信息单元。每个数据报都具有自己的源地址和目的地址。 区别：UDP是一种简单的传输协议，它提供了一种无需建立连接的快速数据传输方式。它将数据分割为数据报，并通过IP协议进行传输，但不提供可靠性保证。UDP通常用于实时应用，如音频、视频、实时游戏等，其中传输速度和即时性比数据完整性更重要。 文件传输协议（FTP） ： 作用层次：应用层（第七层）。 单向/双向：FTP是一种双向协议，客户端与服务器之间可以进行双向数据传输。 长连接/点对点：FTP使用长连接，客户端在建立连接后可以持续进行多个文件传输操作。 区别：FTP是一种专门用于文件传输的协议。它提供了一套命令和响应规范，允许客户端连接到FTP服务器并进行文件上传、下载、删除等操作。FTP可以使用TCP作为传输协议，以确保可靠的数据传输。 简单邮件传输协议（SMTP） ： 作用层次：应用层（第七层）。 单向/双向：SMTP是一种双向协议，用于在客户端和邮件服务器之间进行双向通信。 长连接/点对点：SMTP使用短连接，在每次邮件发送后连接会关闭。 区别：SMTP是用于发送和接收电子邮件的协议。它定义了电子邮件的传输规则和信封格式。SMTP客户端用于发送电子邮件，而SMTP服务器用于接收和转发电子邮件。SMTP协议通常使用TCP作为传输协议，以确保可靠的邮件传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:0","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"TCP与UDP的区别 TCP（传输控制协议） ： TCP是面向连接的协议，它在通信双方之间建立一个可靠的、有序的、全双工的连接。 TCP提供数据传输的可靠性，通过序号、确认和重传等机制来确保数据的可靠性和完整性。 TCP保证数据按顺序到达目标，如果有数据丢失或损坏，TCP会重新传输丢失的数据。 TCP连接的建立使用三次握手，连接的关闭使用四次挥手。 TCP适用于对数据可靠性要求高的应用场景，如文件传输、Web浏览、电子邮件等。 UDP（用户数据报协议） ： UDP是无连接的协议，每个数据报都是独立的，不与之前或之后的数据报建立连接。 UDP不提供数据传输的可靠性，也不保证数据的按序到达目标。它将数据报发送到目标地址，但无法确保它是否到达或是否按顺序到达。 UDP是一种轻量级的协议，没有TCP的连接建立和维护的开销，以及重传和拥塞控制机制，因此传输效率较高。 UDP适用于实时性要求较高的应用场景，如音频和视频流媒体、实时游戏等，因为它对数据传输的实时性更敏感，可以更快地传递数据。 举例说明： TCP：当你浏览网页时，你的浏览器使用TCP与Web服务器建立连接，然后请求和接收网页的数据。TCP确保数据可靠地传输，并按正确的顺序到达，以确保你能够正确地浏览网页的内容。 UDP：在实时游戏中，UDP常用于传输游戏数据。例如，在多人在线游戏中，玩家的位置和动作需要实时传输给服务器和其他玩家。UDP的低延迟和快速传输特性使得玩家能够快速响应游戏动作。 与TCP相比，UDP具有一些明显的区别： 连接性：TCP是面向连接的协议，它在通信双方建立连接并维护连接状态。UDP则是无连接的，每个数据报都是独立的。 可靠性：TCP提供可靠的数据传输，通过确认和重传机制来确保数据的完整性和可靠性。UDP不提供这些机制，因此数据传输不可靠。 传输效率：由于TCP提供了可靠性和拥塞控制等机制，它在传输效率上会有一定的开销。相比之下，UDP不提供这些机制，因此传输效率更高。 数据包边界：TCP是一个数据流协议，没有数据包边界的概念。UDP通过将数据分割为数据报，每个数据报都具有自己的边界。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:1","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"FTP与SMTP FTP用于文件传输，允许客户端与服务器进行双向数据传输。它使用长连接来支持多个文件传输操作。 SMTP用于电子邮件传输，支持发送和接收电子邮件。它也是一个双向协议，使用短连接来发送邮件。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:2","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"如何理解长连接、短链接？单向以及双向通信？ 理解长连接和短连接、单向和双向通信的概念可以从以下角度入手： 连接的持续性 ： 长连接：长连接是指在通信双方之间建立连接后，保持连接的状态进行持续的数据传输。在长连接中，通信双方可以进行多次的数据交换而无需重新建立连接。 短连接：短连接是指每次通信都需要建立一个新的连接，并在通信结束后关闭连接。每次通信都是独立的，不保持连接的状态。 通信的双向性 ： 单向通信：在单向通信中，数据的传输只发生在一个方向上，从发送方到接收方。接收方不会向发送方发送任何数据。 双向通信：双向通信允许数据在通信双方之间进行双向传输。发送方和接收方都可以发送和接收数据。 举例来说，让我们以网络通信中的TCP协议为例来说明这些概念的应用： 长连接（双向）：当两台计算机通过TCP建立连接后，它们可以在连接的生命周期内进行双向的数据传输。数据可以在双方之间交换多次，而无需每次都重新建立连接。这种长连接常见于像网页浏览、实时通信应用等场景，例如通过Web浏览器访问网站时，浏览器与服务器之间可以建立一个长连接来传输多个资源。 短连接（单向）：在某些情况下，通信双方可能只需进行一次或少数几次数据交换，而无需保持连接的状态。例如，当客户端通过HTTP向服务器请求某个网页时，客户端会与服务器建立短连接，发送请求并接收响应后，连接会关闭。下次再请求时会再次建立新的连接。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:3","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是有状态和无状态？ 有状态和无状态是指网络通信协议或应用程序在交互过程中是否保持上下文或状态信息的特性。 有状态（Stateful） ： 有状态是指在通信过程中保持一定的状态信息或上下文。 当通信双方建立连接后，会在双方之间维护一些状态信息，这些信息可能包括会话标识、认证状态、会话数据等。 在后续的通信中，这些状态信息会影响协议或应用程序的行为和处理过程。 有状态的协议或应用程序能够跟踪和管理多个请求之间的关系，提供更高级的功能和服务。 例如，HTTP协议本身是无状态的，但通过使用HTTP会话机制（如Cookie、Session），可以在多个请求之间保持状态信息。 无状态（Stateless） ： 无状态是指在通信过程中不保持任何状态信息或上下文。 每个请求都是独立的，服务器不会记住之前的请求或客户端的状态。 每个请求都需要提供所有必要的信息来完成处理，不依赖之前的请求或状态。 无状态的协议或应用程序更加简单和轻量，每个请求都是相互独立的。 例如，DNS协议就是无状态的，每个DNS查询都是独立的，不依赖之前的查询结果或状态信息。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:4","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的三次握手？为什么是三次？ 当建立和终止TCP连接时，TCP协议使用三次握手（Three-Way Handshake）和四次挥手（Four-Way Handshake）的过程。 TCP三次握手（Three-Way Handshake） ： 第一次握手（SYN）：客户端向服务器发送一个SYN（同步）报文，指示客户端请求建立连接。该报文包含一个初始序列号（ISN）作为数据的起始点。 第二次握手（SYN + ACK）：服务器接收到客户端的SYN报文后，会发送一个带有SYN/ACK标志的报文作为响应。该报文表示服务器已经接收到请求，并同意建立连接。同时，服务器也会为连接分配自己的初始序列号。 第三次握手（ACK）：客户端收到服务器的SYN/ACK报文后，会发送一个带有ACK标志的报文作为确认。这样，客户端和服务器的连接就建立起来了。连接建立后，双方可以开始传输数据。 三次握手的原理和原因： 第一次握手确保客户端可以向服务器发送请求，并通知服务器客户端的初始序列号。 第二次握手确保服务器能够接收到客户端的请求，并同意建立连接。服务器也通知客户端服务器的初始序列号。 第三次握手是为了确认服务器收到了客户端的响应，确保连接的双向性。 为什么不是2次握手： 两次握手无法解决以下情况：客户端向服务器发送连接请求，但该请求在网络中延迟，并最终在一段时间后到达服务器。如果只有两次握手，服务器会以为客户端要建立连接，但实际上客户端并没有发送连接请求。这样会导致服务器浪费资源和时间。 通过引入第三次握手，服务器可以确认客户端确实有意向建立连接，从而避免错误的连接请求。 总结： TCP三次握手和四次挥手是为了确保可靠的连接建立和关闭。三次握手确保连接建立时的双向通信，而四次挥手保证连接的正确关闭。这些过程和步骤是为了解决网络延迟和确保数据完整性的问题，以提供可靠的数据传输。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:5","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是TCP的四次挥手？ TCP四次挥手（Four-Way Handshake） ： 第一次挥手（FIN）：当一个端点（通常是客户端）希望关闭连接时，它发送一个带有FIN（结束）标志的报文给另一个端点（通常是服务器）。这表示该端点已经完成了数据的发送，并且准备关闭发送端的连接。 第二次挥手（ACK）：接收到带有FIN标志的报文后，另一个端点（通常是服务器）发送一个带有ACK（确认）标志的报文给发送端。这个报文表示它已经收到了关闭请求，并确认发送端可以开始关闭连接。 第三次挥手（FIN）：在接收到关闭请求并发送确认后，另一个端点（通常是服务器）也会开始关闭连接。它发送一个带有FIN标志的报文给发送端，表示该端点也完成了数据的发送。 第四次挥手（ACK）：接收到带有FIN标志的报文后，发送端（通常是客户端）发送一个带有ACK标志的报文给另一个端点。这个报文确认接收到了关闭请求，并表示双方的连接已经成功关闭。 四次挥手的原理和原因： 第一次挥手：发送端发送FIN报文给接收端，表示发送端已经完成了数据的发送，并希望关闭连接。 第二次挥手：接收端收到FIN报文后，发送一个ACK报文给发送端，表示已经收到关闭请求，并确认发送端可以开始关闭连接。 第三次挥手：接收端发送FIN报文给发送端，表示接收端也完成了数据的发送，并准备关闭连接。 第四次挥手：发送端收到FIN报文后，发送一个ACK报文给接收端，表示接收到关闭请求，并确认双方的连接已经成功关闭。 为什么需要四次挥手： 因为TCP是全双工的协议，允许数据在两个方向上同时传输。因此，关闭连接需要双方都完成数据的传输和关闭操作。 第三次挥手是为了确保接收端可以完成数据的传输并准备关闭连接，同时发送一个FIN报文。 第四次挥手是为了发送端确认接收到关闭请求并进行最后的确认，同时发送一个ACK报文。 为什么不是三次挥手： TCP连接的终止需要一个额外的步骤来保证数据完整性和可靠性。因此，四次挥手是为了正确关闭连接而设计的。 第三次挥手（FIN）是为了客户端通知服务器已经准备好关闭连接，并停止发送数据。 第四次挥手（ACK）是为了服务器确认客户端的关闭请求，并通知客户端自己也准备关闭连接。 这样，双方都能确认彼此的关闭意图，并进行必要的数据传输和状态清理。 通过四次挥手，双方可以彼此确认关闭连接的意图，并完成最后的数据传输和状态清理，确保连接的正确关闭。 总结： TCP四次挥手是为了可靠地关闭连接而设计的。它确保双方在关闭连接时能够完成数据的传输和状态的清理，以提供可靠的连接关闭过程。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:6","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"什么是SYN、ACK、FIN？ SYN报文（同步报文） ： SYN报文是由发起连接的一方（通常是客户端）发送的。 它用于建立连接，表示客户端请求建立连接，并在报文的TCP头部中携带一个初始序列号（ISN）。 SYN报文的主要作用是告知对方自己希望建立连接，并通过ISN提供一个起始点，以便在数据传输中对字节进行编号。 ACK报文（确认报文） ： ACK报文可以单独存在，也可以与其他标志（如SYN、FIN）组合使用。 它用于确认接收到的数据，表明对方已经正确接收到了之前的数据，并可以继续发送下一段数据。 在三次握手过程中的第二次握手中，ACK报文用于确认接收到了对方发送的SYN报文，并表示同意建立连接。 ACK报文在建立连接后的数据传输中也起着重要的作用，用于确认接收到的数据，并保持双方的数据传输同步。 FIN报文（结束报文） ： FIN报文是由一方（通常是发起关闭的一方）发送的。 它用于关闭连接，表示发送方不再发送数据，并请求关闭连接。 FIN报文的发送方通常已经完成了数据的发送，并且希望关闭连接。 总结： SYN报文用于请求建立连接，并携带初始序列号（ISN），而ACK报文用于确认接收到的数据，保持数据传输的同步和可靠性。它们在TCP连接的建立过程中起着关键的作用，确保双方能够正确建立连接并进行数据传输。FIN报文用于关闭TCP连接，发送方发送FIN报文表示完成了数据的发送并请求关闭连接，接收方发送FIN报文表示自己也完成了数据的发送。通过FIN报文的交换，双方能够协调关闭连接的过程，并确保连接的正确关闭。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:7","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["计算机"],"content":"HTTP与HTTPS HTTP（Hypertext Transfer Protocol）和HTTPS（Hypertext Transfer Protocol Secure）是两种常用的协议。它们在安全性和数据传输方面有以下区别： HTTP（Hypertext Transfer Protocol） ： HTTP是一种无状态的协议，它用于在Web服务器和客户端之间传输超文本内容。 HTTP在传输数据时使用明文（未加密），因此数据可以被窃听和篡改。 HTTP使用TCP作为传输协议，使用默认端口号80。 HTTP请求和响应的内容通常是明文的，包括URL、请求头、响应头和消息体等。 HTTP不提供数据的加密和身份验证，因此对于涉及敏感信息的网站，如登录、支付等，存在安全风险。 HTTPS（Hypertext Transfer Protocol Secure） ： HTTPS是基于HTTP的安全协议，通过使用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议进行加密和身份验证来保护数据传输的安全性。 HTTPS使用TCP作为传输协议，使用默认端口号443。 HTTPS通过使用公钥加密和私钥解密的方式来加密通信内容，确保数据在传输过程中的机密性。 HTTPS使用数字证书来验证服务器的身份，并确保与服务器建立的连接是可信的。 HTTPS可以有效地防止数据被窃听和篡改，提供了更高的安全性。 区别总结： HTTP是无状态的协议，数据传输不加密，容易被窃听和篡改。HTTPS是基于HTTP的安全协议，通过加密和身份验证保护数据传输的安全性。 HTTP使用默认端口号80，HTTPS使用默认端口号443。 HTTP传输的数据是明文的，而HTTPS传输的数据经过加密。 HTTP不提供身份验证机制，HTTPS使用数字证书来验证服务器的身份。 HTTPS在安全性方面比HTTP更可靠，适用于对数据传输安全性要求较高的场景，如登录、支付等涉及敏感信息的网站。 ","date":"2023-05-21","objectID":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/:2:8","tags":["网络协议"],"title":"计算机网络-网络协议知识梳理","uri":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"categories":["kubernetes"],"content":"在完成柔性计算项目的过程中，总结request在kubernetes中的各种作用。如有不正确的地方或者有补充的点，欢迎联系我。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:0:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request出现之处 在 Kubernetes 中，Pod 是最小的可调度的部署单元。Pod 包含一个或多个容器，共享相同的网络命名空间和卷存储空间。在 Kubernetes 中，Pod 用来承载应用程序，并提供资源的抽象。Pod 中的 requests 字段是用来定义容器需要的最小计算资源的，主要包括 CPU 和内存。 requests 字段可以在 Pod 级别或容器级别设置。在 Pod 级别设置 requests 字段可以确保所有容器都具有相同的资源要求。在容器级别设置 requests 字段可以确保每个容器都有特定的资源要求。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:1:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用分析 为Pod设置request之后，其会在 Kubernetes 的Scheduler、Kubelet中发挥作用。下面进行详细分析。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:0","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Scheduler 当Pod设置中设置了request Scheduler在调度Pod到合适节点的过程中，会经过预选和优选两个阶段，其中会有各种各样的检查和评分策略，以为Pod找到最适合它的节点。在预选过程中有一个策略叫 NodeResourcesFit ，其作用是检查节点是否拥有Pod 请求的所有资源。实现的扩展点有preFilter、filter、score。其中的重点是 filter 的过程。 filter 过程Scheduler是如何实现的呢？它首先获取到集群中所有节点，然后检查节点是由有满足Pod请求的最小资源(既是节点的剩余可用资源是否大于Pod中设置的request)，如果不满足，则过滤掉当前节点。在计算节点的剩余可用资源时，Scheduler统计运行在节点上的每一个Pod的request，并把它们累加，如果 podRequest.MilliCPU \u003e (nodeInfo.Allocatable.MilliCPU - nodeInfo.Requested.MilliCPU)，那么该节点将会被过滤(这里以CPU举例，检查Memory是否满足要求也是同样的方法)。 当Pod未设置request Pod中未设置request时，Scheduler则认为Pod需要的最小计算资源为0，认为此Pod可以运行在任意一个节点上。故此时Scheduler不再对节点进行过滤和评分，而时把Pod调度到随机的节点上。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:1","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"request作用在Kubelet 当Pod被调度成功之后，对应节点上的Kubelet会创建、运行、管理这个Pod。Kubelet管理节点上所有Pod的生命周期。当节点上所有Pod的request资源之和大于等于节点的Allocatable资源时，kubelet不创建最后一个被调度到此节点的Pod，并将最后一个被调度到此节点的Pod状态设为 OutOfcpu 或者 OutOfmemory。 ","date":"2023-04-14","objectID":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/:2:2","tags":["scheduler","kubelet"],"title":"Kubernetes中request的作用","uri":"/kubernetes%E4%B8%ADrequest%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"categories":["kubernetes"],"content":"记录在验证kubelet压力驱逐原则时的遇到的问题与解决方法。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:0:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"验证节点压力驱逐原则时，实验结果与官方文档给出的规则相反 kubernetes的官方文档中给出，当节点内存资源紧张时，会根据以下的三条规则驱逐节点上的pod以回收内存资源，缓解内存资源压力： 先根据pod的内存使用量是否超过其request进行排序，超过的排在前面； 再根据pod的priority值大小进行排序，值小的排在前面； 最后根据pod内存request减去pod的实际内存使用量的值，得到值较小的排在前面； 我的集群环境： 三台基于Centos7.6操作系统的虚拟机 kubernetes版本1.23.0 未更改kubelet原本的配置文件 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:0","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验过程 自定义三个low、mid、high优先级类，在节点node1上部署两个pod，内存资源使用量大的pod而优先级高，内存使用量小的pod而优先级低。待他们运行稳定之后，再部署一个抢占node1内存资源的pod造成节点内存资源不足而触发驱逐，观察kubelet先驱逐哪一个pod。（**注意：**上述两个测试用的pod均没有设置request，故他们的request为0，驱逐的顺序由第2和第3点决定；同时保证抢占内存的pod不会被先驱逐） ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:1","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"实验结果 使用命令 kubectl get pods -n example -w 观察pod的状态（实验时上面的pod都在example的namespace下）。最终是优先级高的pod先被驱逐，并且它的状态直接是error，并没有出现evicted的状态。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:2","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"结果分析 显然上面的实验结果比不符合kubernetes文档给出的规则，在查阅kubelet源码之后也发现上面的实验结果有误。接着去查看node1上kubelet的配置，发现其节点剩余可用内存剩余小于100Mi时才触发驱逐，并且驱逐时pod的最大宽限期是0秒，这可能导致节点内存资源紧张时pod直接被kubelet kill掉，从而pod的状态直接变成error。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:3","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"思路验证 修改kubelet配置 进入到node1，使用命令打开 vim /var/lib/kubelet/config.yaml kubelet的配置文件，添加以下字段： evictionMaxPodGracePeriod: 60 evictionHard: memory.available: \"800Mi\" 上面是设置kubelet驱逐pod时，给pod的最大宽限期是60秒，当节点剩余可用内存小于800Mi时触发驱逐。然后使用命令 systemctl restart kubelet 重启节点上的kubelet，重新实验。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:4","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"二次实验与结果 同样按照一次实验时的实验步骤再次实验，观察哪一个pod先被驱逐。 这次实验时低优先级且内存使用量较小的pod先被驱逐，得到了正确的实验结果。故确实是因为kubelet默认的产生驱逐的阈值太高而导致出现错误的实验结果，当把kubelet内存的驱逐阈值调低即得到了正确的结果。 ","date":"2023-03-21","objectID":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/:1:5","tags":["kubelet"],"title":"修改kubelet配置","uri":"/%E4%BF%AE%E6%94%B9kubelet%E9%85%8D%E7%BD%AE/"},{"categories":["kubernetes"],"content":"在kubernets项目中多次使用到了docker的相关指令，特在此记录。 Docker 基本命令的使用方法 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:0:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像的拉取、上传和删除 搜索镜像 docker search [imageName]:[tag] 拉取镜像 docker pull [imageName]:[tag] 上传镜像 docker push [imagesName]:[tag] 删除镜像 docker rmi [镜像名]:[tag] 或 docker rmi [镜像ID] 如果删除不成功，可以在上面的删除命令后面加上参数强制删除，如： docker rmi [imageName]:[tag] --force 上述命令可以强制删除镜像，即使这个镜像正在被使用。 注意： 强制删除镜像的命令对于拥有子镜像的镜像将不会成功，除非先删除他的子镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:1:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"镜像打包与导入 打包镜像 docker save -o [打包后的镜像名称].tar [imagesName]:[tag] 通过tar包导入镜像 docker load\u003c[打包的镜像名].tar 注意 其中的 \u003c 符号前后连接没有空格。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:2:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"docker制作镜像 docker build -t [你制作的镜像名]:[tag] . 其中的符号 . 表示Dockerfile文件在当前文件夹下，并使用其进行制作镜像。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:3:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile 简介 什么是Dockerfile? Dockerfile是一个用来构建镜像的文本文件，里面包含了构建镜像所需的指令。 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:0","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["kubernetes"],"content":"Dockerfile指令介绍 FROM 所有Dockerfile指令都必须从FROM命令开始。FROM命令会指定镜像基于哪个基础镜像构建，接下来的命令也会给予这个基础镜像，FROM命令可以多 次使用，表示会创建多个镜像。 FROM \u003cimages name\u003e MAINTAINER MAINTAINER命令用于指定该镜像的作者。 MAINTAINER \u003cauthor name\u003e RUN RUN命令在shell或者exec的环境下执行的命令。RUN指令会在新创建的镜像上添加新的层面，接下来提交的结果用在Dockerfile的下一条指令中。语法如下： RUN \u003ccommand\u003e RUN apt-get update //这种形式使用/bin/sh环境中执行的命令 RUN [\"apt-get\", \"update\"] //这种形式直接使用系统调用exec来执行 多个命令可以用符号 \u0026\u0026 连接执行，如： RUN apt-get update \u0026\u0026 apt-get install vim ADD ADD是文件复制指令。它有两个参数和。destination是容器内的路径。source可以是URL或者是启动配置上下稳重的一个文件。语法如下： ADD \u003csrc\u003e \u003cdestination\u003e 如果源文件是主机上的zip或tar形式的压缩文件，Docker会先解压缩，然后将文件添加到镜像指定的文件。如果是URL指定的网络压缩文件则不会解压。 CMD CMD指令提供了容器启动时默认执行的命令。Dockerfile只允许使用一次CMD指令。 使用多个CMD指令会抵消之前所有的指令，只有最后一个指令生效。CMD有三种形式： CMD [\"executable\", \"paraml\", \"param2\"] CMD [\"param1\", \"param2\"] CMD command param1 param2 EXPOSE EXPOSE指定容器在运行时监听的端口。语法如下： EXPOSE \u003cport\u003e; //多个端口用空格隔开 EXPOSE 80 8080 9000 运行容器时通过参数-P(大写)即可在EXPOSE里所指定的端口映射到主机上另外的随机端口，其他容器或主机就可以通过映射后的端口与此容器通信。同时，我们也可以通过-p(小写)参数将Dockerfile中EXPOSE没有列出的端口设置成公开的。 ENTRYPOINT ENTRYPOINT：配置给容器一个可执行的命令。这意味着每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似CMD，Docker只允许一个ENTRYPOINT,多个ENTRYPOINT会抵消之前所有的ENTRYPOINT命令，只执行最后一句。其语法如下： ENTRYPOINT [\"executable\", \"param1\", \"param2\"] ENTRYPOINT command param1 param2 WORKDIR WORKDIR指定RUN、CMD和ENTRYPOINT命令的工作目录。语法如下： WORKDIR /path/to/workdir ENV ENV指令用于设置环境变量。它们使用键值对，增加运行程序的灵活性，语法如下： ENV \u003ckey\u003e \u003cvalue\u003e 以上是我本人在kubernetes项目中常用的指令，特在此记录。 另外，Dockerfile文件的理解是站在巨人的肩膀上，连接在此 ","date":"2023-03-07","objectID":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/:4:1","tags":["docker"],"title":"docker基本命令使用","uri":"/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"categories":["杂记"],"content":"Markdown是一种轻量级标记语言，被广泛应用于各种场景中，如博客、论坛、文档等。Markdown的语法简单易懂，但是为了使文章格式清晰美观，还是需要按照一定的规范和格式来编写。 标题 Markdown中的标题使用 # 符号表示，一个 # 表示一级标题，两个 # 表示二级标题，以此类推，如下： 这是一级标题 一级标题 这是二级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:0:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"二级标题 这是三级标题 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:0","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["杂记"],"content":"三级标题 这是四级标题 四级标题 这是五级标题 五级标题 这是六级标题 六级标题 # 一级标题 ## 二级标题 ### 三级标题 文本样式 Markdown中可以使用如下方式来修改文本样式： 加粗：使用两个 * 符号或者两个 __ 符号包含文本。 **加粗文字** 或者 __加粗文字__ 斜体：使用一个 * 符号或者一个 _ 符号包含文本。 *斜体文字* 或者_斜体文字 删除线：使用两个 ~~ 符号包含文本。 ~~删除线文字~~ 列表 Markdown支持有序列表和无序列表两种，有序列表使用数字和 . 符号表示，无序列表使用 - 符号或者 * 符号表示。如下： 无序列表 - 无序列表1 - 无序列表2 - 无序列表3 有序列表 有序列表1 有序列表2 有序列表3 1. 有序列表1 2. 有序列表2 3. 有序列表三 链接和图片 Markdown中插入链接和图片的语法类似，都是使用中括号和小括号组合表示。其中，中括号内是链接或图片的描述，小括号内是链接或图片的地址。如下： 链接： 示例链接：百度链接 [链接描述](链接地址) 图片 示例图片： ![图片描述](图片地址) 代码块 如果需要插入一段代码，可使用 `` 符号包含代码，也可以使用 `````` 符号包含多行代码。如下： 一行代码 `code` 多行代码 code1 code2 code3 引用 Markdown中使用 \u003e 符号表示引用，可以嵌套使用。如下： 引用示例1 引用示例2 引用示例3 \u003e 引用1 \u003e\u003e 引用2 \u003e\u003e\u003e 引用3 分割线 Markdown中使用三个或者更多的 - 或者 * 符号表示分割线后可以有空格。如下： 分割线示例1 分割先示例2 --- 或 *** 上下标 上标: \u003csup\u003e num \u003c/sup\u003e 下标:\u003csub\u003e num \u003c/sub\u003e 以上就是Markdown编写文章的一些基本的规范和格式，可以根据需要进行调整。 ","date":"2023-03-05","objectID":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/:1:1","tags":["开始"],"title":"Markdown编写规范","uri":"/markdown%E6%96%87%E7%AB%A0%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"},{"categories":["项目"],"content":"梳理一下大二时做的一个课程设计，用C++语言实现一个轻量级的小型数据库，只存储键值对。 特点： 依赖少：实现过程中涉及到的数据结构如哈希表、小根堆等，均是自己实现，不依赖第三方库文件； 高效： 以顺序写的方式将数据写入到磁盘文件中，文件读取速度快。由于成本原因，大部分情况我们使用的都是传统的机械硬盘，机械硬盘随机读写慢，但是顺序读写快； 支持基本的增删改查、同时支持设置数据的生存时间。 键值对的设计 对于K-V中存储的每个key-value，每个记录有5个字段组成： key-length: 定长四节点的(int)整形表示，记录的是key的长度； value-length: 定长四个节点的(int)整形表示，记录的是value的长度； operation：定长双字节的(short)整形表示，1表示SET操作，2表示DELETE操作，3表示EXPIRES操作； key: 记录的是key的字符串； value: 记录的是value的字符串； 运用到的数据结构 哈希表 用哈希表建立内存索引，哈希表中的节点存储有每个记录的key、记录的过期时间及记录在文件中的偏移值。 小根堆 用小根堆维护被设置了过期时间的记录，堆中的节点同样存储了记录的key、记录的过期时间及记录在文件中的偏移值。 基本操作 写操作(SET) 将新的Key-Value Record追加写入到文件的末尾； 将 K-V Record同步更新到哈希表中，若Key不存在，则将它添加到索引中。若Key已经存在，则修改索引指向的位置(既再文件中偏移量)； 删除操作(DELETE) 在文件的末尾追加写入一个K-V Record，该Record中value的长度为-1，操作类型字段为2，表示删除这个记录； 更新哈希表中对应的记录，释放被删除的记录所在的节点； 读操作(GET) 查找哈希表，如果该记录存在，可以得到其在文件中的偏移值； 如果记录存在，依据哈希表中的偏移值去文件中读出对应的value并返回； 过期操作(EXPIRES) 设置Key的生存周期，倒计时归零后，自动将Key删除 获取当前的时间戳，加上生成时间得到过期时间戳； 将这个记录追加写入到文件中，operation操作字段为3，表示设置生成时间，同时value字段用来存放过期时间戳； 注意： 使用小根堆记录所有Key的过期时间： 读操作(GET)前，遍历堆顶元素，将所有已过期的Key删除； 对重复设置过期时间的Key，需要更新小根堆中的过期时间； 对已设置过期时间的Key，过期前执行删除(DELETE)或者覆盖(SET)操作，需要删除小根堆中的过期时间； 其他点 异常处理，如打开数据库文件时，需要判断输入的文件路径是否合法、文件是否存在、及是否创建成功； 由于数据库中对记录的操作都会在文件中追加如入，所以数据库文件存在一段时间后，会产生大量的无效数据，因此，当文件容量达到一定值时，需要对文件进行PURGE操作，删除无效的、过期的记录； 思考-进一步优化 由于磁盘操作比内存操作要慢，故可在内存中短暂存储短期内操作的数据，待内存使用达到上限阈值时，将最久不使用的Key-Value写入磁盘。 项目中涉及的八股文 堆排序 你能说一下堆排序吗？ 堆排序主要分为两个步骤，一是建堆，而是调整然后排序，下面以小根堆为例说下这两个过程； 建堆：堆中的数据是以数组的方式存储的，支持随机访问，堆中的数据有以下关系：下标从零开始，第i个节点的左孩子是2i+1，右孩子是2i+2，第i个节点的父节点是i/2(i为奇数)，或者是i/2 -1(i为偶数)。建堆时从下标为数组长度一般的元素开始，如果其左右孩子中有一个比它更小，那么将其与父节点交换，然后再以被交换的孩子节点作为父节点，看它的孩子中有没有比它更小的，如果有，则继续交换，重复上面的过程，直至其左右孩子不存在；接着坐标往前移，重复上述的调整过程，直到移动到第0个节点，此时整个堆构建完毕。 排序：交换堆顶元素与堆中的最后一个元素，数组长度减一，然后调整堆顶元素进，与最小的孩子进行交换，交换之后再以最小的孩子作为父节点，继续与它的孩子交换，直至不能再交换。再重复2的过程，直到数组的长度为1，此时可以得到降序排序的数组； 复杂度，建堆过程中，时间复杂度为O(N)，调整过程中，时间复杂度为O(NlogN)，所以总的时间复杂度为O(NlogN)； 哈希表 哈希表的实现方式有什么？ 数组+二叉搜索树：在每个哈希桶中使用二叉搜索树来存储元素。当哈希桶中的元素较多时，查询效率高，适合处理较大规模的数据。 数组+链表：在每个哈希桶中使用链表来存储元素，元素的插入和删除效率高，，但是查询时间较慢，适合处理小规模的数据。 哈希表的一般长度是多少？为什么是这么多？ 默认数组长度是 16，只要是2的次幂都行。那为什么数组长度得是 2 的次幂呢？一般来说，我们常用的 Hash函数是这样的：index = HashCode(key) % Length，由于位运算的效率比较高，所以 HashMap 就相应的可以改成：index = HashCode(key) \u0026 (Length - 1)。为了保证根据上述公式计算出来的 index 值是分布均匀的，我们就必须保证 Length 是 2 的次幂。 哈希表为什么按照两倍扩容？ 因为哈希表默认的数组长度一般是2的次幂，所以按照两倍扩容之后，数组的长度仍然是2的次幂。那为什么一定是2的次幂呢？因为这样可以使元素均匀的散布hashmap中，减少hash碰撞。index的计算可以改为用位运算的方式实现，计算效率高，而且扩容后元素在新表中的位置要么不动，要么有规律的出现在新表中（二的幂次方偏移量），这样会使扩容的效率大大提高。 处理哈希冲突的办法有哪些？ 开放地址法：有线性探测法和平方探测法，当发生冲突时，继续往后找； 多重哈希法：构造多个哈希函数，发生冲突后使用下一个哈希函数； 链地址法：将哈希值相同的记录用链表串起来； 建立公共溢出区：将哈希表分为基础表和益处表两部分，发生冲突的填入益处表； ","date":"2022-12-15","objectID":"/k-v-database/:0:0","tags":["File-Based-K-V-Database"],"title":"K v Database","uri":"/k-v-database/"}]